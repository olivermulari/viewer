_N_E =
(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([["pages/index"],{

/***/ "../valo.js/build/valo.js":
/*!********************************!*\
  !*** ../valo.js/build/valo.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(()=>{\"use strict\";var t={707:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(347),s=i(319),a=new(i(236).Vector3)(1,1,1),h=function(t){function e(e){var i=t.call(this)||this;return i.scene=e,i.fov=60,i.aspect=1,i.zNear=.1,i.zFar=2e3,i.perspective=new o.Matrix4,i.inversePerspective=new o.Matrix4,i.inverseWorldMatrix=new o.Matrix4,i.worldMatrixNeedsUpdate=!1,i.perspectiveNeedsUpdate=!0,i}return n(e,t),e.prototype.setActive=function(){this.scene.activeCamera=this,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.updateWorldMatrix=function(){var t=this.inverseWorldMatrix,e=this.position;this.quaternion.setFromEuler(this.rotation),t.compose(e,this.quaternion,a),t.inverse(t),this.worldMatrixNeedsUpdate=!1},e.prototype.updatePerspective=function(){var t=this.fov,e=this.aspect,i=this.zNear,r=this.zFar;this.perspective.setPerspective(t,e,i,r),this.inversePerspective.inverse(this.perspective),this.perspectiveNeedsUpdate=!1},e.prototype.setAspect=function(t){this.aspect=t,this.perspectiveNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.update=function(){this.worldMatrixNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.forceUpdate=function(){this.update(),this.updatePerspective(),this.updateWorldMatrix()},e.prototype.updateInteractions=function(t){},e.prototype._onKeyDownCallBack=function(t){},e.prototype._onKeyUpCallBack=function(t){},e.prototype._onRotationChangeCallback=function(){this.worldMatrixNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e.prototype._onPositionChangeCallBack=function(){this.worldMatrixNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e}(s.Object3D);e.Camera=h},725:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(707),s=i(236),a=i(601),h=new s.Vector3,c=function(t){function e(e){var i=t.call(this,e)||this;return i.speed=.5,i.sensitivity=10,i.inverse=!1,i}return n(e,t),e.prototype.updateInteractions=function(t){var e=t.direction,i=t.draggingInfoDidUpdate;if(e!==a.DIRECTION.NONE){var r=this.getDirection(),n=h.set(0,1,0).applyQuaternion(this.quaternion);switch(e){case a.DIRECTION.UP:break;case a.DIRECTION.UR:r.applyAxisAngle(n,-Math.PI/4);break;case a.DIRECTION.RIGHT:r.applyAxisAngle(n,-Math.PI/2);break;case a.DIRECTION.DR:r.applyAxisAngle(n,3*-Math.PI/4);break;case a.DIRECTION.DOWN:r.inverse(r);break;case a.DIRECTION.DL:r.applyAxisAngle(n,3*Math.PI/4);break;case a.DIRECTION.LEFT:r.applyAxisAngle(n,Math.PI/2);break;case a.DIRECTION.UL:r.applyAxisAngle(n,Math.PI/4)}this.translate(r.multiply(this.speed))}if(i){var o=t.draggingInfo,s=5e-4*(this.inverse?-1:1)*this.sensitivity;this.rotateX((o.y0-o.y1)*s),this.rotateY((o.x0-o.x1)*s)}},e}(o.Camera);e.FreeCamera=c},469:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(707),s=i(236),a=new s.Vector3(0,1,0),h=function(t){function e(e){var i=t.call(this,e)||this;return i.target=new s.Vector3,i}return n(e,t),e.prototype.updateWorldMatrix=function(){this.lookAt(this.target),this.worldMatrixNeedsUpdate=!1,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.lookAt=function(t){var e=this.position,i=this.inverseWorldMatrix;return i.inverse(i.lookAt(e,t,a)),this},e}(o.Camera);e.TargetCamera=h},601:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0}),e.DIRECTION={NONE:-1,UP:0,DOWN:1,LEFT:2,RIGHT:3,UR:4,DR:5,DL:6,UL:7}},627:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=function(t){function e(e){var i=t.call(this)||this;return i.width=e&&e.width?e.width:10,i.height=e&&e.height?e.height:10,i.depth=e&&e.depth?e.depth:10,i.buildGeometry(),i}return n(e,t),e.prototype.buildGeometry=function(){for(var t=this.width/2,e=this.height/2,i=this.height/2,r=[1,-1,1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,1],n=0;n<r.length;n+=3)r[n]*=t,r[n+1]*=e,r[n+2]*=i;this.amountOfVertices=24,this.setPositionAttribute(new Float32Array(r),3),this.setNormalsAttribute(new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0]),3),this.setIndicesAttribute(new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),3)},e}(i(103).Geometry);e.BoxGeometry=o},332:function(t,e){var i,r=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,\"__esModule\",{value:!0});var n=function(){function t(t,e){this.itemSize=t,this.buffer=null,this.type=e}return t.prototype.createBuffer=function(t){var e=t.createBuffer();this.buffer=e},t.prototype.bindBufferWithProgram=function(t,e,i){var r=e.vao;if(this.array&&r){var n=this.array,o=this.buffer,s=0;switch(this.type){case\"normal\":s=i.A_NORMAL;break;case\"position\":s=i.A_POSITION}t.enableVertexAttribArray(s),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW);var a=this.itemSize,h=t.FLOAT;t.vertexAttribPointer(s,a,h,!1,0,0)}},t}();e.BufferAttribute=n;var o=function(t){function e(e,i,r){var n=t.call(this,i,r)||this;return n.array=e,n}return r(e,t),e}(n);e.Float32BufferAttribute=o;var s=function(t){function e(e,i,r){var n=t.call(this,i,r)||this;return n.bindBufferWithProgram=function(){},n.array=e,n}return r(e,t),e.prototype.createBuffer=function(t){var e=t.createBuffer(),i=this.array;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),this.buffer=e},e}(n);e.Uint16BufferElementAttribute=s},103:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(332);e.ATTRIBUTE_LOCATION={POSITION:0,INDICES:1,NORMAL:2};var n=0,o=function(){function t(){this.id=++n,this.vao=null,this.attributes={},this.amountOfVertices=0,this.hasPositions=!1,this.hasNormals=!1,this.hasIndices=!1,this.isBuffersSet=!1,this.isBuffersBind=!1}return t.prototype.setBuffers=function(t){if(!this.isBuffersSet){var i=t.createVertexArray();t.bindVertexArray(i),this.vao=i,this.hasPositions&&this.attributes[e.ATTRIBUTE_LOCATION.POSITION].createBuffer(t),this.hasNormals&&this.attributes[e.ATTRIBUTE_LOCATION.NORMAL].createBuffer(t),this.hasIndices&&this.attributes[e.ATTRIBUTE_LOCATION.INDICES].createBuffer(t),this.isBuffersSet=!0,t.bindVertexArray(null)}},t.prototype.bindBuffers=function(t,i){this.isBuffersBind||(t.bindVertexArray(this.vao),this.hasPositions&&-1!==i.A_POSITION&&this.attributes[e.ATTRIBUTE_LOCATION.POSITION].bindBufferWithProgram(t,this,i),this.hasNormals&&-1!==i.A_NORMAL&&this.attributes[e.ATTRIBUTE_LOCATION.NORMAL].bindBufferWithProgram(t,this,i),this.hasIndices,t.bindVertexArray(null))},t.prototype.setPositionAttribute=function(t,i){this.attributes[e.ATTRIBUTE_LOCATION.POSITION]=new r.Float32BufferAttribute(t,i,\"position\"),this.hasPositions=!0},t.prototype.setNormalsAttribute=function(t,i){this.attributes[e.ATTRIBUTE_LOCATION.NORMAL]=new r.Float32BufferAttribute(t,i,\"normal\"),this.hasNormals=!0},t.prototype.setIndicesAttribute=function(t,i){this.attributes[e.ATTRIBUTE_LOCATION.INDICES]=new r.Uint16BufferElementAttribute(t,i,\"indices\"),this.hasIndices=!0},t.prototype.getPositions=function(){if(this.hasPositions){var t=this.attributes[e.ATTRIBUTE_LOCATION.POSITION].array;if(t instanceof Float32Array)return t}return new Float32Array},t}();e.Geometry=o},276:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(103),s=i(522),a=function(t){function e(e){var i=t.call(this)||this;return i.width=e&&e.width?e.width:100,i.height=e&&e.height?e.height:100,i.subdivisions=e&&e.subdividions?e.subdividions:10,i.buildGeometry(),i}return n(e,t),e.prototype.buildGeometry=function(){for(var t=this.width,e=this.height,i=this.subdivisions,r=[],n=[],o=Array((i+1)*(i+1)*3).fill(0).map((function(t,e){return e%3==1?1:0})),a=t/i,h=e/i,c=0;c<=i;c++)for(var u=0;u<=i;u++){var l=u*a-t/2,p=c*h-e/2;r.push(l,0,p)}for(c=0;c<i;c++)for(u=0;u<i;u++){var f=s.MathUtils.index1From2D(u,c,i+1),d=s.MathUtils.index1From2D(u,c+1,i+1),m=s.MathUtils.index1From2D(u+1,c,i+1),y=s.MathUtils.index1From2D(u+1,c+1,i+1);n.push(f,m,d,d,m,y)}this.amountOfVertices=n.length,this.setPositionAttribute(new Float32Array(r),3),this.setNormalsAttribute(new Float32Array(o),3),this.setIndicesAttribute(new Uint16Array(n),3)},e}(o.Geometry);e.PlaneGeometry=a},550:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(103),s=i(236),a=function(t){function e(e){var i=t.call(this)||this;return i.radius=e&&e.radius?e.radius:5,i.subdivisions=e&&e.subdivisions?e.subdivisions:30,i.buildGeometry(),i}return n(e,t),e.prototype.buildGeometry=function(){var t=this.radius,e=2*this.subdivisions,i=this.subdivisions,r=[],n=[],o=[];r.push(0,t,0,0,-t,0),o.push(0,1,0,0,-1,0);for(var a=new s.Vector3(0,1,0),h=new s.Vector3(t,0,0),c=new s.Vector3(0,t,0),u=2*Math.PI/e,l=Math.PI/i,p=new Array(e).fill(0).map((function(){return new Array(i+1).fill(0)})),f=2,d=0;d<e;d++){var m=d*u;h.set(t,0,0),h.applyAxisAngle(a,m),p[d][0]=0,p[d][i]=1;for(var y=1;y<i;y++){var v=y*l;c.set(0,t,0),c.applyAxisAngle(h,v),r.push(c.x,c.y,c.z),c.normalize(),o.push(c.x,c.y,c.z),p[d][y]=f++}if(d>0)for(var g=0;g<i;g++){var x=p[d-1][g],_=p[d][g],w=p[d-1][g+1],b=p[d][g+1];0===g?n.push(0,b,w):g===i-1?n.push(1,x,_):n.push(x,_,w,_,b,w)}if(d===e-1)for(g=0;g<i;g++){var I=p[d][g];_=p[0][g],w=p[d][g+1],b=p[0][g+1],0===g?n.push(0,b,w):g===i-1?n.push(1,I,_):n.push(I,_,w,_,b,w)}}this.amountOfVertices=n.length,this.setPositionAttribute(new Float32Array(r),3),this.setNormalsAttribute(new Float32Array(o),3),this.setIndicesAttribute(new Uint16Array(n),3)},e}(o.Geometry);e.SphereGeometry=a},897:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(103),n=function(){function t(t){this.mesh=t,this.geometry=new r.Geometry}return t.prototype.setGeometry=function(){var t=this.mesh.boundingBox.box,e=t.min.x,i=t.max.x,r=t.min.y,n=t.max.y,o=t.min.z,s=t.max.z,a=new Float32Array(24),h=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);a[0]=e,a[1]=r,a[2]=o,a[3]=i,a[4]=r,a[5]=o,a[6]=i,a[7]=n,a[8]=o,a[9]=e,a[10]=n,a[11]=o,a[12]=e,a[13]=r,a[14]=s,a[15]=i,a[16]=r,a[17]=s,a[18]=i,a[19]=n,a[20]=s,a[21]=e,a[22]=n,a[23]=s,this.geometry.setPositionAttribute(a,3),this.geometry.hasIndices||this.geometry.setIndicesAttribute(h,3)},t}();e.BoxHelper=n},252:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(103),n=i(861),o=i(347),s=new n.Box,a=(new o.Matrix4,function(){function t(t){this.camera=t,this.geometry=new r.Geometry}return t.prototype.setGeometry=function(){var t=s;t.min.set(-1,-1,-1),t.max.set(1,1,1);var e=t.min.x,i=t.max.x,r=t.min.y,n=t.max.y,o=t.min.z,a=t.max.z,h=new Float32Array(24),c=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);h[0]=e,h[1]=r,h[2]=o,h[3]=i,h[4]=r,h[5]=o,h[6]=i,h[7]=n,h[8]=o,h[9]=e,h[10]=n,h[11]=o,h[12]=e,h[13]=r,h[14]=a,h[15]=i,h[16]=r,h[17]=a,h[18]=i,h[19]=n,h[20]=a,h[21]=e,h[22]=n,h[23]=a,console.log(h),this.geometry.setPositionAttribute(h,3),this.geometry.hasIndices||this.geometry.setIndicesAttribute(c,3)},t}());e.CameraHelper=a},36:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(897),n=i(252),o=i(707),s=i(636),a=function(){function t(){this.boxes=[],this.cameras=[]}return t.prototype.add=function(t){var e=null;t instanceof o.Camera?(e=new n.CameraHelper(t),this.cameras.push(e)):t instanceof s.Mesh&&(e=new r.BoxHelper(t),this.boxes.push(e))},t}();e.HelperManager=a},41:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(636),n=i(253),o=i(344),s=function(){function t(t){this.visible=void 0===t||!t.visible||t.visible,this.scene,this.nodes=[]}return t.prototype._init=function(t){var e=t.divID;if(void 0!==e){var i=document.getElementById(e);if(null!==i){var r=document.createElement(\"div\");r.id=\"valo-inspector\",r.style.position=\"absolute\",r.style.top=\"0px\",r.style.right=\"0px\",r.style.height=i.getBoundingClientRect().height+\"px\",r.style.width=\"200px\",r.style.color=\"rgb(45, 156, 39)\",r.style.pointerEvents=\"none\",r.style.userSelect=\"none\",r.style.fontFamily=\"Courier, monospace\";var n=document.createElement(\"div\");n.classList.add(\"title\");var o=document.createElement(\"h1\");o.style.margin=\"0px\",o.innerText=\"INSPECTOR\",o.style.fontFamily=\"Courier, monospace\",o.style.fontSize=\"14px\",o.style.textAlign=\"center\",n.appendChild(o),r.appendChild(n);var s=document.createElement(\"div\");s.id=\"valo-inspector-scene\";var a=document.createElement(\"div\");a.id=\"valo-inspector-object\",r.appendChild(s),r.appendChild(a),i.appendChild(r)}}},t.prototype.sceneUpdate=function(t){var e=this;void 0===this.scene&&(this.scene=t);var i=t.meshListDidUpdate;t.id!==this.scene.id&&(this.resetScene(),this.scene=t,i=!0),i&&this.scene.meshes.forEach((function(t){e.addNode(t)}))},t.prototype.addNode=function(t){var e=this,i=document.createElement(\"div\");i.style.paddingLeft=\"10px\",i.style.backgroundColor=\"rgb(50, 50, 50)\",i.style.border=\"1px solid grey\";var n=document.createElement(\"h1\");n.style.margin=\"0px\",n.innerText=t.name,n.style.fontFamily=\"Courier, monospace\",n.style.fontSize=\"12px\",t instanceof r.Mesh&&(n.onclick=function(){return e.displayMeshOptions(t)}),null!==n.onclick&&(n.style.cursor=\"pointer\",n.style.pointerEvents=\"auto\"),i.appendChild(n);var o=document.getElementById(\"valo-inspector-scene\");null!==o&&o.appendChild(i)},t.prototype.displayMeshOptions=function(t){console.log(t.name);var e=document.getElementById(\"valo-inspector-object\");if(null!==e){e.innerHTML=\"\";var i=t.material,r=document.createElement(\"div\");if(i instanceof n.StandardMaterial){new o.KnobInput(e);var s=document.createElement(\"input\");s.type=\"range\",s.min=\"1\",s.max=\"100\",s.value=\"\"+Math.floor(100*i.diffuse.x),s.style.pointerEvents=\"auto\",s.oninput=function(){i.diffuse.x=.01*s.valueAsNumber};var a=document.createElement(\"input\");a.type=\"range\",a.min=\"1\",a.max=\"100\",a.value=\"\"+Math.floor(100*i.diffuse.y),a.style.pointerEvents=\"auto\",a.oninput=function(){i.diffuse.y=.01*a.valueAsNumber};var h=document.createElement(\"input\");h.type=\"range\",h.min=\"1\",h.max=\"100\",h.value=\"\"+Math.floor(100*i.diffuse.z),h.style.pointerEvents=\"auto\",h.oninput=function(){i.diffuse.z=.01*h.valueAsNumber},r.appendChild(s),r.appendChild(a),r.appendChild(h)}e.appendChild(r)}},t.prototype.resetScene=function(){this.nodes.forEach((function(t){var e=t.parentNode;null!==e&&e.removeChild(t)})),this.nodes=[]},t}();e.Inspector=s},344:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var i=function(){function t(t,e){this.parent=t,this.listener=e,this.min=0,this.max=100,this.value=50,this.size=30,this.width=2,this.color=\"rgb(0, 0, 255)\",this.create()}return t.prototype.setAttributesNS=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(e.length%2==0)for(var r=0;r<e.length;r+=2)t.setAttributeNS(null,e[r],e[r+1]);else console.log(\"Invalid length of args\")},t.prototype.create=function(){var t=document.createElement(\"div\");t.style.width=this.size+\"px\",t.style.height=this.size+\"px\",t.style.position=\"relative\";var e=document.createElementNS(\"http://www.w3.org/2000/svg\",\"svg\");this.setAttributesNS(e,\"width\",\"\"+this.size,\"height\",\"\"+this.size,\"viewBox\",\"0 0 \"+this.size+\" \"+this.size);var i=this.size/2-this.width/2,r=document.createElementNS(\"http://www.w3.org/2000/svg\",\"circle\");this.setAttributesNS(r,\"cx\",\"\"+this.size/2,\"cy\",\"\"+this.size/2,\"r\",\"\"+i,\"fill\",\"none\",\"stroke\",\"#e6e6e6\",\"stroke-width\",\"\"+this.width);var n=2*Math.PI*i,o=document.createElementNS(\"http://www.w3.org/2000/svg\",\"circle\");this.setAttributesNS(o,\"cx\",\"\"+this.size/2,\"cy\",\"\"+this.size/2,\"r\",\"\"+i,\"fill\",\"none\",\"stroke\",\"\"+this.color,\"stroke-width\",\"\"+this.width,\"stroke-dasharray\",\"calc(\"+this.value+\" * \"+n+\" / 100) \"+n,\"transform\",\"rotate(90) translate(0, -\"+this.size+\")\"),e.appendChild(r),e.appendChild(o);var s=document.createElement(\"p\");s.innerText=\"\"+this.value,s.style.margin=\"0px\",s.style.position=\"absolute\",s.style.top=\"50%\",s.style.left=\"50%\",s.style.transform=\"translateX(-50%) translateY(-50%)\",s.style.color=this.color,t.appendChild(e),t.appendChild(s),this.parent.appendChild(t)},t.prototype.update=function(){void 0!==this.listener&&this.listener(this.value)},t}();e.KnobInput=i},563:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(708),n=0,o=function(){function t(t,e){this.divID=void 0!==e?e:\"valo-div\"+n,this.canvasID=n,this.width=0,this.height=0,this.aspect=0,this.didAspectUpdate=!1,this.element=null,this.elementId=\"valo-canvas\"+n++,this.interactionManager=new r.InteractionManager(this),this.enableInteractions=!0,this.pixelRatio=window.devicePixelRatio/t,this.autoResize=!0,this._init()}return t.prototype._init=function(){var t=this.createCanvas();this.enableInteractions&&this.interactionManager._init(t),this.autoResize&&window.addEventListener(\"resize\",this.resize(this))},t.prototype.createCanvas=function(){this.autoResize&&this.adjustToTheParent();var t=document.createElement(\"canvas\");t.setAttribute(\"id\",this.elementId),t.width=this.width*this.pixelRatio,t.height=this.height*this.pixelRatio,this.element=t;var e=document.getElementById(this.divID);return null===e&&((e=document.createElement(\"div\")).style.width=window.innerWidth+\"px\",e.style.height=window.innerHeight+\"px\",document.body.appendChild(e)),e.style.overflow=\"hidden\",e.appendChild(t),this.addStyles(),t},t.prototype.addStyles=function(){var t=this.element;t?(t.style.width=this.width+\"px\",t.style.height=this.height+\"px;\",t.style.margin=\"0px\",t.style.position=\"absolute\",t.style.top=\"0px\",t.style.left=\"0px\",t.style.overflow=\"hidden\"):console.error(\"VALO.CanvasManager: addStyles() no canvas element assigned\")},t.prototype.adjustToTheParent=function(){if(this.divID){var t=document.getElementById(this.divID);if(!t)return;var e=t.getBoundingClientRect();this.width=e.width,this.height=e.height}else this.width=window.innerWidth,this.height=window.innerHeight;this.setAspect()},t.prototype.setAspect=function(){this.height>0&&(this.aspect=this.width/this.height,this.didAspectUpdate=!0)},t.prototype.resize=function(t){var e=this;return function(){t.adjustToTheParent();var i=e.element;i&&(i.width=t.width*t.pixelRatio,i.height=t.height*t.pixelRatio,i.style.width=t.width+\"px\",i.style.height=t.height+\"px\")}},t.prototype.destroy=function(){window.removeEventListener(\"resize\",this.resize(this));var t=this.element;t&&t.parentNode&&t.parentNode.removeChild(t)},t}();e.CanvasManager=o},708:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(601),n=function(){function t(t){var e=this;this._onPointerDown=function(t){var i=e.draggingInfo;i.x0=t.clientX,i.y0=t.clientY,i.x1=t.clientX,i.y1=t.clientY,e.isDragging=!0},this._onPointerUp=function(t){e.isDragging=!1},this._onPointerMove=function(t){if(e.isDragging){var i=e.draggingInfo;i.x0=i.x1,i.y0=i.y1,i.x1=t.clientX,i.y1=t.clientY,e.draggingInfoDidUpdate=!0}},this._onPointerLeave=function(t){e.isDragging=!1},this._onKeyDown=function(t){switch(t.which){case 38:case 87:t.preventDefault(),e.direction===r.DIRECTION.RIGHT?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.LEFT?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.DR?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.DL?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.UP);break;case 40:case 83:t.preventDefault(),e.direction===r.DIRECTION.RIGHT?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.LEFT?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.UR?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.DOWN);break;case 37:case 65:t.preventDefault(),e.direction===r.DIRECTION.UP?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.DOWN?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.UR?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.DR?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.LEFT);break;case 39:case 68:t.preventDefault(),e.direction===r.DIRECTION.UP?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.DOWN?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.DL?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.RIGHT)}},this._onKeyUp=function(t){switch(t.which){case 38:case 87:t.preventDefault(),e.direction===r.DIRECTION.UP?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.LEFT:e.direction===r.DIRECTION.UR&&(e.direction=r.DIRECTION.RIGHT);break;case 40:case 83:t.preventDefault(),e.direction===r.DIRECTION.DOWN?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.DL?e.direction=r.DIRECTION.LEFT:e.direction===r.DIRECTION.DR&&(e.direction=r.DIRECTION.RIGHT);break;case 37:case 65:t.preventDefault(),e.direction===r.DIRECTION.LEFT?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.UP:e.direction===r.DIRECTION.DL&&(e.direction=r.DIRECTION.DOWN);break;case 39:case 68:t.preventDefault(),e.direction===r.DIRECTION.RIGHT?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.UR?e.direction=r.DIRECTION.UP:e.direction===r.DIRECTION.DR&&(e.direction=r.DIRECTION.DOWN)}},this.canvas=t,this.direction=r.DIRECTION.NONE,this.isDragging=!1,this.draggingInfo={x0:0,y0:0,x1:0,y1:0},this.draggingInfoDidUpdate=!1}return t.prototype._init=function(t){document.onkeydown=this._onKeyDown,document.onkeyup=this._onKeyUp,t.onpointerdown=this._onPointerDown,t.onpointermove=this._onPointerMove,t.onpointerup=this._onPointerUp,t.onpointerleave=this._onPointerLeave},t.prototype.updateScene=function(t){t.activeCamera&&t.activeCamera.updateInteractions(this),this.draggingInfoDidUpdate=!1},t.prototype.destroy=function(){},t}();e.InteractionManager=n},479:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(236),s=i(337),a=function(t){function e(){var e=t.call(this)||this;return e.ambient=new o.Vector3(.2,.2,.2),e.diffuse=new o.Vector3(.5,.5,.5),e.specular=new o.Vector3(1,1,1),e.reverseDirection=new o.Vector3(0,1,0),e.type=\"directional\",s.Light.push(e),e}return n(e,t),e}(s.Light);e.DirectionalLight=a},337:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var i=function(){function t(){this.type=\"light\"}return t.push=function(e){t.cache.arr.push(e),t.cache.amount+=1},t}();e.Light=i,i.cache={amount:0,arr:[]}},234:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=function(t){function e(e,i,r,n){var o=t.call(this)||this;return o.color=[void 0!==e?e:1,void 0!==i?i:1,void 0!==r?r:1,void 0!==n?n:1],o.type=\"color\",o}return n(e,t),e}(i(520).Material);e.Color=o},520:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0});e.Material=function(){this.type=\"material\"}},905:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=function(t){function e(e){var i=t.call(this)||this;return i.color=e,i.type=\"naive\",i}return n(e,t),e}(i(520).Material);e.NaiveMaterial=o},253:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(520),s=i(236),a=function(t){function e(){var e=t.call(this)||this;return e.ambient=new s.Vector3(.0215,.1745,.0215),e.diffuse=new s.Vector3(.07568,.61424,.07568),e.specular=new s.Vector3(.633,.727811,.633),e.shininess=26,e.type=\"standard\",e}return n(e,t),e}(o.Material);e.StandardMaterial=a},861:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(236),n=new r.Vector3,o=[new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3],s=function(){function t(t,e){this.min=void 0!==t?t:new r.Vector3,this.max=void 0!==e?e:new r.Vector3}return t.prototype.set=function(t,e){return this.min.copy(t),this.max.copy(e),this},t.prototype.expandByPoint=function(t){return this.min.min(t),this.max.max(t),this},t.prototype.setFromPoints=function(t){var e=this;return t.forEach((function(t){e.expandByPoint(t)})),this},t.prototype.setFromPositions=function(t){for(var e=0;e<t.length;e+=3){var i=t[e],r=t[e+1],o=t[e+2];n.set(i,r,o),this.expandByPoint(n)}return this},t.prototype.intersectsPlane=function(t){var e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant},t.prototype.applyMatrix4=function(t){return o[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),o[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),o[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),o[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),o[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),o[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),o[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),o[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(o),this},t.prototype.copy=function(t){return this.min.copy(t.min),this.max.copy(t.max),this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Box=s},481:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(347),n=i(522),o=new r.Matrix4,s=function(){function t(t,e,i){this.x=void 0!==t?t:0,this.y=void 0!==e?e:0,this.z=void 0!==i?i:0,this.order=\"YXZ\"}return t.prototype.setFromRotationMatrix=function(t){var e=t.elements,i=e[0],r=e[4],o=e[8],s=e[1],a=e[5],h=e[9],c=e[2],u=e[6],l=e[10],p=this.order;return\"XYZ\"===p?(this.y=Math.asin(n.MathUtils.clamp(o,-1,1)),Math.abs(o)<.9999999?(this.x=Math.atan2(-h,l),this.z=Math.atan2(-r,i)):(this.x=Math.atan2(u,a),this.z=0)):\"YXZ\"===p?(this.x=Math.asin(-n.MathUtils.clamp(h,-1,1)),Math.abs(h)<.9999999?(this.y=Math.atan2(o,l),this.z=Math.atan2(s,a)):(this.y=Math.atan2(-c,i),this.z=0)):\"ZXY\"===p?(this.x=Math.asin(n.MathUtils.clamp(u,-1,1)),Math.abs(u)<.9999999?(this.y=Math.atan2(-c,l),this.z=Math.atan2(-r,a)):(this.y=0,this.z=Math.atan2(s,i))):\"ZYX\"===p?(this.y=Math.asin(-n.MathUtils.clamp(c,-1,1)),Math.abs(c)<.9999999?(this.x=Math.atan2(u,l),this.z=Math.atan2(s,i)):(this.x=0,this.z=Math.atan2(-r,a))):\"YZX\"===p?(this.z=Math.asin(n.MathUtils.clamp(s,-1,1)),Math.abs(s)<.9999999?(this.x=Math.atan2(-h,a),this.y=Math.atan2(-c,i)):(this.x=0,this.y=Math.atan2(o,l))):\"XZY\"===p&&(this.z=Math.asin(-n.MathUtils.clamp(r,-1,1)),Math.abs(r)<.9999999?(this.x=Math.atan2(u,a),this.y=Math.atan2(o,i)):(this.x=Math.atan2(-h,l),this.y=0)),this},t.prototype.setFromQuaternion=function(t){return o.setFromQuaternion(t),this.setFromRotationMatrix(o)},t.prototype.toQuaternion=function(t){var e=this.x,i=this.y,r=this.z,n=this.order,o=Math.cos(e/2),s=Math.cos(i/2),a=Math.cos(r/2),h=Math.sin(e/2),c=Math.sin(i/2),u=Math.sin(r/2);return\"XYZ\"===n?(t.x=h*s*a+o*c*u,t.y=o*c*a-h*s*u,t.z=o*s*u+h*c*a,t.w=o*s*a-h*c*u):\"YXZ\"===n?(t.x=h*s*a+o*c*u,t.y=o*c*a-h*s*u,t.z=o*s*u-h*c*a,t.w=o*s*a+h*c*u):\"ZXY\"===n?(t.x=h*s*a-o*c*u,t.y=o*c*a+h*s*u,t.z=o*s*u+h*c*a,t.w=o*s*a-h*c*u):\"ZYX\"===n?(t.x=h*s*a-o*c*u,t.y=o*c*a+h*s*u,t.z=o*s*u-h*c*a,t.w=o*s*a+h*c*u):\"YZX\"===n?(t.x=h*s*a+o*c*u,t.y=o*c*a+h*s*u,t.z=o*s*u-h*c*a,t.w=o*s*a-h*c*u):\"XZY\"===n&&(t.x=h*s*a-o*c*u,t.y=o*c*a-h*s*u,t.z=o*s*u+h*c*a,t.w=o*s*a+h*c*u),t},t.prototype.equals=function(t,e){var i=void 0!==e?e:0;return Math.abs(this.x-t.x)<i&&Math.abs(this.y-t.y)<i&&Math.abs(this.z-t.z)<i},t}();e.Euler=s},238:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(236),n=i(450),o=i(861),s=i(636),a=new o.Box,h=new r.Vector3,c=function(){function t(t,e,i,r,o,s){this.planes=[void 0!==t?t:new n.Plane,void 0!==e?e:new n.Plane,void 0!==i?i:new n.Plane,void 0!==r?r:new n.Plane,void 0!==o?o:new n.Plane,void 0!==s?s:new n.Plane]}return t.prototype.set=function(t,e,i,r,n,o){var s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(i),s[3].copy(r),s[4].copy(n),s[5].copy(o),this},t.prototype.setFromProjectionMatrix=function(t){var e=this.planes,i=t.elements,r=i[0],n=i[1],o=i[2],s=i[3],a=i[4],h=i[5],c=i[6],u=i[7],l=i[8],p=i[9],f=i[10],d=i[11],m=i[12],y=i[13],v=i[14],g=i[15];return e[0].setComponents(s-r,u-a,d-l,g-m).normalize(),e[1].setComponents(s+r,u+a,d+l,g+m).normalize(),e[2].setComponents(s+n,u+h,d+p,g+y).normalize(),e[3].setComponents(s-n,u-h,d-p,g-y).normalize(),e[4].setComponents(s-o,u-c,d-f,g-v).normalize(),e[5].setComponents(s+o,u+c,d+f,g+v).normalize(),this},t.prototype.containsPoint=function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0},t.prototype.intersectsBox=function(t){for(var e=this.planes,i=0;i<6;i++){var r=e[i];if(h.x=r.normal.x>0?t.max.x:t.min.x,h.y=r.normal.y>0?t.max.y:t.min.y,h.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(h)<0)return!1}return!0},t.prototype.intersectsObject=function(t){if(t instanceof s.Mesh){var e=t.worldMatrix;return a.copy(t.boundingBox.box).applyMatrix4(e),this.intersectsBox(a)}return this.containsPoint(t.position)},t.prototype.copy=function(t){var e=t.planes;return this.set(e[0],e[1],e[2],e[3],e[4],e[5]),this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Frustum=c},522:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var i=function(){function t(){}return t.distance=function(t,e,i,r){var n=i-t,o=r-e;return Math.sqrt(n*n-o-o)},t.index1From2D=function(t,e,i){return e*i+t},t.clamp=function(t,e,i){return Math.max(e,Math.min(t,i))},t}();e.MathUtils=i},347:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r,n=i(236),o=new n.Vector3,s=new n.Vector3,a=new n.Vector3,h=new n.Vector3(0,0,0),c=new n.Vector3(1,1,1),u=function(){function t(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}return t.prototype.set=function(t,e,i,r,n,o,s,a,h,c,u,l,p,f,d,m){var y=this.elements;return y[0]=t,y[1]=e,y[2]=i,y[3]=r,y[4]=n,y[5]=o,y[6]=s,y[7]=a,y[8]=h,y[9]=c,y[10]=u,y[11]=l,y[12]=p,y[13]=f,y[14]=d,y[15]=m,this},t.prototype.identity=function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},t.prototype.transponse=function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15]),this},t.prototype.multiply=function(t,e){var i=t.elements,r=e.elements,n=this.elements,o=i[0],s=i[4],a=i[8],h=i[12],c=i[1],u=i[5],l=i[9],p=i[13],f=i[2],d=i[6],m=i[10],y=i[14],v=i[3],g=i[7],x=i[11],_=i[15],w=r[0],b=r[4],I=r[8],R=r[12],A=r[1],O=r[5],E=r[9],T=r[13],P=r[2],U=r[6],M=r[10],C=r[14],D=r[3],L=r[7],N=r[11],z=r[15];return n[0]=o*w+s*A+a*P+h*D,n[4]=o*b+s*O+a*U+h*L,n[8]=o*I+s*E+a*M+h*N,n[12]=o*R+s*T+a*C+h*z,n[1]=c*w+u*A+l*P+p*D,n[5]=c*b+u*O+l*U+p*L,n[9]=c*I+u*E+l*M+p*N,n[13]=c*R+u*T+l*C+p*z,n[2]=f*w+d*A+m*P+y*D,n[6]=f*b+d*O+m*U+y*L,n[10]=f*I+d*E+m*M+y*N,n[14]=f*R+d*T+m*C+y*z,n[3]=v*w+g*A+x*P+_*D,n[7]=v*b+g*O+x*U+_*L,n[11]=v*I+g*E+x*M+_*N,n[15]=v*R+g*T+x*C+_*z,this},t.prototype.translate=function(t,e,i){return r.set(1,0,0,0,0,1,0,0,0,0,1,0,t,e,i,1),this.multiply(this,r)},t.prototype.xRotate=function(t){var e=Math.cos(t),i=Math.sin(t);return r.set(1,0,0,0,0,e,i,0,0,-i,e,0,0,0,0,1),this.multiply(this,r)},t.prototype.yRotate=function(t){var e=Math.cos(t),i=Math.sin(t);return r.set(e,0,-i,0,0,1,0,0,i,0,e,0,0,0,0,1),this.multiply(this,r)},t.prototype.zRotate=function(t){var e=Math.cos(t),i=Math.sin(t);return r.set(e,i,0,0,-i,e,0,0,0,0,1,0,0,0,0,1),this.multiply(this,r)},t.prototype.scale=function(t,e,i){return r.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this.multiply(this,r)},t.prototype.inverse=function(t){var e=this.elements,i=t.elements,r=i[0],n=i[1],o=i[2],s=i[3],a=i[4],h=i[5],c=i[6],u=i[7],l=i[8],p=i[9],f=i[10],d=i[11],m=i[12],y=i[13],v=i[14],g=i[15],x=p*v*u-y*f*u+y*c*d-h*v*d-p*c*g+h*f*g,_=m*f*u-l*v*u-m*c*d+a*v*d+l*c*g-a*f*g,w=l*y*u-m*p*u+m*h*d-a*y*d-l*h*g+a*p*g,b=m*p*c-l*y*c-m*h*f+a*y*f+l*h*v-a*p*v,I=r*x+n*_+o*w+s*b;if(0===I)return console.log(\"Matrix4: .inverse() can't invert matrix, determinant is 0\"),this.identity();var R=1/I;return e[0]=x*R,e[1]=(y*f*s-p*v*s-y*o*d+n*v*d+p*o*g-n*f*g)*R,e[2]=(h*v*s-y*c*s+y*o*u-n*v*u-h*o*g+n*c*g)*R,e[3]=(p*c*s-h*f*s-p*o*u+n*f*u+h*o*d-n*c*d)*R,e[4]=_*R,e[5]=(l*v*s-m*f*s+m*o*d-r*v*d-l*o*g+r*f*g)*R,e[6]=(m*c*s-a*v*s-m*o*u+r*v*u+a*o*g-r*c*g)*R,e[7]=(a*f*s-l*c*s+l*o*u-r*f*u-a*o*d+r*c*d)*R,e[8]=w*R,e[9]=(m*p*s-l*y*s-m*n*d+r*y*d+l*n*g-r*p*g)*R,e[10]=(a*y*s-m*h*s+m*n*u-r*y*u-a*n*g+r*h*g)*R,e[11]=(l*h*s-a*p*s-l*n*u+r*p*u+a*n*d-r*h*d)*R,e[12]=b*R,e[13]=(l*y*o-m*p*o+m*n*f-r*y*f-l*n*v+r*p*v)*R,e[14]=(m*h*o-a*y*o-m*n*c+r*y*c+a*n*v-r*h*v)*R,e[15]=(a*p*o-l*h*o+l*n*c-r*p*c-a*n*f+r*h*f)*R,this},t.prototype.compose=function(t,e,i){var r=this.elements,n=e.x,o=e.y,s=e.z,a=e.w,h=n+n,c=o+o,u=s+s,l=n*h,p=n*c,f=n*u,d=o*c,m=o*u,y=s*u,v=a*h,g=a*c,x=a*u,_=i.x,w=i.y,b=i.z;return r[0]=(1-(d+y))*_,r[1]=(p+x)*_,r[2]=(f-g)*_,r[3]=0,r[4]=(p-x)*w,r[5]=(1-(l+y))*w,r[6]=(m+v)*w,r[7]=0,r[8]=(f+g)*b,r[9]=(m-v)*b,r[10]=(1-(l+d))*b,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this},t.prototype.setFromQuaternion=function(t){return this.compose(h,t,c)},t.prototype.lookAt=function(t,e,i){var r=o.copy(t),n=s.copy(i),h=r.subtract(e).normalize(),c=n.cross(h).normalize(),u=a.copy(h).cross(c).normalize();return this.set(c.x,c.y,c.z,0,u.x,u.y,u.z,0,h.x,h.y,h.z,0,t.x,t.y,t.z,1),this},t.prototype.setPerspective=function(t,e,i,r){var n=t*Math.PI/180,o=Math.tan(.5*Math.PI-.5*n),s=1/(i-r);return this.set(o/e,0,0,0,0,o,0,0,0,0,(i+r)*s,-1,0,0,2*i*r*s,0)},t.prototype.setOrthographic=function(t,e,i,r,n,o){return this.set(2/(e-t),0,0,0,0,2/(r-i),0,0,0,0,2/(n-o),0,(t+e)/(t-e),(i+r)/(i-r),(n+o)/(n-o),1)},t.prototype.copy=function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Matrix4=u,r=new u},450:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(236),n=function(){function t(t,e){this.normal=t||new r.Vector3(1,0,0),this.constant=e||0}return t.prototype.set=function(t,e){return this.normal.copy(t),this.constant=e,this},t.prototype.setComponents=function(t,e,i,r){return this.normal.set(t,e,i),this.constant=r,this},t.prototype.normalize=function(){var t=1/this.normal.mag();return this.normal.multiply(t),this.constant*=t,this},t.prototype.negate=function(){return this.normal.multiply(-1),this.constant*=-1,this},t.prototype.distanceToPoint=function(t){return this.normal.dot(t)+this.constant},t.prototype.intersectsBox=function(t){return t.intersectsPlane(this)},t.prototype.copy=function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},t.prototype.clone=function(){return new t(this.normal.clone(),this.constant)},t}();e.Plane=n},517:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(522),n=function(){function t(t,e,i,r){this.x=t||0,this.y=e||0,this.z=i||0,this.w=r||1}return t.prototype.conjugate=function(t){return this.x*=-t.x,this.y*=-t.y,this.z*=-t.z,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w+this.w)},t.prototype.normalize=function(){var t=this.length();return 0===t?(this.x=0,this.y=0,this.z=0,this.w=1):(t=1/t,this.x=this.x*t,this.y=this.y*t,this.z=this.z*t,this.w=this.w*t),this},t.prototype.setFromAxisAngle=function(t,e){t.normalize();var i=e/2,r=Math.sin(i);return this.x=t.x*r,this.y=t.y*r,this.z=t.z*r,this.w=Math.cos(i),this},t.prototype.setFromEuler=function(t){return t.toQuaternion(this),this},t.prototype.angleTo=function(t){return 2*Math.acos(Math.abs(r.MathUtils.clamp(this.dot(t),-1,1)))},t.prototype.multiply=function(t,e){var i=t.x,r=t.y,n=t.z,o=t.w,s=e.x,a=e.y,h=e.z,c=e.w;return this.x=i*c+o*s+r*h-n*a,this.y=r*c+o*a+n*s-i*h,this.z=n*c+o*h+i*a-r*s,this.w=o*c-i*s-r*a-n*h,this},t.prototype.slerp=function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var i=this.x,r=this.y,n=this.z,o=this.w,s=o*t.w+i*t.x+r*t.y+n*t.z;if(s<0?(this.x=-t.x,this.y=-t.y,this.z=-t.z,this.w=-t.w,s=-s):this.copy(t),s>=1)return this.w=o,this.x=i,this.y=r,this.z=n,this;var a=1-s*s;if(a<=Number.EPSILON){var h=1-e;return this.w=h*o+e*this.w,this.x=h*i+e*this.x,this.y=h*r+e*this.y,this.z=h*n+e*this.z,this.normalize(),this}var c=Math.sqrt(a),u=Math.atan2(c,s),l=Math.sin((1-e)*u)/c,p=Math.sin(e*u)/c;return this.w=o*l+this.w*p,this.x=i*l+this.x*p,this.y=r*l+this.y*p,this.z=n*l+this.z*p,this},t.prototype.rotateTowards=function(t,e){var i=this.angleTo(t);if(0===i)return this;var r=Math.min(1,e/i);return this.slerp(t,r),this},t.prototype.equals=function(t,e){var i=void 0!==e?e:0;return i<0&&(i*=-1),Math.abs(this.x-t.x)<i&&Math.abs(this.y-t.y)<i&&Math.abs(this.z-t.z)<i&&Math.abs(this.w-t.w)<i},t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.z,this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Quaternion=n},236:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=new(i(517).Quaternion),n=function(){function t(t,e,i){this.x=void 0!==t?t:0,this.y=void 0!==e?e:0,this.z=void 0!==i?i:0}return t.prototype.set=function(t,e,i){return this.x=t,this.y=e,this.z=i,this},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this},t.prototype.divide=function(t){return 0===t&&console.warn(\"Vector3: divide(), Can't divide with a zero.\"),this.x/=t,this.y/=t,this.z/=t,this},t.prototype.inverse=function(t){return this.x=-t.x,this.y=-t.y,this.z=-t.z,this},t.prototype.min=function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},t.prototype.max=function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this.z*=t,this},t.prototype.magSq=function(){var t=this.x,e=this.y,i=this.z;return t*t+e*e+i*i},t.prototype.mag=function(){return Math.sqrt(this.magSq())},t.prototype.normalize=function(){return this.divide(this.mag())},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},t.prototype.cross=function(t,e){var i=this.y*t.z-this.z*t.y,r=this.z*t.x-this.x*t.z,n=this.x*t.y-this.y*t.x;return void 0!==e?e.set(i,r,n):this.set(i,r,n)},t.prototype.applyQuaternion=function(t){var e=this.x,i=this.y,r=this.z,n=t.x,o=t.y,s=t.z,a=t.w,h=a*e+o*r-s*i,c=a*i+s*e-n*r,u=a*r+n*i-o*e,l=-n*e-o*i-s*r;return this.x=h*a+l*-n+c*-s-u*-o,this.y=c*a+l*-o+u*-n-h*-s,this.z=u*a+l*-s+h*-o-c*-n,this},t.prototype.applyAxisAngle=function(t,e){return this.applyQuaternion(r.setFromAxisAngle(t,e))},t.prototype.applyMatrix4=function(t){var e=this.x,i=this.y,r=this.z,n=t.elements,o=1/(n[3]*e+n[7]*i+n[11]*r+n[15]);return this.x=(n[0]*e+n[4]*i+n[8]*r+n[12])*o,this.y=(n[1]*e+n[5]*i+n[9]*r+n[13])*o,this.z=(n[2]*e+n[6]*i+n[10]*r+n[14])*o,this},t.prototype.equals=function(t,e){var i=void 0!==e?e:0;return Math.abs(this.x-t.x)<i&&Math.abs(this.y-t.y)<i&&Math.abs(this.z-t.z)<i},t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Vector3=n},566:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(861),n=function(){function t(t){this.mesh=t,this.box=new r.Box,this.positionsNeedsUpdate=!0}return t.prototype.uptadePositions=function(){var t=this.mesh.geometry.getPositions();this.box.setFromPositions(t),this.positionsNeedsUpdate=!1},t}();e.BoundingBox=n},636:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,\"__esModule\",{value:!0});var o=i(319),s=i(566),a=function(t){function e(e,i){var r=t.call(this)||this;return r.geometry=e,r.material=i,r.boundingBox=new s.BoundingBox(r),r.children=[],r._renderItem,r}return n(e,t),e.prototype.addChild=function(t){this.children.every((function(e){return t.id!==e.id}))&&this.children.push(t)},e.prototype.clone=function(){var t=new e(this.geometry,this.material);return t._clonedFrom=this,t},e.prototype._onRotationChangeCallback=function(){this.worldMatrixNeedsUpdate=!0},e}(o.Object3D);e.Mesh=a},319:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(236),n=i(517),o=i(481),s=i(347),a=0,h=new n.Quaternion,c=new r.Vector3,u=new r.Vector3(0,0,-1),l=new r.Vector3(1,0,0),p=new r.Vector3(0,1,0),f=new r.Vector3(0,0,1),d=function(){function t(){this.name=\"Object no. \"+a,this.id=a++,this.position=new r.Vector3(0,0,0),this.rotation=new o.Euler(0,0,0),this.quaternion=new n.Quaternion(0,0,0,1),this.scale=new r.Vector3(1,1,1),this.worldMatrix=new s.Matrix4,this.isObject3D=!0,this.worldMatrixNeedsUpdate=!0,this.isInFrustum=!1,this.isMesh=!1,this.isCamera=!1}return t.prototype.updateWorldMatrix=function(){var t=this.worldMatrix,e=this.position,i=this.scale;this.quaternion.setFromEuler(this.rotation),t.compose(e,this.quaternion,i),this.worldMatrixNeedsUpdate=!1},t.prototype.applyQuaternion=function(t){return this.quaternion.multiply(this.quaternion,t),this},t.prototype.translateX=function(t){return this.position.x+=t,this},t.prototype.translateY=function(t){return this.position.y+=t,this},t.prototype.translateZ=function(t){return this.position.z+=t,this},t.prototype.translate=function(t){return this.position.add(t),this._onPositionChangeCallBack(),this},t.prototype.applyScale=function(t){return this.scale.multiply(t),this._onRotationChangeCallback(),this},t.prototype.getDirection=function(){return c.copy(u).applyQuaternion(this.quaternion)},t.prototype.rotateOnAxis=function(t,e){return h.setFromAxisAngle(t,e),this.quaternion.multiply(h,this.quaternion),this._onRotationChangeCallback(),this},t.prototype.rotateX=function(t){this.rotation.x+=t,this.rotateOnAxis(l,t),this._onRotationChangeCallback()},t.prototype.rotateY=function(t){this.rotation.y+=t,this.rotateOnAxis(p,t),this._onRotationChangeCallback()},t.prototype.rotateZ=function(t){this.rotation.z+=t,this.rotateOnAxis(f,t),this._onRotationChangeCallback()},t.prototype.rotate=function(t){var e=t.x,i=t.y,r=t.z;0!==e&&this.rotateX(t.x),0!==i&&this.rotateY(t.y),0!==r&&this.rotateZ(t.z)},t.prototype.checkIfUpdateWorldMatrix=function(){this.worldMatrixNeedsUpdate&&this.updateWorldMatrix()},t.prototype.checkIsInFrustum=function(t){var e=t.viewFrustum.intersectsObject(this);this.isInFrustum=e},t.prototype._onPositionChangeCallBack=function(){this.worldMatrixNeedsUpdate=!0},t.prototype._onRotationChangeCallback=function(){this.worldMatrixNeedsUpdate=!0},t.prototype._onScaleChangeCallback=function(){this.worldMatrixNeedsUpdate=!0},t.prototype.destroy=function(){},t}();e.Object3D=d},434:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(563),n=i(41),o=i(487),s=i(825),a=i(196),h=i(103),c=i(347),u=i(253),l=i(486),p=i(14),f=i(337),d=i(234),m=new c.Matrix4,y=[37,37,37,255].map((function(t){return t/255})),v=function(){function t(t){this.canvas,this.inspector=t&&t.inspector?new n.Inspector:void 0,this.gl,this.programManager=new o.ProgramManager(this),this.readyForRendering=!1,this.stopRenderLoopGiven=!1,this.clearBeforeRender=!(!t||!t.clearBeforeRender)&&t.clearBeforeRender,this.antialias=!t||!t.antialiazing||t.antialiazing,this.pixelRatio=t&&t.pixelRatio?t.pixelRatio:1,this.previousTime=0}return t.prototype.attachTo=function(t){var e=new r.CanvasManager(this.pixelRatio,t);void 0!==this.inspector&&this.inspector._init(e);var i={alpha:!0,antialias:this.antialias,premultipliedAlpha:!1,preserveDrawingBuffer:!1},n=s.WebGLUtils.getWebGLObject(e.element,i);return n?n instanceof WebGL2RenderingContext&&(s.WebGLUtils.setupGL(n),l.UBO.create(n,\"Transform\",0,[new p.Uniform(\"world\",\"mat4\"),new p.Uniform(\"worldViewProjection\",\"mat4\"),new p.Uniform(\"worldInverseTranspose\",\"mat4\")]),l.UBO.create(n,\"Material\",1,[new p.Uniform(\"matAmbient\",\"vec3\"),new p.Uniform(\"matDiffuse\",\"vec3\"),new p.Uniform(\"matSpecular\",\"vec4\")]),l.UBO.create(n,\"Light\",2,[new p.Uniform(\"lightAmbient\",\"vec3\"),new p.Uniform(\"lightDiffuse\",\"vec3\"),new p.Uniform(\"lightSpecular\",\"vec3\")]),this.canvas=e,this.gl=n,!0):(console.error(\"Error in WebGLRenderer.attachTo()\"),e.destroy(),!1)},t.prototype.render=function(t){var e=this,i=this.canvas;if(void 0!==i){i.interactionManager.updateScene(t),i.didAspectUpdate&&(t.setAspectToActiveCamera(i.aspect),i.didAspectUpdate=!1),t.onBeforeRender(),void 0!==this.inspector&&this.inspector.sceneUpdate(t);var r=this.gl;if(r){r.viewport(0,0,r.canvas.width,r.canvas.height);var n=y;r.clearColor(n[0],n[1],n[2],n[3]),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),a.RenderList.checkIfUpdate(r,this.programManager,t),t.buffersNeedUpdate&&t.renderLists.forEach((function(t){t.items.forEach((function(t){var e=t.geometry;e.setBuffers(r),e.bindBuffers(r,t.program)}))})),t.renderLists.forEach((function(i){r.useProgram(i.program.WebGLProgram),l.UBO.cache.Transform.update(\"worldViewProjection\",t.viewProjectionMatrix.elements),i.items.forEach((function(i){i.mesh.isInFrustum&&e.renderItem(r,i,t)})),i.program.unBindVAO(r),r.useProgram(null)})),void 0!==t.helperManager&&this.renderHelpers(r,t,t.helperManager),t.onAfterRender()}else console.error(\"VALO.WebGLRenderer: gl object is \"+r)}},t.prototype.renderItem=function(t,e,i){var r=e.mesh,n=e.geometry,o=e.material,s=e.program;if(null!==i.activeCamera){var a=l.UBO.cache.Transform;if(a.update(\"world\",r.worldMatrix.elements),o instanceof d.Color)s.preRender(\"u_color\",o.color);else if(o instanceof u.StandardMaterial){m.inverse(r.worldMatrix),m.transponse(m),a.update(\"worldInverseTranspose\",m.elements);var c=l.UBO.cache.Material;if(c.update(\"matAmbient\",o.ambient),c.update(\"matDiffuse\",o.diffuse),c.update(\"matSpecular\",[o.specular.x,o.specular.y,o.specular.z,o.shininess]),1===f.Light.cache.amount){var p=f.Light.cache.arr[0],y=l.UBO.cache.Light;y.update(\"lightAmbient\",p.ambient),y.update(\"lightDiffuse\",p.diffuse),y.update(\"lightSpecular\",p.specular),s.preRender(\"u_reverseLightDirection\",p.reverseDirection)}s.preRender(\"u_viewPosition\",i.activeCamera.position)}var v=t.TRIANGLES,g=n.attributes[h.ATTRIBUTE_LOCATION.INDICES];s.bindVAO(t,n);var x=0;g.array?(x=g.array.length,t.drawElements(v,x,t.UNSIGNED_SHORT,0)):(x=n.amountOfVertices,t.drawArrays(v,0,x))}},t.prototype.renderHelpers=function(t,e,i){var r=i.boxes;if(null!==r){this.programManager.setHelperBoxProgram(t);var n=this.programManager.helperBoxProgram;if(!n)return void console.error(\"VALO.WebGLRenderer: renderBoundingBox() no program created succesfully\");r.forEach((function(i){var r=i.geometry;i.geometry.hasPositions||i.setGeometry(),r.isBuffersSet||(r.setBuffers(t),r.bindBuffers(t,n)),t.useProgram(n.WebGLProgram);var o=i.geometry.vao;if(o){l.UBO.cache.Transform.update(\"worldViewProjection\",e.viewProjectionMatrix.elements);var s=r.attributes[h.ATTRIBUTE_LOCATION.INDICES];t.bindVertexArray(o),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,s.buffer),t.drawElements(t.LINES,24,t.UNSIGNED_SHORT,0)}else console.error(\"BoundingBox has no VerexArrayObject\")}))}},t.prototype.runRenderLoop=function(t){var e=this;window.requestAnimationFrame((function(){t(),e.stopRenderLoopGiven||e.runRenderLoop(t)}))},t.prototype.destroy=function(){},t}();e.WebGLRenderer=v},40:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(486),n=i(103),o=i(236),s=function(){function t(t,e,i){this.gl=t,this.WebGLProgram=e,this.uniforms={},this.A_POSITION=-1,this.A_NORMAL=-1,this.targetMaterial=i,this._bindedGeometryId=-1}return t.prototype.bindVAO=function(t,e){if(e.id!==this._bindedGeometryId){var i=e.attributes,r=e.vao,o=i[n.ATTRIBUTE_LOCATION.INDICES];r?(t.bindVertexArray(r),o.array&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,o.buffer),this._bindedGeometryId=e.id):console.error(\"VALO.Mesh: renderItem() has no VerexArrayObject\")}},t.prototype.unBindVAO=function(t){t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindVertexArray(null),this._bindedGeometryId=-1},t.prototype.prepareUniforms=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(t.length%2==0)for(var i=this.gl,r=this.WebGLProgram,n=0,o=0;o<t.length;o+=2)null!==(n=i.getUniformLocation(r,t[o]))&&(this.uniforms[t[o]]={location:n,type:t[o+1]});else console.error(\"Invalid lenght of arguments\")},t.prototype.prepareUniformBlocks=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(t.length%2==0)for(var i=this.gl,n=this.WebGLProgram,o=0;o<t.length;o+=2){var s=t[o+1],a=t[o];\"number\"==typeof s&&a instanceof r.UBO&&i.uniformBlockBinding(n,s,a.blockPoint)}else console.error(\"Invalid lenght of arguments\")},t.prototype.setUniforms=function(t){if(t.length%2!=0)return console.error(\"Invalid lenght of arguments\"),this;for(var e,i=\"\",r=0;r<t.length;r+=2){var n=t[r],s=t[r+1];if(\"string\"==typeof n&&(i=n),s instanceof Array?e=s:s instanceof o.Vector3&&(e=[s.x,s.y,s.z]),void 0===this.uniforms[i]||void 0===e)return console.log(\"uniform not found \"+i),this;switch(this.uniforms[i].type){case\"vec2\":this.gl.uniform2fv(this.uniforms[i].location,new Float32Array);break;case\"vec3\":this.gl.uniform3fv(this.uniforms[i].location,new Float32Array(e));break;case\"vec4\":this.gl.uniform4fv(this.uniforms[i].location,new Float32Array(e));break;case\"mat4\":this.gl.uniformMatrix4fv(this.uniforms[i].location,!1,e);break;default:console.log(\"unknown uniform type for \"+i)}}return this},t.prototype.preRender=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length>0&&this.setUniforms(t),this},t.prototype.setAttribLocations=function(t,e){var i=this.WebGLProgram,r=t.getAttribLocation(i,\"a_position\");if(this.A_POSITION=r,e){var n=t.getAttribLocation(i,\"a_normal\");this.A_NORMAL=n}},t.prototype.destroy=function(){this.gl.getParameter(this.gl.CURRENT_PROGRAM)===this.WebGLProgram&&this.gl.useProgram(null),this.gl.deleteProgram(this.WebGLProgram)},t}();e.Program=s},487:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(40),n=i(825),o=i(905),s=i(253),a=i(486),h=i(234),c=function(){function t(t){this.renderer=t,this.programs=[],this.helperBoxProgram=null}return t.prototype.programAndMeshMatches=function(t,e){return e.geometry?t.targetMaterial===e.material.type:(console.error(\"Mesh doesn't have geometry\"),!1)},t.prototype.createProgramForMesh=function(t){var e=null,i=this.renderer.gl;if(i){var c,u,l=t.geometry.hasNormals;if(t.material instanceof h.Color?(c=[\"#version 300 es\",\"precision mediump float;\",\"in vec4 a_position;\",\"uniform Transform{\",\"mat4 world;\",\"mat4 worldViewProjection;\",\"};\",\"void main() {\",\"gl_Position = worldViewProjection * world * a_position;\",\"}\"].join(\"\\n\"),u=[\"#version 300 es\",\"precision mediump float;\",\"uniform vec4 u_color;\",\"out vec4 outColor;\",\"void main() {\",\"outColor = u_color;\",\"}\"].join(\"\\n\")):t.material instanceof o.NaiveMaterial?(c=[\"#version 300 es\",\"precision mediump float;\",\"in vec4 a_position;\",l?\"in vec3 a_normal;\":\"\",l?\"out vec3 v_normal;\":\"\",\"uniform Transform{\",\"mat4 world;\",\"mat4 worldViewProjection;\",\"};\",\"void main() {\",\"gl_Position = worldViewProjection * world * a_position;\",l?\"v_normal = mat3(u_world) * a_normal;\":\"\",\"}\"].join(\"\\n\"),u=[\"#version 300 es\",\"precision mediump float;\",l?\"in vec3 v_normal;\":\"\",l?\"uniform vec3 u_reverseLightDirection;\":\"\",\"uniform vec4 u_color;\",\"out vec4 outColor;\",\"void main() {\",l?\"vec3 normal = normalize(v_normal);\":\"\",l?\"float light = dot(normal, u_reverseLightDirection);\":\"\",\"outColor = u_color;\",l?\"outColor.rgb *= light;\":\"\",\"}\"].join(\"\\n\")):t.material instanceof s.StandardMaterial&&l&&(c=[\"#version 300 es\",\"precision mediump float;\",\"in vec4 a_position;\",\"in vec3 a_normal;\",\"uniform Transform{\",\"mat4 world;\",\"mat4 worldViewProjection;\",\"mat4 worldInverseTranspose;\",\"};\",\"uniform vec3 u_reverseLightDirection;\",\"uniform vec3 u_viewPosition;\",\"out vec3 v_surfaceToLight;\",\"out vec3 v_surfaceToView;\",\"out vec3 v_normal;\",\"void main() {\",\"vec3 surfaceWorldPosition = (world * a_position).xyz;\",\"v_surfaceToLight = u_reverseLightDirection;\",\"v_surfaceToView = u_viewPosition - surfaceWorldPosition;\",\"v_normal = mat3(worldInverseTranspose) * a_normal;\",\"gl_Position = worldViewProjection * world * a_position;\",\"}\"].join(\"\\n\"),u=[\"#version 300 es\",\"precision mediump float;\",\"in vec3 v_normal;\",\"in vec3 v_surfaceToLight;\",\"in vec3 v_surfaceToView;\",\"uniform Material {\",\"vec3 matAmbient;\",\"vec3 matDiffuse;\",\"vec4 matSpecular;\",\"};\",\"uniform Light {\",\"vec3 lightAmbient;\",\"vec3 lightDiffuse;\",\"vec3 lightSpecular;\",\"};\",\"out vec4 outColor;\",\"void main() {\",\"vec3 normal = normalize(v_normal);\",\"vec3 viewDir = normalize(v_surfaceToView);\",\"vec3 lightDir = normalize(v_surfaceToLight);\",\"vec3 ambient = lightAmbient * matAmbient;\",\"float diff = max(dot(normal, lightDir), 0.0);\",\"vec3 diffuse = lightDiffuse * (diff * matDiffuse);\",\"float shininess = matSpecular.w;\",\"vec3 reflectDir = reflect(-lightDir, normal);\",\"float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);\",\"vec3 specular = lightSpecular * (spec * matSpecular.xyz);\",\"vec3 result = ambient + diffuse + specular;\",\"outColor = vec4(result, 1.0) * 1.5;\",\"}\"].join(\"\\n\")),void 0!==c&&void 0!==u){var p=n.WebGLUtils.createShaderProgramFromScripts(i,c,u);if(p)return(e=new r.Program(i,p,t.material.type)).prepareUniformBlocks(a.UBO.cache.Transform,0),t.material instanceof h.Color?(e.setAttribLocations(i,!1),e.prepareUniforms(\"u_color\",\"vec4\")):t.material instanceof s.StandardMaterial&&(e.setAttribLocations(i,!0),e.prepareUniformBlocks(a.UBO.cache.Material,1,a.UBO.cache.Light,2),e.prepareUniforms(\"u_reverseLightDirection\",\"vec3\",\"u_viewPosition\",\"vec3\")),this.programs.push(e),e;console.error(\"ProgramManger.figureProgram();\")}else console.error(\"Incorrect material type OR normals missing\")}},t.prototype.setHelperBoxProgram=function(t){if(!this.helperBoxProgram){var e=[\"#version 300 es\",\"in vec4 a_position;\",\"uniform Transform{\",\"mat4 world;\",\"mat4 worldViewProjection;\",\"mat4 worldInverseTranspose;\",\"};\",\"void main() {\",\"gl_Position = worldViewProjection * a_position;\",\"}\"].join(\"\\n\"),i=[\"#version 300 es\",\"precision mediump float;\",\"out vec4 outColor;\",\"void main() {\",\"outColor = vec4(\"+[.5,.5,.5,1].join(\", \")+\");\",\"}\"].join(\"\\n\"),o=n.WebGLUtils.createShaderProgramFromScripts(t,e,i);if(o){var s=new r.Program(t,o,\"helper\");s.setAttribLocations(t,!1),s.prepareUniforms(\"u_worldViewProjection\",\"mat4\"),this.helperBoxProgram=s}else console.error(\"ProgramManger.figureProgram();\")}},t}();e.ProgramManager=c},196:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var i=function(){function t(t){this.program=t,this.items=[]}return t.prototype.push=function(t){var e={id:t.id,mesh:t,material:t.material,geometry:t.geometry,program:this.program};t._renderItem=e,this.items.push(e)},t.checkIfUpdate=function(e,i,r){if(r.meshListDidUpdate){var n=[];r.meshes.forEach((function(t){void 0===t._renderItem&&n.push(t)})),n.forEach((function(e){var n=r.renderLists.find((function(t){return t.program.targetMaterial==e.material.type}));if(void 0!==n)n.push(e);else{var o=i.createProgramForMesh(e);if(!o)return void console.error(\"VALO.RenderList: checkIfUpdate() program was not complied correctly\");var s=new t(o);s.push(e),r.renderLists.push(s)}}))}},t.prototype.delete=function(t){console.log(\"tried to delete object\",t)},t.prototype.destroy=function(){},t}();e.RenderList=i},486:function(t,e){var i=this&&this.__spreadArrays||function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var r=Array(t),n=0;for(e=0;e<i;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,n++)r[n]=o[s];return r};Object.defineProperty(e,\"__esModule\",{value:!0});var r=function(){function t(t,e,i,r,n){this.items={},this.keys=[];for(var o=0;o<n.length;o++)this.items[n[o].name]=n[o],this.keys[o]=n[o].name;this.gl=t,this.name=e,this.blockPoint=i,this.buffer=t.createBuffer(),t.bindBuffer(t.UNIFORM_BUFFER,this.buffer),t.bufferData(t.UNIFORM_BUFFER,r,t.DYNAMIC_DRAW),t.bindBuffer(t.UNIFORM_BUFFER,null),t.bindBufferBase(t.UNIFORM_BUFFER,i,this.buffer)}return t.prototype.update=function(t,e){var i=this.items[t],r=i.updateAry(e),n=i.offset;return this.gl.bindBuffer(this.gl.UNIFORM_BUFFER,this.buffer),this.gl.bufferSubData(this.gl.UNIFORM_BUFFER,n,r,0),this.gl.bindBuffer(this.gl.UNIFORM_BUFFER,null),this},t.create=function(e,r,n,o){var s=i(o),a=t.calculate(s);t.cache[r]=new t(e,r,n,a,s)},t.getSize=function(t){switch(t){case\"mat4\":return 64;case\"mat3\":return 48;case\"vec2\":return 8;case\"f\":case\"i\":case\"b\":return 4;case\"vec3\":case\"vec4\":return 16;default:return 0}},t.calculate=function(e){for(var i=16,r=0,n=0,o=0,s=0;s<e.length;s++)(r=i-(o=e[s].arylen&&0!=e[s].arylen?16*e[s].arylen:t.getSize(e[s].type)))<0&&i<16?(n+=i,s>0&&(e[s-1].chunkLen+=i),i=16):r<0&&16==i||(0==r?i=16:i-=o),e[s].offset=n,e[s].chunkLen=o,e[s].dataLen=o,n+=o;return n%16!=0&&(e[e.length-1].chunkLen+=i,n+=i),n},t}();e.UBO=r,r.cache={}},14:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(236),n=function(){function t(e,i){this.name=e,this.type=i,this.offset=0,this.dataLen=0,this.chunkLen=0,this.arylen=0,this.arr=new Float32Array(t.getSize(i)).fill(0)}return t.prototype.updateAry=function(t){if(t instanceof r.Vector3)this.arr[0]=t.x,this.arr[1]=t.y,this.arr[2]=t.z;else if(Array.isArray(t))for(var e=0;e<t.length;e++)this.arr[e]=t[e];else this.arr[0]=t;return this.arr},t.getSize=function(t){switch(t){case\"mat4\":case\"mat3\":return 16;case\"vec2\":return 2;case\"f\":case\"i\":case\"b\":return 1;case\"vec3\":case\"vec4\":return 4;default:return 0}},t}();e.Uniform=n},825:(t,e)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var i=[1,1,1,1],r=function(){function t(){}return t.setupGL=function(t,e){var r=e||i,n=r[3];t.clearColor(r[0],r[1],r[2],n),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.enable(t.DEPTH_TEST),t.enable(t.CULL_FACE),t.cullFace(t.FRONT)},t.getRenderingContext=function(){if(window.WebGL2RenderingContext)return\"webgl2\";if(window.WebGLRenderingContext)return\"webgl\";var t=document.createElement(\"canvas\");try{if(t.getContext(\"experimental-webgl\"))return\"experimental-webgl\"}catch(t){console.log(t),window.alert(\"Your browser does not support WegGL!\\nPlease use Chrome or Firefox if you want to see all the features.\")}return\"\"},t.getWebGLObject=function(e,i){var r,n=t.getRenderingContext();return\"\"===n?null:(e&&(r=e.getContext(n,i)),r instanceof WebGL2RenderingContext||r instanceof WebGLRenderingContext?r:null)},t.createShaderProgramFromScripts=function(t,e,i){var r=t.createShader(t.VERTEX_SHADER);if(!r)return null;t.shaderSource(r,e);var n=t.createShader(t.FRAGMENT_SHADER);if(!n)return null;if(t.shaderSource(n,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))return console.error(\"ERROR compiling vertex shader!\",t.getShaderInfoLog(r)),null;if(t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))return console.error(\"ERROR compiling fragment shader!\",t.getShaderInfoLog(n)),null;var o=t.createProgram();return o?(t.attachShader(o,r),t.attachShader(o,n),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||console.error(\"ERROR linking program!\",t.getProgramInfoLog(o)),o):null},t}();e.WebGLUtils=r},595:(t,e,i)=>{Object.defineProperty(e,\"__esModule\",{value:!0});var r=i(347),n=i(707),o=i(238),s=i(636),a=0,h=function(){function t(){this.id=a++,this.meshes=[],this.cameras=[],this.activeCamera=null,this.viewProjectionMatrix=new r.Matrix4,this.viewFrustum=new o.Frustum,this.viewMatrixNeedsUpdate=!0,this.renderLists=[],this.meshListDidUpdate=!1,this.buffersNeedUpdate=!1}return t.prototype.add=function(t){t instanceof n.Camera?this.cameras.push(t):t instanceof s.Mesh&&this.addMesh(t)},t.prototype.addMesh=function(t){this.meshes.includes(t)||(this.meshes.push(t),this._onListUpdate())},t.prototype.deleteMesh=function(t){var e=this.meshes.indexOf(t);-1!==e&&(this.meshes.splice(e,1),console.error(\"Deleting mesh from render lists is not yet possible\"),this._onListUpdate())},t.prototype.updateProjectionView=function(t){this.viewProjectionMatrix.multiply(t.perspective,t.inverseWorldMatrix),this.viewFrustum.setFromProjectionMatrix(this.viewProjectionMatrix)},t.prototype.setAspectToActiveCamera=function(t){this.activeCamera&&this.activeCamera.setAspect(t)},t.prototype.onBeforeRender=function(){var t=this,e=this.activeCamera;e&&(e.perspectiveNeedsUpdate&&e.updatePerspective(),e.worldMatrixNeedsUpdate&&e.updateWorldMatrix(),this.viewMatrixNeedsUpdate&&this.updateProjectionView(e)),this.meshes.forEach((function(t){t.boundingBox.positionsNeedsUpdate&&t.boundingBox.uptadePositions()})),this.meshes.forEach((function(t){return t.updateWorldMatrix()})),this.meshes.forEach((function(e){return e.checkIsInFrustum(t)}))},t.prototype.onAfterRender=function(){this.meshListDidUpdate=!1,this.buffersNeedUpdate=!1},t.prototype._onListUpdate=function(){this.meshListDidUpdate=!0,this.buffersNeedUpdate=!0},t.prototype.destroy=function(){this.meshes.forEach((function(t){return t.destroy()}))},t}();e.Scene=h},33:(t,e,i)=>{i.r(e),i.d(e,{VALO2D:()=>v});class r{constructor(t,e){this.divID=t,this.options=e,this.element,this.elementId=\"scene\",this.width=this.options.width,this.height=this.options.height,this.backgroundColor=this.options.backgroundColor,this.pixelRatio=window.devicePixelRatio,this.autoResize=this.options.autoResize,this.clearBeforeRender=this.options.clearBeforeRender,this.preserveDrawingBuffer=this.options.preserveDrawingBuffer,this.transparent=this.options.transparent,this.resizeFunction=null,this.init()}init(){if(this.createCanvas(this.divID),this.autoResize){const t=()=>this.resize(this);window.addEventListener(\"resize\",t),this.resizeFunction=t}}createCanvas(t){this.autoResize&&this.adjustToTheParent(),this.element=document.createElement(\"canvas\"),this.element.setAttribute(\"id\",this.elementId),this.element.width=this.width*this.pixelRatio,this.element.height=this.height*this.pixelRatio,t?document.getElementById(t).appendChild(this.element):document.body.appendChild(this.element),this.addStyles()}addStyles(){const t=document.createElement(\"style\");document.head.appendChild(t);const e=t.sheet,i=`\\n    #${this.elementId} {\\n      width: ${this.width}px;\\n      height: ${this.height}px;\\n      margin: 0;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      overflow: hidden;\\n    }\\n    `;e.insertRule(i,0)}adjustToTheParent(){if(this.divID){const t=document.getElementById(this.divID).getBoundingClientRect();this.width=t.width,this.height=t.height}else this.width=window.innerWidth,this.height=window.innerHeight}resize(t){t.adjustToTheParent(),t.element.width=t.width*t.pixelRatio,t.element.height=t.height*t.pixelRatio,t.element.style.width=`${t.width}px`,t.element.style.height=`${t.height}px`}destroy(){this.resizeFunction&&window.removeEventListener(\"resize\",this.resizeFunction),this.element.parentNode.removeChild(this.element),this.backgroundColor=null,this.options=null,this.element=null}}class n{constructor(t,e){this.canvas=t,this.renderer=e,this.shapes=[],this.textures=[],this.amountOfVertices=0}addShape(t){this.shapes.includes(t)||(this.shapes.push(t),this.renderer.addProgramInUse(t.programInfo.program),this.amountOfVertices+=t.amountOfVertices)}deleteShape(t){const e=this.shapes.indexOf(t);-1!==e&&(this.shapes.splice(e,1),this.renderer.deleteProgramFromUse(t.programInfo.program),this.amountOfVertices-=t.amountOfVertices)}getVertexColorData(){const t=this.vertexColorData;let e=0;return this.shapes.forEach((i=>{const r=i.color.buffer;for(let i=0;i<r.length;i+=1)t[e+i]=r[i];e+=r.length})),t}render(){this.renderer.render()}destroy(){this.shapes.forEach((t=>t.destroy())),this.textures.forEach((t=>this.renderer.gl.deleteTexture(t.texture))),this.shapes=null}}function o(t,e,i){const r=t.createShader(t.VERTEX_SHADER);t.shaderSource(r,e);const n=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(n,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))return void console.error(\"ERROR compiling vertex shader!\",t.getShaderInfoLog(r));if(t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))return void console.error(\"ERROR compiling fragment shader!\",t.getShaderInfoLog(n));const o=t.createProgram();return t.attachShader(o,r),t.attachShader(o,n),function(t,e){t.bindAttribLocation(e,0,\"a_position\"),t.bindAttribLocation(e,1,\"a_color\"),t.bindAttribLocation(e,2,\"a_texcoord\")}(t,o),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||console.error(\"ERROR linking program!\",t.getProgramInfoLog(o)),o}function s(t){switch(t){case\"basic\":return\"\\n      precision mediump float;\\n\\n      uniform float u_pixelratio;\\n      uniform vec2 u_resolution;\\n\\n      attribute vec2 a_position;\\n\\n      uniform float u_rotation;\\n      uniform vec2 u_scale;\\n      uniform vec2 u_position;\\n\\n      void main() {\\n        vec2 pos = a_position * u_scale;\\n\\n        float t = u_rotation;\\n        mat2 matrix = mat2(cos(t), -sin(t), sin(t), cos(t));\\n\\n        // rotation and translation\\n        pos = (matrix * pos + u_position) / (u_resolution / u_pixelratio * 0.5);\\n\\n        gl_Position = vec4(pos, 0.0, 1.0);\\n      }\\n      \";case\"child\":return\"\\n      precision mediump float;\\n\\n      uniform float u_pixelratio;\\n      uniform vec2 u_resolution;\\n\\n      attribute vec2 a_position;\\n\\n      uniform float u_rotation;\\n      uniform vec2 u_position;\\n      uniform vec2 u_scale;\\n\\n      uniform float u_parent_rotation;\\n      uniform vec2 u_parent_position;\\n\\n      void main() {\\n        vec2 pos0 = u_parent_position;\\n        float t0 = u_parent_rotation;\\n\\n        vec2 pos = a_position * u_scale;\\n        float t = u_rotation;\\n\\n        // first childs own rotaion and relation to the parent\\n        mat2 m = mat2(cos(t), -sin(t), sin(t), cos(t));\\n        pos = m * pos + u_position;\\n\\n        // then parents rotations effect on the child\\n        mat2 m0 = mat2(cos(t0), -sin(t0), sin(t0), cos(t0));\\n        pos0 = (m0 * pos + pos0) / (u_resolution / u_pixelratio * 0.5);\\n\\n        gl_Position = vec4(pos0, 0.0, 1.0);\\n      }\\n      \";case\"points\":return\"\\n    precision mediump float;\\n\\n    // figure pixelratio later\\n    uniform float u_pixelratio;\\n    uniform vec2 u_resolution;\\n    uniform float u_scale;\\n\\n    attribute vec2 a_position;\\n    attribute vec4 a_color;\\n\\n    varying vec4 v_color;\\n\\n    void main(void) {\\n      v_color = a_color;\\n      gl_Position = vec4((a_position / (u_resolution / u_pixelratio * 0.5)), 0.0, 1.0);\\n      gl_PointSize = u_scale;\\n    }\\n    \";case\"lines\":return\"\\n      precision mediump float;\\n\\n      // figure pixelratio later\\n      uniform float u_pixelratio;\\n      uniform vec2 u_resolution;\\n\\n      attribute vec2 a_position;\\n\\n      void main(void) {\\n        gl_Position = vec4(a_position / (u_resolution / u_pixelratio * 0.5), 0.0, 1.0);\\n      }\\n      \";case\"vertexColor\":return\"\\n      precision mediump float;\\n\\n      uniform float u_pixelratio;\\n      uniform vec2 u_resolution;\\n\\n      attribute vec2 a_position;\\n      attribute vec4 a_color;\\n\\n      varying vec4 v_color;\\n\\n      uniform float u_rotation;\\n      uniform vec2 u_position;\\n      uniform vec2 u_scale;\\n\\n      void main() {\\n        v_color = a_color;\\n\\n        vec2 pos = a_position * u_scale;\\n\\n        float t = u_rotation;\\n        mat2 matrix = mat2(cos(t), -sin(t), sin(t), cos(t));\\n\\n        // rotation and translation\\n        pos = (matrix * pos + u_position) / (u_resolution / u_pixelratio * 0.5);\\n\\n        gl_Position = vec4(pos, 0.0, 1.0);\\n      }\\n      \";case\"texture\":return\"\\n      precision mediump float;\\n\\n      uniform float u_pixelratio;\\n      uniform vec2 u_resolution;\\n\\n      attribute vec2 a_position;\\n      attribute vec2 a_texcoord;\\n\\n      uniform float u_rotation;\\n      uniform vec2 u_position;\\n      uniform vec2 u_scale;\\n\\n      varying highp vec2 v_texcoord;\\n\\n      void main() {\\n        v_texcoord = a_texcoord;\\n\\n        vec2 pos = a_position * u_scale;\\n\\n        float t = u_rotation;\\n        mat2 matrix = mat2(cos(t), -sin(t), sin(t), cos(t));\\n\\n        // rotation and translation\\n        pos = (matrix * pos + u_position) / (u_resolution / u_pixelratio * 0.5);\\n\\n        gl_Position = vec4(pos, 0.0, 1.0);\\n      }\\n      \"}}function a(t){switch(t){case\"basic\":case\"child\":case\"lines\":return\"\\n      precision mediump float;\\n\\n      uniform vec4 u_color;\\n\\n      void main() {\\n        gl_FragColor = u_color;\\n      }\\n      \";case\"vertexColor\":case\"points\":return\"\\n    precision mediump float;\\n\\n      varying vec4 v_color;\\n\\n      void main() {\\n        gl_FragColor = v_color;\\n      }\\n      \";case\"texture\":return\"\\n      varying highp vec2 v_texcoord;\\n\\n      uniform sampler2D u_texture;\\n\\n      void main(void) {\\n        gl_FragColor = texture2D(u_texture, v_texcoord);\\n      }\\n      \"}}class h{constructor(t){this.WebGL_Program=t,this.U_PIXELRATIO=null,this.U_RESOLUTION=null,this.U_ROTATION=null,this.U_SCALE=null,this.U_POSITION=null,this.U_PARENT_POS=null,this.U_PARENT_ROT=null,this.U_COLOR=null,this.U_TEXTURE=null,this.U_TIME=null}setDefaultUniformLocations(t,e){this.U_PIXELRATIO=t.getUniformLocation(e,\"u_pixelratio\"),this.U_RESOLUTION=t.getUniformLocation(e,\"u_resolution\")}setUniformLocationsBasic(t,e=!1,i=!1,r=!0){const n=this.WebGL_Program;this.setDefaultUniformLocations(t,n),this.U_ROTATION=t.getUniformLocation(n,\"u_rotation\"),this.U_SCALE=t.getUniformLocation(n,\"u_scale\"),this.U_POSITION=t.getUniformLocation(n,\"u_position\"),i&&(this.U_TEXTURE=t.getUniformLocation(n,\"u_texture\")),r&&(this.U_COLOR=t.getUniformLocation(n,\"u_color\")),e&&(this.U_PARENT_POS=t.getUniformLocation(n,\"u_parent_position\"),this.U_PARENT_ROT=t.getUniformLocation(n,\"u_parent_rotation\"))}setUniformLocationsPoints(t){const e=this.WebGL_Program;this.setDefaultUniformLocations(t,e),this.U_SCALE=t.getUniformLocation(e,\"u_scale\")}setUniformLocationsLines(t){const e=this.WebGL_Program;this.setDefaultUniformLocations(t,e),this.U_COLOR=t.getUniformLocation(e,\"u_color\")}setUniformLocationTime(t){this.U_TIME=t.getUniformLocation(this.WebGL_Program,\"u_time\")}}class c{constructor(t){this.scene,this.canvas=t,this.gl,this.resolution=[this.canvas.element.width,this.canvas.element.height],this.programs={},this.programsInUse=[],this.customProgramCount=0,this.previousTextureNumber=null,this.frameCount=0,this.previousTime=0,this.drawCalls=0,this.frameRate=0,this.tickmaxsamples=100,this.tickindex=0,this.ticksum=0,this.ticklist=Array(100).fill(0),this.stopRenderLoopGiven=!1,this.init()}init(){const t=this.setupGL();t&&(this.programs=function(t){const e={},i=o(t,s(\"basic\"),a(\"basic\"));e.basic=new h(i),e.basic.setUniformLocationsBasic(t);const r=o(t,s(\"child\"),a(\"child\"));e.child=new h(r),e.child.setUniformLocationsBasic(t,!0);const n=o(t,s(\"points\"),a(\"points\"));e.points=new h(n),e.points.setUniformLocationsPoints(t);const c=o(t,s(\"lines\"),a(\"lines\"));e.lines=new h(c),e.lines.setUniformLocationsLines(t);const u=o(t,s(\"texture\"),a(\"texture\"));e.texture=new h(u),e.texture.setUniformLocationsBasic(t,!1,!0);const l=o(t,s(\"vertexColor\"),a(\"vertexColor\"));return e.vertexColor=new h(l),e.vertexColor.setUniformLocationsBasic(t,!1,!1,!1),e}(t))}setupGL(){const t={alpha:!0,premultipliedAlpha:!1,preserveDrawingBuffer:this.canvas.preserveDrawingBuffer},e=function(){if(window.WebGL2RenderingContext)return\"webgl2\";if(window.WebGLRenderingContext)return\"webgl\";{const t=document.createElement(\"canvas\");try{const e=t.getContext(\"experimental-webgl\");if(t.loseContext(),e){let t=document.createElement(\"canvas\");return t.getContext(\"experimental-webgl\").getExtension(\"WEBGL_lose_context\").loseContext(),t=null,\"experimental-webgl\"}}catch(t){console.log(t),window.alert(\"Your browser does not support WegGL!\\nPlease use Chrome or Firefox if you want to see all the features.\")}}return!1}();if(!e)return;const i=this.canvas.element.getContext(e,t),r=this.canvas.backgroundColor,n=this.canvas.transparent?0:r[3];return i.clearColor(r[0],r[1],r[2],n),i.clear(i.COLOR_BUFFER_BIT),i.enable(i.CULL_FACE),i.enable(i.BLEND),i.blendEquation(i.FUNC_ADD),i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE),this.gl=i,i}setBuffersAndAttributes(t,e){const i=e.position,r=e.index,n=e.uv,o=e.color;t.enableVertexAttribArray(0),t.bindBuffer(t.ARRAY_BUFFER,i),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0),n&&(t.enableVertexAttribArray(2),t.bindBuffer(t.ARRAY_BUFFER,n),t.vertexAttribPointer(2,2,t.FLOAT,!1,0,0)),o&&(t.enableVertexAttribArray(1),t.bindBuffer(t.ARRAY_BUFFER,o),t.vertexAttribPointer(1,4,t.FLOAT,!1,0,0)),e.drawElements&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)}setGeneralUniforms(t,e){t.uniform2fv(e.U_RESOLUTION,this.resolution),t.uniform1f(e.U_PIXELRATIO,this.canvas.pixelRatio),e.U_TIME&&t.uniform1f(e.U_TIME,this.previousTime/1e3)}setProgramUniforms(t,e,i){if(i.hasParent&&(t.uniform2fv(e.U_PARENT_POS,i.parent.position.getAsArray()),t.uniform1f(e.U_PARENT_ROT,i.parent.rotation)),t.uniform2fv(e.U_POSITION,i.position.getAsArray()),t.uniform2fv(e.U_SCALE,i.scale.getAsArrayScaled(i.scaleFactor)),t.uniform1f(e.U_ROTATION,i.rotation),e.U_COLOR&&t.uniform4fv(e.U_COLOR,i.color.getAsArray()),i.programInfo.hasTexture){const r=i.programInfo.texture,n=r.number;this.previousTextureNumber!==n&&(this.previousTextureNumber=n,t.activeTexture(t.TEXTURE0+n),t.bindTexture(t.TEXTURE_2D,r.texture),t.uniform1i(e.U_TEXTURE,0))}}render(){const t=this.gl;t.viewport(0,0,t.canvas.width,t.canvas.height),this.canvas.clearBeforeRender&&t.clear(t.COLOR_BUFFER_BIT);const e=this.scene.shapes.length;e>0&&(this.programsInUse.forEach((e=>{t.useProgram(e[0].WebGL_Program),this.setGeneralUniforms(t,e[0])})),this.scene.shapes.forEach((e=>{const i=e.programInfo,r=i.program,n=r.WebGL_Program;t.useProgram(n),this.setBuffersAndAttributes(t,i),this.setProgramUniforms(t,r,e),i.drawElements?t.drawElements(i.drawMode,e.amountOfVertices,t.UNSIGNED_SHORT,0):t.drawArrays(i.drawMode,0,e.vertexData.positions.length/2)})),this.frameCount+=1),this.drawCalls=e}runRenderLoop(t){this.stopRenderLoopGiven=!1,window.requestAnimationFrame((e=>{if(this.stopRenderLoopGiven)return;const i=(e-this.previousTime)/1e3;this.updateFrameRate(i),this.previousTime=e,this.resolution[0]=this.canvas.element.width,this.resolution[1]=this.canvas.element.height,t(i),this.runRenderLoop(t)}))}drawPoints(t,e,i){2*t.length!==e.length&&console.error(`Points array lengths don't match pos: ${t.length} and color: ${e.length}`);const r=this.gl,n=this.programs.points,o=n.WebGL_Program,s=t,a=e;r.useProgram(o);const h=r.createBuffer();r.enableVertexAttribArray(0),r.bindBuffer(r.ARRAY_BUFFER,h),r.bufferData(r.ARRAY_BUFFER,new Float32Array(s),r.STATIC_DRAW),r.vertexAttribPointer(0,2,r.FLOAT,!1,0,0);const c=r.createBuffer();r.enableVertexAttribArray(1),r.bindBuffer(r.ARRAY_BUFFER,c),r.bufferData(r.ARRAY_BUFFER,new Float32Array(a),r.STATIC_DRAW),r.vertexAttribPointer(1,4,r.FLOAT,!0,0,0),r.bindBuffer(r.ARRAY_BUFFER,null),r.uniform1f(n.U_SCALE,i*this.canvas.pixelRatio),r.uniform2fv(n.U_RESOLUTION,this.resolution),r.uniform1f(n.U_PIXELRATIO,this.canvas.pixelRatio),r.drawArrays(r.POINTS,0,s.length/2),r.deleteBuffer(h),r.deleteBuffer(c)}drawLines(t,e=null){const i=this.gl,r=this.programs.lines,n=r.WebGL_Program,o=e?e.getAsArray():[1,1,1,1],s=t;i.useProgram(n);const a=i.createBuffer();i.enableVertexAttribArray(0),i.bindBuffer(i.ARRAY_BUFFER,a),i.bufferData(i.ARRAY_BUFFER,new Float32Array(s),i.STATIC_DRAW),i.vertexAttribPointer(0,2,i.FLOAT,!1,0,0),i.uniform4fv(r.U_COLOR,o),i.uniform2fv(r.U_RESOLUTION,this.resolution),i.uniform1f(r.U_PIXELRATIO,this.canvas.pixelRatio),i.drawArrays(i.LINES,0,s.length/2),i.deleteBuffer(a)}updateFrameRate(t){this.ticksum-=this.ticklist[this.tickindex],this.ticksum+=t,this.ticklist[this.tickindex]=t,this.tickindex++,this.tickindex===this.tickmaxsamples&&(this.tickindex=0),this.frameRate=parseInt(1e4/this.ticksum/this.tickmaxsamples,10)}stop(){this.stopRenderLoopGiven=!0}destroy(){this.stop(),Object.values(this.programs).forEach((t=>this.gl.deleteProgram(t.program))),this.gl.getExtension(\"WEBGL_lose_context\").loseContext(),this.gl=null,this.canvas=null,this.programs=null,this.resolution=null,this.ticklist=null}createShaderProgram(t,e){const i=this.gl,r=o(i,t||s(\"texture\"),e||a(\"basic\")),n=new h(r);return n.setUniformLocationsBasic(i,!1,!1,!1),n.setUniformLocationTime(i),this.programs[`c${this.customProgramCount}`]=n,this.customProgramCount++,n}addProgramInUse(t){const e=this.programsInUse.indexOf((e=>e[0]==t));-1!==e?this.programsInUse[e][1]+=1:this.programsInUse.push([t,1])}deleteProgramFromUse(t){const e=this.programsInUse.indexOf(t);-1!==e&&(1===this.programsInUse[e][1]?this.programsInUse.splice(e,1):this.programsInUse[e][1]-=1)}}class u{constructor(t,e){this.x=t,this.y=e,this._arr=null}add(t){return this.x+=t.x,this.y+=t.y,this}addInPlace(t,e){return this.x+=t,this.y+=e,this}negate(){return this.x=-this.x,this.y=-this.y,this}multiply(t){return this.x*=t,this.y*=t,this}div(t){return this.x/=t,this.y/=t,this}mag(){return Math.sqrt(this.magSq())}magSq(){const t=this.x,e=this.y;return t*t+e*e}limit(t){const e=this.magSq();return e>t*t&&(this.div(Math.sqrt(e)),this.multiply(t)),this}normalize(){return this.div(this.mag())}setMag(t){return this.normalize().multiply(t)}clone(){return new u(this.x,this.y)}getAsArray(){return this._arr?this._arr[0]=this.x:this._arr=[this.x,this.y],this._arr[1]=this.y,this._arr}getAsArrayScaled(t){return this._arr?this._arr[0]=this.x:this._arr=[this.x,this.y],this._arr[1]=this.y,this._arr.map((e=>e*t))}}class l{constructor(t){this.scene=t,this.position,this.rotation=0,this.scale=new u(1,1),this.scaleFactor=1,this.color,this.centerOfRotation,this.vertexData,this.amountOfVertices=0,this.programInfo={position:null,index:null,uv:null,color:null,drawMode:0,program:null,drawElements:!1,hasTexture:!1},this.updatable=!1,this.isClone=!1,this.isVisible,this.isActive,this.hasParent=!1,this.parent,this.children}addChild(t){this.children||(this.children=[]),this.children.push(t),t.hasParent=!0,t.parent=this,t.programInfo.program=this.scene.renderer.programs.child,this.scene.addShape(t)}deleteChild(t){const e=this.children.indexOf(t);-1!==e&&this.children.splice(e,1)}buildProgramInfo(t,e=null){const i=this.scene.renderer.gl,r=e||this.scene.renderer.programs.basic,n=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,n),i.bufferData(i.ARRAY_BUFFER,new Float32Array(t.positions),i.STATIC_DRAW);const o=i.createBuffer();i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,o),i.bufferData(i.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.indices),i.STATIC_DRAW),t.uvs&&this.bindUVBuffer(t.uvs,i),t.colors&&this.setVertexColors(t.colors),this.programInfo.position=n,this.programInfo.index=o,this.programInfo.drawMode=i.TRIANGLES,this.programInfo.program=r,this.programInfo.drawElements=!0}clone(){const t=new l(this.scene);return t.vertexData=this.vertexData,t.programInfo=this.programInfo,t.amountOfVertices=this.amountOfVertices,t.color=this.color.clone(),t.position=new u(0,0),t.isClone=!0,t}merge(t){if(t.programInfo.drawMode!=this.programInfo.drawMode||t.programInfo.drawElements!=this.programInfo.drawElements||(t.vertexData.colors?!this.vertexData.colors:this.vertexData.colors)||(t.vertexData.uvs?!this.vertexData.uvs:this.vertexData.uvs))return console.error(\"Merge was unsuccesful because shapes are not compatible\"),this;const e=t.position.addInPlace(-this.position.x,-this.position.y),i=t.rotation,r=t.scale,n=[...t.vertexData.positions],o=t.vertexData.indices.map((t=>t+this.vertexData.positions.length/2));for(let e=0;e<n.length;e+=2){const o=n[e]*r.x*t.scaleFactor,s=n[e+1]*r.y*t.scaleFactor;n[e]=o*Math.cos(i)-s*Math.sin(i),n[e+1]=o*Math.sin(i)+s*Math.cos(i)}for(let t=0;t<n.length;t+=2)n[t]+=e.x,n[t+1]+=e.y;return this.vertexData.positions=this.vertexData.positions.concat(n),this.vertexData.indices=this.vertexData.indices.concat(o),this.vertexData.colors&&(this.vertexData.colors=this.vertexData.colors.concat(t.vertexData.colors)),this.vertexData.uvs&&(this.vertexData.uvs=this.vertexData.uvs.concat(t.vertexData.uvs)),this.amountOfVertices=this.vertexData.indices.length,this.destroyProgramBuffers(),this.buildProgramInfo(this.vertexData,this.programInfo.program),t.destroy(),this}addTexture(t){const e=this.scene.renderer.programs.texture;this.buildUVBuffer(),this.programInfo.hasTexture=!0,this.programInfo.texture=t,this.programInfo.program=e,this.scene.renderer.addProgramInUse(e)}setShaderProgram(t,e=!1){e&&this.buildUVBuffer(),this.programInfo.program=t,this.scene.renderer.addProgramInUse(t)}setVertexColors(t){if(t.length!==2*this.vertexData.positions.length)return void console.error(\"Color array has an invalid length\");const e=this.scene.renderer.gl,i=this.scene.renderer.programs.vertexColor;this.vertexData.colors=t;const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),this.programInfo.color=r,this.programInfo.program=i,this.scene.renderer.addProgramInUse(i)}bindUVBuffer(t,e){if(!this.programInfo)return void console.error(\"No programInfo-object\");const i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),this.programInfo.uv=i}destroy(t=!0){this.scene.deleteShape(this),this.hasParent&&this.parent.deleteChild(this),this.children&&this.children.forEach((t=>t.destroy())),this.isClone||this.vertexData.destroy(),t&&this.destroyProgramBuffers(),this.programInfo=null,this.vertexData=null,this.color.buffer=null,this.color=null}destroyProgramBuffers(){if(this.isClone)return;const t=this.scene.renderer.gl,e=this.programInfo.position,i=this.programInfo.index,r=this.programInfo.uv,n=this.programInfo.color;e&&t.deleteBuffer(e),i&&t.deleteBuffer(i),r&&t.deleteBuffer(r),n&&t.deleteBuffer(n)}}class p{constructor(t,e,i=null,r=null){this.positions=t,this.indices=e,this.uvs=i,this.colors=r}destroy(){this.positions=null,this.indices=null,this.uvs=null,this.colors=null}}class f{constructor(t,e,i,r=1){this.r=t,this.g=e,this.b=i,this.a=r,this._arr}set(t,e,i,r=1){this.r=t,this.g=e,this.b=i,this.a=r}getAsArray(){return this._arr?(this._arr[0]=this.r,this._arr[1]=this.g,this._arr[2]=this.b,this._arr[3]=this.a):this._arr=[this.r,this.g,this.b,this.a],this._arr}clone(){return new f(this.r,this.g,this.b,this.a)}}class d{constructor(){this.xx=0,this.yx=0,this.zx=0,this.xy=0,this.yy=0,this.zy=0,this.zx=0,this.zy=0,this.zz=0}set(t,e,i,r,n,o,s,a,h){return this.xx=t,this.yx=e,this.zx=i,this.xy=r,this.yy=n,this.zy=o,this.zx=s,this.zy=a,this.zz=h,this}identity(){return this.xx=1,this.yx=0,this.zx=0,this.xy=0,this.yy=1,this.zy=0,this.zx=0,this.zy=0,this.zz=1,this}mult(t){const e=this.xx*t.xx+this.yx*t.xy+this.zx*t.xz,i=this.xx*t.yx+this.yx*t.yy+this.zx*t.yz,r=this.xx*t.zx+this.yx*t.zy+this.zx*t.zz,n=this.xy*t.xx+this.yy*t.xy+this.zy*t.xz,o=this.xy*t.yx+this.yy*t.yy+this.zy*t.yz,s=this.xy*t.zx+this.yy*t.zy+this.zy*t.zz,a=this.xz*t.xx+this.yz*t.xy+this.zz*t.xz,h=this.xz*t.yx+this.yz*t.yy+this.zz*t.yz,c=this.xz*t.zx+this.yz*t.zy+this.zz*t.zz;return this.set(e,i,r,n,o,s,a,h,c),this}clone(){const t=new d;return t.set(this.xx,this.yx,this.zx,this.xy,this.yy,this.zy,this.xz,this.yz,this.zz),t}}class m{constructor(t,e){this.number=t,this.texture=e}from(t){}}const y=[.68,.59,.84,1];class v{constructor(t,e){this.divID=t,this.options=Object.assign({width:window.innerWidth,height:window.innerHeight,backgroundColor:y,autoResize:!0,clearBeforeRender:!0,preserveDrawingBuffer:!1,transparent:!1},e||{}),this.canvas,this.renderer,this.scene,this.init()}init(){const t=new r(this.divID,this.options),e=new c(t),i=new n(t,e);e.scene=i,this.canvas=t,this.scene=i,this.renderer=e}destroy(){this.scene.destroy(),this.renderer.destroy(),this.canvas.destroy(),this.options=null,this.renderer=null,this.scene=null,this.canvas=null}}v.Scene=n,v.Renderer2D=c,v.Circle=class extends l{constructor(t,e){super(t),this.options=e||{},this.radius=this.options.radius||50,this.arc=this.options.arc||1,this.tessellation=this.options.tessellation||64,this.color=this.options.color||new f(0,.5,.5),this.position=new u(0,0),this.rotation=0,this.init()}init(){const t=this.buildGeometry();this.buildProgramInfo(t)}buildGeometry(){const t=this.arc,e=this.tessellation,i=this.radius,r=[],n=[];r.push(0,0);const o=2*Math.PI*t,s=o/e;for(let t=0;t<o+s/2;t+=s){const e=i*Math.cos(t),n=i*Math.sin(t);r.push(e,n)}const a=r.length/2;for(let t=1;t<a-1;t++)n.push(t+1,0,t);const h=new p(r,n);return this.vertexData=h,this.amountOfVertices=n.length,h}buildUVBuffer(){const t=this.scene.renderer.gl,e=this.arc,i=this.tessellation,r=[];r.push(.5,.5);const n=2*Math.PI*e,o=n/i;for(let t=0;t<n+o/2;t+=o){const e=(Math.cos(t)+1)/2,i=(1-Math.sin(t))/2;r.push(e,i)}this.vertexData.uvs=r,this.bindUVBuffer(r,t)}},v.Rectangle=class extends l{constructor(t,e){super(t),this.options=e||{},this.width=this.options.width||10,this.height=this.options.height||10,this.color=this.options.color||new f(0,.5,.5),this.position=new u(0,0),this.rotation=0,this.init()}init(){const t=this.buildGeometry();this.buildProgramInfo(t)}buildGeometry(){const t=this.width,e=this.height,i=[],r=[0,1,2,0,3,1];i.push(-t/2,-e/2),i.push(t/2,e/2),i.push(-t/2,e/2),i.push(t/2,-e/2);const n=new p(i,r);return this.vertexData=n,this.amountOfVertices=r.length,n}buildProgramInfo(t){const e=this.scene.renderer.gl,i=this.scene.renderer.programs.basic,r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t.positions),e.STATIC_DRAW);const n=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.indices),e.STATIC_DRAW),this.programInfo.position=r,this.programInfo.index=n,this.programInfo.drawMode=e.TRIANGLES,this.programInfo.program=i,this.programInfo.drawElements=!0}buildUVBuffer(){const t=this.scene.renderer.gl,e=[0,1,1,0,0,0,1,1];this.vertexData.uvs=e,this.bindUVBuffer(e,t)}},v.CustomShape=class extends l{constructor(t,e){super(t),this.position=new u(0,0),this.rotation=0,this.vertexData=e,this.color=new f(.5,.5,.5,1),this.init()}init(){const t=this.vertexData;this.amountOfVertices=t.indices.length,this.buildProgramInfo(t)}buildProgramInfo(t){const e=this.scene.renderer.gl,i=this.scene.renderer.programs.basic,r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t.positions),e.STATIC_DRAW);const n=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.indices),e.STATIC_DRAW),this.programInfo.position=r,this.programInfo.index=n,this.programInfo.program=i,this.programInfo.drawMode=e.TRIANGLES,this.programInfo.drawElements=!0,t.uvs&&this.bindUVBuffer(t.uvs,e)}},v.VertexData=p,v.Vec2=u,v.Matrix3=d,v.Color=f,v.TextureLoader=class{constructor(t){this.graphics=t,this.gl=t.renderer.gl}load(t){const e=this.gl,i=e.createTexture();e.bindTexture(e.TEXTURE_2D,i);const r=e.RGBA,n=e.RGBA,o=e.UNSIGNED_BYTE,s=new Uint8Array([200,200,200,255]);e.texImage2D(e.TEXTURE_2D,0,r,1,1,0,n,o,s);const a=t=>0==(t&t-1),h=new Image;h.onload=function(){e.bindTexture(e.TEXTURE_2D,i),e.texImage2D(e.TEXTURE_2D,0,r,n,o,h),a(h.width)&&a(h.height)?e.generateMipmap(e.TEXTURE_2D):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR))},h.src=t;const c=this.graphics.scene.textures.length;return this.graphics.scene.textures.push(i),new m(c,i)}},v.Program=h,v.isMobile=function(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf(\"IEMobile\")}}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})};var r={};(()=>{var t=r,e=i(627),n=i(276),o=i(550),s=i(434),a=i(595),h=i(253),c=i(234),u=i(905),l=i(636),p=i(479),f=i(707),d=i(725),m=i(469),y=i(236),v=i(36),g=i(33),x=function(){function t(){}return t.BoxGeometry=e.BoxGeometry,t.PlaneGeometry=n.PlaneGeometry,t.SphereGeometry=o.SphereGeometry,t.WebGLRenderer=s.WebGLRenderer,t.Scene=a.Scene,t.StandardMaterial=h.StandardMaterial,t.Color=c.Color,t.NaiveMaterial=u.NaiveMaterial,t.Mesh=l.Mesh,t.DirectionalLight=p.DirectionalLight,t.Camera=f.Camera,t.FreeCamera=d.FreeCamera,t.TargetCamera=m.TargetCamera,t.Vector3=y.Vector3,t.HelperManager=v.HelperManager,t.VALO2D=g.VALO2D,t}();t.default=x})();var n=exports,o=r.default;for(var s in o)n[s]=o[s];o.__esModule&&Object.defineProperty(n,\"__esModule\",{value:!0})})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../valo.js/build/valo.js\n");

/***/ }),

/***/ "../valo.js/src/valo2D/utils/color.js":
/*!********************************************!*\
  !*** ../valo.js/src/valo2D/utils/color.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Color; });\n/**\n * Color class\n */\nclass Color {\n  /**\n   * Set values for color\n   * @param {number} r Red\n   * @param {number} g Green\n   * @param {number} b Blue\n   * @param {number} a Alpha (optional)\n   */\n  constructor(r, g, b, a = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n\n    this._arr;\n  }\n\n  /**\n   * Set new values for color\n   * @param {number} r Red\n   * @param {number} g Green\n   * @param {number} b Blue\n   * @param {number} a Alpha\n   */\n  set(r, g, b, a = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * @returns {Array} the color as an array\n   */\n  getAsArray() {\n    if (!this._arr) this._arr = [this.r, this.g, this.b, this.a];\n    else {\n      this._arr[0] = this.r;\n      this._arr[1] = this.g;\n      this._arr[2] = this.b;\n      this._arr[3] = this.a;\n    }\n    return this._arr;\n  }\n\n  /**\n   * returns a new color with same values\n   */\n  clone() {\n    return new Color(this.r, this.g, this.b, this.a);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL3ZhbG8uanMvc3JjL3ZhbG8yRC91dGlscy9jb2xvci5qcz8yODZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uL3ZhbG8uanMvc3JjL3ZhbG8yRC91dGlscy9jb2xvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29sb3IgY2xhc3NcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3Ige1xuICAvKipcbiAgICogU2V0IHZhbHVlcyBmb3IgY29sb3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IHIgUmVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnIEdyZWVuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiIEJsdWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGEgQWxwaGEgKG9wdGlvbmFsKVxuICAgKi9cbiAgY29uc3RydWN0b3IociwgZywgYiwgYSA9IDEuMCkge1xuICAgIHRoaXMuciA9IHI7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYSA9IGE7XG5cbiAgICB0aGlzLl9hcnI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG5ldyB2YWx1ZXMgZm9yIGNvbG9yXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByIFJlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gZyBHcmVlblxuICAgKiBAcGFyYW0ge251bWJlcn0gYiBCbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhIEFscGhhXG4gICAqL1xuICBzZXQociwgZywgYiwgYSA9IDEuMCkge1xuICAgIHRoaXMuciA9IHI7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYSA9IGE7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5fSB0aGUgY29sb3IgYXMgYW4gYXJyYXlcbiAgICovXG4gIGdldEFzQXJyYXkoKSB7XG4gICAgaWYgKCF0aGlzLl9hcnIpIHRoaXMuX2FyciA9IFt0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmFdO1xuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fYXJyWzBdID0gdGhpcy5yO1xuICAgICAgdGhpcy5fYXJyWzFdID0gdGhpcy5nO1xuICAgICAgdGhpcy5fYXJyWzJdID0gdGhpcy5iO1xuICAgICAgdGhpcy5fYXJyWzNdID0gdGhpcy5hO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSBuZXcgY29sb3Igd2l0aCBzYW1lIHZhbHVlc1xuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcih0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEpO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../valo.js/src/valo2D/utils/color.js\n");

/***/ }),

/***/ "../valo.js/src/valo2D/utils/mobile.js":
/*!*********************************************!*\
  !*** ../valo.js/src/valo2D/utils/mobile.js ***!
  \*********************************************/
/*! exports provided: isMobile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isMobile\", function() { return isMobile; });\nfunction isMobile() {\n  return (typeof window.orientation !== 'undefined') || (navigator.userAgent.indexOf('IEMobile') !== -1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL3ZhbG8uanMvc3JjL3ZhbG8yRC91dGlscy9tb2JpbGUuanM/NWVkYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQU87QUFDUDtBQUNBIiwiZmlsZSI6Ii4uL3ZhbG8uanMvc3JjL3ZhbG8yRC91dGlscy9tb2JpbGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNNb2JpbGUoKSB7XG4gIHJldHVybiAodHlwZW9mIHdpbmRvdy5vcmllbnRhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHx8IChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0lFTW9iaWxlJykgIT09IC0xKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../valo.js/src/valo2D/utils/mobile.js\n");

/***/ }),

/***/ "./flowlines/Field.js":
/*!****************************!*\
  !*** ./flowlines/Field.js ***!
  \****************************/
/*! exports provided: Field */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Field\", function() { return Field; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color */ \"./flowlines/color.js\");\n/* harmony import */ var _perlin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./perlin */ \"./flowlines/perlin.js\");\n/* harmony import */ var _perlin__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_perlin__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _particle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./particle */ \"./flowlines/particle.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Vector */ \"./flowlines/Vector.js\");\n/* harmony import */ var valo_js_src_valo2D_utils_mobile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! valo.js/src/valo2D/utils/mobile */ \"../valo.js/src/valo2D/utils/mobile.js\");\n/* harmony import */ var valo_js_src_valo2D_utils_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! valo.js/src/valo2D/utils/color */ \"../valo.js/src/valo2D/utils/color.js\");\n\n\n\n\n\n\n\n\n/**\n * Vector field object\n */\n\nvar Field = /*#__PURE__*/function () {\n  function Field(app, options, settings) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Field);\n\n    this.app = app;\n    this.options = options || {};\n    this.settings = settings || {}; // options\n\n    this.particleAmount = this.options.particleAmount || Object(valo_js_src_valo2D_utils_mobile__WEBPACK_IMPORTED_MODULE_6__[\"isMobile\"])() ? 4000 : 14000;\n    this.vectorUpdateFreq = this.options.vectorUpdateFreq || 10;\n    this.perlinDiff = this.options.perlinDiff || 0.006;\n    this.flowSpeed = (this.options.flowSpeed || 0.0001) / this.vectorUpdateFreq;\n    this.flowStrength = this.options.flowStrength || Math.min(0.00006 * window.innerWidth, 0.05);\n    this.particleMaxSpeed = this.options.particleMaxSpeed || Math.min(0.0020 * window.innerWidth, 2);\n    this.colorChangeSpeed = this.options.colorChangeSpeed || 0.025;\n    this.particleOpacity = this.options.particleOpacity || Object(valo_js_src_valo2D_utils_mobile__WEBPACK_IMPORTED_MODULE_6__[\"isMobile\"])() ? 0.1 : 0.02;\n    this.color = new valo_js_src_valo2D_utils_color__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0, 0, 1);\n    this.debug = this.options.debug || false;\n    this.tileSize = 10; // good as a constant :)\n    // advanced settings\n\n    this.dynamicParticleAmount = this.settings.dynamicParticleAmount || false;\n    this.targetFps = this.settings.targetFps || 55; // main direction of vectors\n\n    this.floatDir = Math.PI / 2; // if > 0, main direction of vectors will vary\n\n    this.floatDirChangeSpeed = 0; // helpers to reduce calculations\n\n    this.lineLength = this.tileSize / 2;\n    this.halfTileSize = this.tileSize / 2;\n    this.cols = Math.ceil(this.app.canvas.width / this.tileSize);\n    this.rows = Math.ceil(this.app.canvas.height / this.tileSize);\n    this.frameCount = 0;\n    this.zOff = Math.floor(Math.random() * 100); // Elements\n\n    this.vectors = [];\n    this.particles = new Array(this.particleAmount); // Buffers\n\n    this.positionsBuffer = new Array(this.particleAmount * 4); // init\n\n    this.createVectors();\n    this.createParticles(); // custom blending function\n    // this.setBlendingFunction(this.app.renderer.gl);\n  }\n  /**\n   * Creates the vectors\n   */\n\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Field, [{\n    key: \"createVectors\",\n    value: function createVectors() {\n      for (var y = 0; y < this.rows; y++) {\n        for (var x = 0; x < this.cols; x++) {\n          var obj = {\n            color: 0xFFFFF,\n            pos: new _Vector__WEBPACK_IMPORTED_MODULE_5__[\"Vec2\"](x * this.tileSize + this.halfTileSize, y * this.tileSize + this.halfTileSize),\n            vec: new _Vector__WEBPACK_IMPORTED_MODULE_5__[\"Vec2\"](0, 0)\n          }; // according to perlin noise\n\n          var rotation = this.randomDir(obj.pos.x, obj.pos.y, this.zOff) + this.floatDir;\n          obj.vec = new _Vector__WEBPACK_IMPORTED_MODULE_5__[\"Vec2\"](this.lineLength * Math.cos(rotation), this.lineLength * Math.sin(rotation));\n          this.vectors.push(obj);\n        }\n      }\n    }\n    /**\n     * Creates particles\n     */\n\n  }, {\n    key: \"createParticles\",\n    value: function createParticles() {\n      for (var i = 0; i < this.particleAmount; i++) {\n        var part = new _particle__WEBPACK_IMPORTED_MODULE_4__[\"Particle\"](this, new _Vector__WEBPACK_IMPORTED_MODULE_5__[\"Vec2\"](this.app.canvas.width, this.app.canvas.height), this.tileSize);\n        this.particles.push(part);\n      }\n    }\n    /**\n     * Updates vectorfield directions\n     * @param {number} delta Change in time between updates\n     */\n\n  }, {\n    key: \"updateVectors\",\n    value: function updateVectors(delta) {\n      var _this = this;\n\n      this.vectors.forEach(function (obj) {\n        var rotation = _this.randomDir(obj.pos.x, obj.pos.y, _this.zOff) + _this.floatDir;\n\n        obj.vec = new _Vector__WEBPACK_IMPORTED_MODULE_5__[\"Vec2\"](_this.lineLength * Math.cos(rotation), _this.lineLength * Math.sin(rotation));\n      });\n\n      if (this.debug) {\n        this.showVectors();\n      }\n    }\n    /**\n     * Updates particle positions\n     * @param {number} delta Change in time between updates\n     */\n\n  }, {\n    key: \"updateParticles\",\n    value: function updateParticles(delta) {\n      var _this2 = this;\n\n      var positions = this.positionsBuffer;\n      this.color.a = this.particleOpacity;\n      var x = this.app.canvas.width / 2;\n      var y = this.app.canvas.height / 2;\n      this.particles.forEach(function (part, idx) {\n        part.checkEdges();\n        part.follow(_this2.vectors);\n        part.update(delta);\n        var i = idx * 4;\n        positions[i] = part.prevPos.x - x;\n        positions[i + 1] = part.prevPos.y - y;\n        positions[i + 2] = part.pos.x - x;\n        positions[i + 3] = part.pos.y - y;\n      });\n      this.app.renderer.drawLines(positions, this.color);\n      this.color = Object(_color__WEBPACK_IMPORTED_MODULE_2__[\"makeColorGradient\"])(this.frameCount *\n      /* delta */\n      this.colorChangeSpeed);\n    }\n    /**\n     * Updates the application\n     * @param {number} delta Change in time between updates\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this.frameCount % this.vectorUpdateFreq === 0) {\n        this.updateVectors(delta);\n      }\n\n      this.updateParticles(delta);\n      this.zOff += this.flowSpeed * delta; // if you want to vary yout main flow direction\n      // this.floatDir += (this.flowSpeed * this.floatDirChangeSpeed * delta) % (Math.PI / 2);\n\n      this.frameCount++;\n    }\n    /**\n     * Gets a random direction according to 3D perlin noise.\n     * Determines vector field.\n     * @param {number} x \n     * @param {number} y \n     * @param {number} z \n     */\n\n  }, {\n    key: \"randomDir\",\n    value: function randomDir(x, y, z) {\n      var value = Math.abs(_perlin__WEBPACK_IMPORTED_MODULE_3__[\"noise\"].perlin3(x * this.perlinDiff, y * this.perlinDiff, z)) * Math.PI * 4;\n      return value;\n    }\n    /**\n     * returns a hex decimal color out of r g b values\n     */\n\n  }, {\n    key: \"rgb\",\n    value: function rgb(r, g, b) {\n      return (r << 16) + (g << 8) + b;\n    }\n    /**\n     * Blending function that creates a dark color scheme\n     * @param {WebGLRenderingContext} gl \n     */\n\n  }, {\n    key: \"setBlendingFunction\",\n    value: function setBlendingFunction(gl) {\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);\n    }\n    /**\n     * Frees the objects used by this\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.app = null;\n      this.options = null;\n      this.settings = null;\n      this.color = null;\n      this.vectors = null;\n      this.particles = null;\n      this.positionsBuffer = null;\n    } // UI METHODS\n\n  }, {\n    key: \"toggleDebug\",\n    value: function toggleDebug() {\n      this.debug = !this.debug;\n    }\n  }]);\n\n  return Field;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./flowlines/Field.js\n");

/***/ }),

/***/ "./flowlines/FlowLines.js":
/*!********************************!*\
  !*** ./flowlines/FlowLines.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FlowLines; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Field */ \"./flowlines/Field.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! valo.js */ \"../valo.js/build/valo.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(valo_js__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n/**\n * Flowlines\n */\n\nvar FlowLines = /*#__PURE__*/function () {\n  function FlowLines(divID, options) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, FlowLines);\n\n    this.divID = divID;\n    this.options = options || {\n      debug: false\n    };\n    this.app;\n    this.field;\n  }\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(FlowLines, [{\n    key: \"create\",\n    value: function create() {\n      this.app = new valo_js__WEBPACK_IMPORTED_MODULE_3__[\"VALO2D\"](this.divID, {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        clearBeforeRender: this.options.debug,\n        preserveDrawingBuffer: !this.options.debug,\n        transparent: !this.options.debug,\n        autoResize: true\n      });\n      this.field = new _Field__WEBPACK_IMPORTED_MODULE_2__[\"Field\"](this.app, this.options);\n      this.createScene(this.sceneid);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.app.destroy();\n      this.field.destroy();\n      this.app = null;\n      this.field = null;\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene(sceneid) {\n      var _this = this;\n\n      this.app.renderer.runRenderLoop(function (delta) {\n        _this.app.scene.render();\n\n        _this.field.update(delta * 1000);\n      });\n    }\n  }, {\n    key: \"addFpsCounter\",\n    value: function addFpsCounter() {\n      var _this2 = this;\n\n      var style = document.createElement('style');\n      style.innerHTML = \"\\n      #fps {\\n        position: absolute;\\n        margin: 10px;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      \";\n      document.head.appendChild(style); // FPS COUNTER\n\n      var element = document.createElement(\"p\");\n      element.setAttribute(\"id\", \"fps\");\n      document.getElementById(this.sceneid).appendChild(element);\n      setInterval(function () {\n        if (_this2.app) {\n          element.innerHTML = \"FPS: \" + String(Math.floor(_this2.app.ticker.FPS));\n        }\n      }, 1000);\n    }\n  }, {\n    key: \"addResizes\",\n    value: function addResizes() {\n      var vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n      window.addEventListener('resize', function () {\n        var vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n      });\n    }\n  }, {\n    key: \"addStyleTags\",\n    value: function addStyleTags() {\n      // add style tags\n      var style = document.createElement('style');\n      style.innerHTML = \"\\n      #\".concat(this.sceneid, \" {\\n        height: 100vh;\\n        height: calc(100 * var(--vh));\\n        width: 100vw;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        overflow: hidden;\\n        z-index: -10;\\n      }\\n      \");\n      document.head.appendChild(style);\n    }\n  }]);\n\n  return FlowLines;\n}();\n\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmxvd2xpbmVzL0Zsb3dMaW5lcy5qcz82MmM5Il0sIm5hbWVzIjpbIkZsb3dMaW5lcyIsImRpdklEIiwib3B0aW9ucyIsImRlYnVnIiwiYXBwIiwiZmllbGQiLCJWQUxPMkQiLCJ3aWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsImNsZWFyQmVmb3JlUmVuZGVyIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwidHJhbnNwYXJlbnQiLCJhdXRvUmVzaXplIiwiRmllbGQiLCJjcmVhdGVTY2VuZSIsInNjZW5laWQiLCJkZXN0cm95IiwicmVuZGVyZXIiLCJydW5SZW5kZXJMb29wIiwiZGVsdGEiLCJzY2VuZSIsInJlbmRlciIsInVwZGF0ZSIsInN0eWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRCeUlkIiwic2V0SW50ZXJ2YWwiLCJTdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJ0aWNrZXIiLCJGUFMiLCJ2aCIsImRvY3VtZW50RWxlbWVudCIsInNldFByb3BlcnR5IiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7SUFDcUJBLFM7QUFDbkIscUJBQVlDLEtBQVosRUFBbUJDLE9BQW5CLEVBQTRCO0FBQUE7O0FBQzFCLFNBQUtELEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBTyxJQUFJO0FBQ3hCQyxXQUFLLEVBQUU7QUFEaUIsS0FBMUI7QUFHQSxTQUFLQyxHQUFMO0FBQ0EsU0FBS0MsS0FBTDtBQUNEOzs7OzZCQUVRO0FBQ1AsV0FBS0QsR0FBTCxHQUFXLElBQUlFLDhDQUFKLENBQVcsS0FBS0wsS0FBaEIsRUFBdUI7QUFDaENNLGFBQUssRUFBRUMsTUFBTSxDQUFDQyxVQURrQjtBQUVoQ0MsY0FBTSxFQUFFRixNQUFNLENBQUNHLFdBRmlCO0FBR2hDQyx5QkFBaUIsRUFBRSxLQUFLVixPQUFMLENBQWFDLEtBSEE7QUFJaENVLDZCQUFxQixFQUFFLENBQUMsS0FBS1gsT0FBTCxDQUFhQyxLQUpMO0FBS2hDVyxtQkFBVyxFQUFFLENBQUMsS0FBS1osT0FBTCxDQUFhQyxLQUxLO0FBTWhDWSxrQkFBVSxFQUFFO0FBTm9CLE9BQXZCLENBQVg7QUFRQSxXQUFLVixLQUFMLEdBQWEsSUFBSVcsNENBQUosQ0FBVSxLQUFLWixHQUFmLEVBQW9CLEtBQUtGLE9BQXpCLENBQWI7QUFDQSxXQUFLZSxXQUFMLENBQWlCLEtBQUtDLE9BQXRCO0FBQ0Q7Ozs4QkFFUztBQUNSLFdBQUtkLEdBQUwsQ0FBU2UsT0FBVDtBQUNBLFdBQUtkLEtBQUwsQ0FBV2MsT0FBWDtBQUNBLFdBQUtmLEdBQUwsR0FBVyxJQUFYO0FBQ0EsV0FBS0MsS0FBTCxHQUFhLElBQWI7QUFDRDs7O2dDQUVXYSxPLEVBQVM7QUFBQTs7QUFDbkIsV0FBS2QsR0FBTCxDQUFTZ0IsUUFBVCxDQUFrQkMsYUFBbEIsQ0FBZ0MsVUFBQUMsS0FBSyxFQUFJO0FBQ3ZDLGFBQUksQ0FBQ2xCLEdBQUwsQ0FBU21CLEtBQVQsQ0FBZUMsTUFBZjs7QUFDQSxhQUFJLENBQUNuQixLQUFMLENBQVdvQixNQUFYLENBQWtCSCxLQUFLLEdBQUMsSUFBeEI7QUFDRCxPQUhEO0FBSUQ7OztvQ0FFZTtBQUFBOztBQUNkLFVBQU1JLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE9BQXZCLENBQWQ7QUFDQUYsV0FBSyxDQUFDRyxTQUFOO0FBUUFGLGNBQVEsQ0FBQ0csSUFBVCxDQUFjQyxXQUFkLENBQTBCTCxLQUExQixFQVZjLENBV2Q7O0FBQ0EsVUFBTU0sT0FBTyxHQUFHTCxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBaEI7QUFDQUksYUFBTyxDQUFDQyxZQUFSLENBQXFCLElBQXJCLEVBQTJCLEtBQTNCO0FBQ0FOLGNBQVEsQ0FBQ08sY0FBVCxDQUF3QixLQUFLaEIsT0FBN0IsRUFBc0NhLFdBQXRDLENBQWtEQyxPQUFsRDtBQUNBRyxpQkFBVyxDQUFDLFlBQU07QUFDaEIsWUFBSSxNQUFJLENBQUMvQixHQUFULEVBQWM7QUFDWjRCLGlCQUFPLENBQUNILFNBQVIsR0FBb0IsVUFBVU8sTUFBTSxDQUFDQyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxNQUFJLENBQUNsQyxHQUFMLENBQVNtQyxNQUFULENBQWdCQyxHQUEzQixDQUFELENBQXBDO0FBQ0Q7QUFDRixPQUpVLEVBSVIsSUFKUSxDQUFYO0FBS0Q7OztpQ0FFWTtBQUNYLFVBQU1DLEVBQUUsR0FBR2pDLE1BQU0sQ0FBQ0csV0FBUCxHQUFxQixJQUFoQztBQUNBZ0IsY0FBUSxDQUFDZSxlQUFULENBQXlCaEIsS0FBekIsQ0FBK0JpQixXQUEvQixDQUEyQyxNQUEzQyxZQUFzREYsRUFBdEQ7QUFDQWpDLFlBQU0sQ0FBQ29DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQU07QUFDdEMsWUFBTUgsRUFBRSxHQUFHakMsTUFBTSxDQUFDRyxXQUFQLEdBQXFCLElBQWhDO0FBQ0FnQixnQkFBUSxDQUFDZSxlQUFULENBQXlCaEIsS0FBekIsQ0FBK0JpQixXQUEvQixDQUEyQyxNQUEzQyxZQUFzREYsRUFBdEQ7QUFDRCxPQUhEO0FBSUQ7OzttQ0FFYztBQUNiO0FBQ0EsVUFBTWYsS0FBSyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBRixXQUFLLENBQUNHLFNBQU4sc0JBQ0ssS0FBS1gsT0FEVjtBQVlBUyxjQUFRLENBQUNHLElBQVQsQ0FBY0MsV0FBZCxDQUEwQkwsS0FBMUI7QUFDRCIsImZpbGUiOiIuL2Zsb3dsaW5lcy9GbG93TGluZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IHsgVkFMTzJEIH0gZnJvbSBcInZhbG8uanNcIjtcblxuLyoqXG4gKiBGbG93bGluZXNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmxvd0xpbmVzIHtcbiAgY29uc3RydWN0b3IoZGl2SUQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmRpdklEID0gZGl2SUQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7XG4gICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgfTtcbiAgICB0aGlzLmFwcDtcbiAgICB0aGlzLmZpZWxkO1xuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHRoaXMuYXBwID0gbmV3IFZBTE8yRCh0aGlzLmRpdklELCB7XG4gICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgIGNsZWFyQmVmb3JlUmVuZGVyOiB0aGlzLm9wdGlvbnMuZGVidWcsXG4gICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6ICF0aGlzLm9wdGlvbnMuZGVidWcsXG4gICAgICB0cmFuc3BhcmVudDogIXRoaXMub3B0aW9ucy5kZWJ1ZyxcbiAgICAgIGF1dG9SZXNpemU6IHRydWUsXG4gICAgfSk7XG4gICAgdGhpcy5maWVsZCA9IG5ldyBGaWVsZCh0aGlzLmFwcCwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmNyZWF0ZVNjZW5lKHRoaXMuc2NlbmVpZCk7XG4gIH07XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmFwcC5kZXN0cm95KCk7XG4gICAgdGhpcy5maWVsZC5kZXN0cm95KCk7XG4gICAgdGhpcy5hcHAgPSBudWxsO1xuICAgIHRoaXMuZmllbGQgPSBudWxsO1xuICB9XG5cbiAgY3JlYXRlU2NlbmUoc2NlbmVpZCkge1xuICAgIHRoaXMuYXBwLnJlbmRlcmVyLnJ1blJlbmRlckxvb3AoZGVsdGEgPT4ge1xuICAgICAgdGhpcy5hcHAuc2NlbmUucmVuZGVyKCk7XG4gICAgICB0aGlzLmZpZWxkLnVwZGF0ZShkZWx0YSoxMDAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEZwc0NvdW50ZXIoKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlLmlubmVySFRNTCA9IGBcbiAgICAgICNmcHMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIG1hcmdpbjogMTBweDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgIH1cbiAgICAgIGA7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgLy8gRlBTIENPVU5URVJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImZwc1wiKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnNjZW5laWQpLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmFwcCkge1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IFwiRlBTOiBcIiArIFN0cmluZyhNYXRoLmZsb29yKHRoaXMuYXBwLnRpY2tlci5GUFMpKTtcbiAgICAgIH1cbiAgICB9LCAxMDAwKTtcbiAgfVxuXG4gIGFkZFJlc2l6ZXMoKSB7XG4gICAgY29uc3QgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIGAke3ZofXB4YCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHZoID0gd2luZG93LmlubmVySGVpZ2h0ICogMC4wMTtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIGAke3ZofXB4YCk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRTdHlsZVRhZ3MoKSB7XG4gICAgLy8gYWRkIHN0eWxlIHRhZ3NcbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUuaW5uZXJIVE1MID0gYFxuICAgICAgIyR7dGhpcy5zY2VuZWlkfSB7XG4gICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgIGhlaWdodDogY2FsYygxMDAgKiB2YXIoLS12aCkpO1xuICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB6LWluZGV4OiAtMTA7XG4gICAgICB9XG4gICAgICBgO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./flowlines/FlowLines.js\n");

/***/ }),

/***/ "./flowlines/Vector.js":
/*!*****************************!*\
  !*** ./flowlines/Vector.js ***!
  \*****************************/
/*! exports provided: Vec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vec2\", function() { return Vec2; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n\n\nvar Vec2 = /*#__PURE__*/function () {\n  function Vec2(x, y) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Vec2);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Vec2, [{\n    key: \"add\",\n    value: function add(vec) {\n      this.x += vec.x;\n      this.y += vec.y;\n      return this;\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(num) {\n      this.x *= num;\n      this.y *= num;\n      return this;\n    }\n  }, {\n    key: \"div\",\n    value: function div(n) {\n      this.x /= n;\n      this.y /= n;\n      return this;\n    }\n  }, {\n    key: \"mag\",\n    value: function mag() {\n      return Math.sqrt(this.magSq());\n    }\n  }, {\n    key: \"magSq\",\n    value: function magSq() {\n      var x = this.x,\n          y = this.y;\n      return x * x + y * y;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(l) {\n      var mSq = this.magSq();\n\n      if (mSq > l * l) {\n        this.div(Math.sqrt(mSq));\n        this.multiply(l);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      return this.div(this.mag());\n    }\n  }, {\n    key: \"setMag\",\n    value: function setMag(n) {\n      return this.normalize().multiply(n);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vec2(this.x, this.y);\n    }\n  }]);\n\n  return Vec2;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmxvd2xpbmVzL1ZlY3Rvci5qcz83N2ViIl0sIm5hbWVzIjpbIlZlYzIiLCJ4IiwieSIsInZlYyIsIm51bSIsIm4iLCJNYXRoIiwic3FydCIsIm1hZ1NxIiwibCIsIm1TcSIsImRpdiIsIm11bHRpcGx5IiwibWFnIiwibm9ybWFsaXplIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFNQSxJQUFiO0FBQ0UsZ0JBQVlDLENBQVosRUFBZUMsQ0FBZixFQUFrQjtBQUFBOztBQUNoQixTQUFLRCxDQUFMLEdBQVNBLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVNBLENBQVQ7QUFDRDs7QUFKSDtBQUFBO0FBQUEsd0JBS01DLEdBTE4sRUFLVztBQUNQLFdBQUtGLENBQUwsSUFBVUUsR0FBRyxDQUFDRixDQUFkO0FBQ0EsV0FBS0MsQ0FBTCxJQUFVQyxHQUFHLENBQUNELENBQWQ7QUFDQSxhQUFPLElBQVA7QUFDRDtBQVRIO0FBQUE7QUFBQSw2QkFVV0UsR0FWWCxFQVVnQjtBQUNaLFdBQUtILENBQUwsSUFBVUcsR0FBVjtBQUNBLFdBQUtGLENBQUwsSUFBVUUsR0FBVjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBZEg7QUFBQTtBQUFBLHdCQWVNQyxDQWZOLEVBZVM7QUFDTCxXQUFLSixDQUFMLElBQVVJLENBQVY7QUFDQSxXQUFLSCxDQUFMLElBQVVHLENBQVY7QUFDQSxhQUFPLElBQVA7QUFDRDtBQW5CSDtBQUFBO0FBQUEsMEJBb0JRO0FBQ0osYUFBT0MsSUFBSSxDQUFDQyxJQUFMLENBQVUsS0FBS0MsS0FBTCxFQUFWLENBQVA7QUFDRDtBQXRCSDtBQUFBO0FBQUEsNEJBdUJVO0FBQ04sVUFBSVAsQ0FBQyxHQUFHLEtBQUtBLENBQWI7QUFBQSxVQUFnQkMsQ0FBQyxHQUFHLEtBQUtBLENBQXpCO0FBQ0EsYUFBT0QsQ0FBQyxHQUFHQSxDQUFKLEdBQVFDLENBQUMsR0FBR0EsQ0FBbkI7QUFDRDtBQTFCSDtBQUFBO0FBQUEsMEJBMkJRTyxDQTNCUixFQTJCVztBQUNQLFVBQUlDLEdBQUcsR0FBRyxLQUFLRixLQUFMLEVBQVY7O0FBQ0EsVUFBR0UsR0FBRyxHQUFHRCxDQUFDLEdBQUNBLENBQVgsRUFBYztBQUNaLGFBQUtFLEdBQUwsQ0FBU0wsSUFBSSxDQUFDQyxJQUFMLENBQVVHLEdBQVYsQ0FBVDtBQUNBLGFBQUtFLFFBQUwsQ0FBY0gsQ0FBZDtBQUNEOztBQUNELGFBQU8sSUFBUDtBQUNEO0FBbENIO0FBQUE7QUFBQSxnQ0FtQ2M7QUFDVixhQUFPLEtBQUtFLEdBQUwsQ0FBUyxLQUFLRSxHQUFMLEVBQVQsQ0FBUDtBQUNEO0FBckNIO0FBQUE7QUFBQSwyQkFzQ1NSLENBdENULEVBc0NZO0FBQ1IsYUFBTyxLQUFLUyxTQUFMLEdBQWlCRixRQUFqQixDQUEwQlAsQ0FBMUIsQ0FBUDtBQUNEO0FBeENIO0FBQUE7QUFBQSw0QkF5Q1U7QUFDTixhQUFPLElBQUlMLElBQUosQ0FBUyxLQUFLQyxDQUFkLEVBQWlCLEtBQUtDLENBQXRCLENBQVA7QUFDRDtBQTNDSDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vZmxvd2xpbmVzL1ZlY3Rvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBWZWMyIHtcbiAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuICBhZGQodmVjKSB7XG4gICAgdGhpcy54ICs9IHZlYy54O1xuICAgIHRoaXMueSArPSB2ZWMueTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBtdWx0aXBseShudW0pIHtcbiAgICB0aGlzLnggKj0gbnVtO1xuICAgIHRoaXMueSAqPSBudW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGl2KG4pIHtcbiAgICB0aGlzLnggLz0gbjtcbiAgICB0aGlzLnkgLz0gbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBtYWcoKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLm1hZ1NxKCkpO1xuICB9XG4gIG1hZ1NxKCkge1xuICAgIGxldCB4ID0gdGhpcy54LCB5ID0gdGhpcy55O1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5O1xuICB9IFxuICBsaW1pdChsKSB7XG4gICAgdmFyIG1TcSA9IHRoaXMubWFnU3EoKTtcbiAgICBpZihtU3EgPiBsKmwpIHtcbiAgICAgIHRoaXMuZGl2KE1hdGguc3FydChtU3EpKTtcbiAgICAgIHRoaXMubXVsdGlwbHkobCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5vcm1hbGl6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXYodGhpcy5tYWcoKSk7XG4gIH1cbiAgc2V0TWFnKG4pIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseShuKTtcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFZlYzIodGhpcy54LCB0aGlzLnkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./flowlines/Vector.js\n");

/***/ }),

/***/ "./flowlines/color.js":
/*!****************************!*\
  !*** ./flowlines/color.js ***!
  \****************************/
/*! exports provided: makeColorGradient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeColorGradient\", function() { return makeColorGradient; });\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valo.js */ \"../valo.js/build/valo.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(valo_js__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction makeColorGradient(i, frequency1, frequency2, frequency3, phase1, phase2, phase3, center, width, len) {\n  if (frequency1 == undefined) frequency1 = .3;\n  if (frequency2 == undefined) frequency2 = .3;\n  if (frequency3 == undefined) frequency3 = .3;\n  if (phase1 == undefined) phase1 = 0;\n  if (phase2 == undefined) phase2 = 2;\n  if (phase3 == undefined) phase3 = 4;\n  if (center == undefined) center = 128;\n  if (width == undefined) width = 127;\n  if (len == undefined) len = 50;\n  var red = Math.sin(frequency1 * i + phase1) * width + center;\n  var grn = Math.sin(frequency2 * i + phase2) * width + center;\n  var blu = Math.sin(frequency3 * i + phase3) * width + center;\n  return new valo_js__WEBPACK_IMPORTED_MODULE_0__[\"VALO2D\"].Color(red / 256, grn / 256, blu / 256);\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmxvd2xpbmVzL2NvbG9yLmpzPzNlNTciXSwibmFtZXMiOlsibWFrZUNvbG9yR3JhZGllbnQiLCJpIiwiZnJlcXVlbmN5MSIsImZyZXF1ZW5jeTIiLCJmcmVxdWVuY3kzIiwicGhhc2UxIiwicGhhc2UyIiwicGhhc2UzIiwiY2VudGVyIiwid2lkdGgiLCJsZW4iLCJ1bmRlZmluZWQiLCJyZWQiLCJNYXRoIiwic2luIiwiZ3JuIiwiYmx1IiwiVkFMTzJEIiwiQ29sb3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFTyxTQUFTQSxpQkFBVCxDQUEyQkMsQ0FBM0IsRUFDTEMsVUFESyxFQUNPQyxVQURQLEVBQ21CQyxVQURuQixFQUVMQyxNQUZLLEVBRUdDLE1BRkgsRUFFV0MsTUFGWCxFQUdMQyxNQUhLLEVBR0dDLEtBSEgsRUFHVUMsR0FIVixFQUdlO0FBRXBCLE1BQUlSLFVBQVUsSUFBSVMsU0FBbEIsRUFBNkJULFVBQVUsR0FBRyxFQUFiO0FBQzdCLE1BQUlDLFVBQVUsSUFBSVEsU0FBbEIsRUFBNkJSLFVBQVUsR0FBRyxFQUFiO0FBQzdCLE1BQUlDLFVBQVUsSUFBSU8sU0FBbEIsRUFBNkJQLFVBQVUsR0FBRyxFQUFiO0FBRTdCLE1BQUlDLE1BQU0sSUFBSU0sU0FBZCxFQUF5Qk4sTUFBTSxHQUFHLENBQVQ7QUFDekIsTUFBSUMsTUFBTSxJQUFJSyxTQUFkLEVBQXlCTCxNQUFNLEdBQUcsQ0FBVDtBQUN6QixNQUFJQyxNQUFNLElBQUlJLFNBQWQsRUFBeUJKLE1BQU0sR0FBRyxDQUFUO0FBRXpCLE1BQUlDLE1BQU0sSUFBSUcsU0FBZCxFQUEyQkgsTUFBTSxHQUFHLEdBQVQ7QUFDM0IsTUFBSUMsS0FBSyxJQUFJRSxTQUFiLEVBQTJCRixLQUFLLEdBQUcsR0FBUjtBQUMzQixNQUFJQyxHQUFHLElBQUlDLFNBQVgsRUFBMkJELEdBQUcsR0FBRyxFQUFOO0FBRTNCLE1BQU1FLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNaLFVBQVUsR0FBQ0QsQ0FBWCxHQUFlSSxNQUF4QixJQUFrQ0ksS0FBbEMsR0FBMENELE1BQXREO0FBQ0EsTUFBTU8sR0FBRyxHQUFHRixJQUFJLENBQUNDLEdBQUwsQ0FBU1gsVUFBVSxHQUFDRixDQUFYLEdBQWVLLE1BQXhCLElBQWtDRyxLQUFsQyxHQUEwQ0QsTUFBdEQ7QUFDQSxNQUFNUSxHQUFHLEdBQUdILElBQUksQ0FBQ0MsR0FBTCxDQUFTVixVQUFVLEdBQUNILENBQVgsR0FBZU0sTUFBeEIsSUFBa0NFLEtBQWxDLEdBQTBDRCxNQUF0RDtBQUVBLFNBQU8sSUFBSVMsOENBQU0sQ0FBQ0MsS0FBWCxDQUFpQk4sR0FBRyxHQUFDLEdBQXJCLEVBQTBCRyxHQUFHLEdBQUMsR0FBOUIsRUFBbUNDLEdBQUcsR0FBQyxHQUF2QyxDQUFQO0FBQ0QiLCJmaWxlIjoiLi9mbG93bGluZXMvY29sb3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWQUxPMkQgfSBmcm9tIFwidmFsby5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUNvbG9yR3JhZGllbnQoaSxcbiAgZnJlcXVlbmN5MSwgZnJlcXVlbmN5MiwgZnJlcXVlbmN5MyxcbiAgcGhhc2UxLCBwaGFzZTIsIHBoYXNlMyxcbiAgY2VudGVyLCB3aWR0aCwgbGVuKSB7XG4gIFxuICBpZiAoZnJlcXVlbmN5MSA9PSB1bmRlZmluZWQpIGZyZXF1ZW5jeTEgPSAuMztcbiAgaWYgKGZyZXF1ZW5jeTIgPT0gdW5kZWZpbmVkKSBmcmVxdWVuY3kyID0gLjM7XG4gIGlmIChmcmVxdWVuY3kzID09IHVuZGVmaW5lZCkgZnJlcXVlbmN5MyA9IC4zO1xuXG4gIGlmIChwaGFzZTEgPT0gdW5kZWZpbmVkKSBwaGFzZTEgPSAwO1xuICBpZiAocGhhc2UyID09IHVuZGVmaW5lZCkgcGhhc2UyID0gMjtcbiAgaWYgKHBoYXNlMyA9PSB1bmRlZmluZWQpIHBoYXNlMyA9IDQ7XG5cbiAgaWYgKGNlbnRlciA9PSB1bmRlZmluZWQpICAgY2VudGVyID0gMTI4O1xuICBpZiAod2lkdGggPT0gdW5kZWZpbmVkKSAgICB3aWR0aCA9IDEyNztcbiAgaWYgKGxlbiA9PSB1bmRlZmluZWQpICAgICAgbGVuID0gNTA7XG5cbiAgY29uc3QgcmVkID0gTWF0aC5zaW4oZnJlcXVlbmN5MSppICsgcGhhc2UxKSAqIHdpZHRoICsgY2VudGVyO1xuICBjb25zdCBncm4gPSBNYXRoLnNpbihmcmVxdWVuY3kyKmkgKyBwaGFzZTIpICogd2lkdGggKyBjZW50ZXI7XG4gIGNvbnN0IGJsdSA9IE1hdGguc2luKGZyZXF1ZW5jeTMqaSArIHBoYXNlMykgKiB3aWR0aCArIGNlbnRlcjtcblxuICByZXR1cm4gbmV3IFZBTE8yRC5Db2xvcihyZWQvMjU2LCBncm4vMjU2LCBibHUvMjU2KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./flowlines/color.js\n");

/***/ }),

/***/ "./flowlines/particle.js":
/*!*******************************!*\
  !*** ./flowlines/particle.js ***!
  \*******************************/
/*! exports provided: Particle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Particle\", function() { return Particle; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector */ \"./flowlines/Vector.js\");\n\n\n\nvar Particle = /*#__PURE__*/function () {\n  function Particle(field, containerVec, tileSize) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Particle);\n\n    this.field = field;\n    this.container = containerVec;\n    this.tileSize = tileSize;\n    this.radius = 2;\n    this.pos = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"Vec2\"](Math.floor(Math.random() * this.container.x), Math.floor(Math.random() * this.container.y));\n    this.prevPos = null;\n    this.vel = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"Vec2\"](0, 0);\n    this.acc = new _Vector__WEBPACK_IMPORTED_MODULE_2__[\"Vec2\"](0, 0);\n    this.lifetime = 0;\n  }\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Particle, [{\n    key: \"update\",\n    value: function update(delta) {\n      this.vel.add(this.acc.multiply(delta * 0.2));\n      this.vel.limit(this.field.particleMaxSpeed);\n      this.prevPos = this.pos.clone();\n      this.pos.add(this.vel);\n      this.acc.multiply(0);\n      this.lifetime++;\n    }\n  }, {\n    key: \"follow\",\n    value: function follow(flowField) {\n      var x = Math.floor(this.pos.x / this.tileSize);\n      var y = Math.floor(this.pos.y / this.tileSize);\n      var index = x + y * Math.ceil(this.container.x / this.tileSize);\n\n      if (flowField[index]) {\n        var vec = flowField[index].vec;\n        this.applyForce(vec);\n      }\n    }\n  }, {\n    key: \"applyForce\",\n    value: function applyForce(vec) {\n      this.acc.add(vec.setMag(this.field.flowStrength));\n    }\n  }, {\n    key: \"checkEdges\",\n    value: function checkEdges() {\n      if (this.pos.x > this.container.x) this.pos.x = 0, this.prevPos = null;\n      if (this.pos.x < 0) this.pos.x = this.container.x, this.prevPos = null;\n      if (this.pos.y > this.container.y) this.pos.y = 0, this.prevPos = null;\n      if (this.pos.y < 0) this.pos.y = this.container.y, this.prevPos = null;\n    }\n  }]);\n\n  return Particle;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmxvd2xpbmVzL3BhcnRpY2xlLmpzPzI5OTYiXSwibmFtZXMiOlsiUGFydGljbGUiLCJmaWVsZCIsImNvbnRhaW5lclZlYyIsInRpbGVTaXplIiwiY29udGFpbmVyIiwicmFkaXVzIiwicG9zIiwiVmVjMiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIngiLCJ5IiwicHJldlBvcyIsInZlbCIsImFjYyIsImxpZmV0aW1lIiwiZGVsdGEiLCJhZGQiLCJtdWx0aXBseSIsImxpbWl0IiwicGFydGljbGVNYXhTcGVlZCIsImNsb25lIiwiZmxvd0ZpZWxkIiwiaW5kZXgiLCJjZWlsIiwidmVjIiwiYXBwbHlGb3JjZSIsInNldE1hZyIsImZsb3dTdHJlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBRU8sSUFBTUEsUUFBYjtBQUNFLG9CQUFZQyxLQUFaLEVBQW1CQyxZQUFuQixFQUFpQ0MsUUFBakMsRUFBMkM7QUFBQTs7QUFDekMsU0FBS0YsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0csU0FBTCxHQUFpQkYsWUFBakI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtFLE1BQUwsR0FBYyxDQUFkO0FBQ0EsU0FBS0MsR0FBTCxHQUFXLElBQUlDLDRDQUFKLENBQVNDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0IsS0FBS04sU0FBTCxDQUFlTyxDQUExQyxDQUFULEVBQXVESCxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLEtBQUtOLFNBQUwsQ0FBZVEsQ0FBMUMsQ0FBdkQsQ0FBWDtBQUNBLFNBQUtDLE9BQUwsR0FBZSxJQUFmO0FBQ0EsU0FBS0MsR0FBTCxHQUFXLElBQUlQLDRDQUFKLENBQVMsQ0FBVCxFQUFZLENBQVosQ0FBWDtBQUNBLFNBQUtRLEdBQUwsR0FBVyxJQUFJUiw0Q0FBSixDQUFTLENBQVQsRUFBWSxDQUFaLENBQVg7QUFDQSxTQUFLUyxRQUFMLEdBQWdCLENBQWhCO0FBQ0Q7O0FBWEg7QUFBQTtBQUFBLDJCQWFTQyxLQWJULEVBYWdCO0FBQ1osV0FBS0gsR0FBTCxDQUFTSSxHQUFULENBQWEsS0FBS0gsR0FBTCxDQUFTSSxRQUFULENBQWtCRixLQUFLLEdBQUcsR0FBMUIsQ0FBYjtBQUNBLFdBQUtILEdBQUwsQ0FBU00sS0FBVCxDQUFlLEtBQUtuQixLQUFMLENBQVdvQixnQkFBMUI7QUFDQSxXQUFLUixPQUFMLEdBQWUsS0FBS1AsR0FBTCxDQUFTZ0IsS0FBVCxFQUFmO0FBQ0EsV0FBS2hCLEdBQUwsQ0FBU1ksR0FBVCxDQUFhLEtBQUtKLEdBQWxCO0FBQ0EsV0FBS0MsR0FBTCxDQUFTSSxRQUFULENBQWtCLENBQWxCO0FBQ0EsV0FBS0gsUUFBTDtBQUNEO0FBcEJIO0FBQUE7QUFBQSwyQkFzQlNPLFNBdEJULEVBc0JvQjtBQUNoQixVQUFNWixDQUFDLEdBQUdILElBQUksQ0FBQ0MsS0FBTCxDQUFXLEtBQUtILEdBQUwsQ0FBU0ssQ0FBVCxHQUFhLEtBQUtSLFFBQTdCLENBQVY7QUFDQSxVQUFNUyxDQUFDLEdBQUdKLElBQUksQ0FBQ0MsS0FBTCxDQUFXLEtBQUtILEdBQUwsQ0FBU00sQ0FBVCxHQUFhLEtBQUtULFFBQTdCLENBQVY7QUFDQSxVQUFNcUIsS0FBSyxHQUFHYixDQUFDLEdBQUdDLENBQUMsR0FBR0osSUFBSSxDQUFDaUIsSUFBTCxDQUFVLEtBQUtyQixTQUFMLENBQWVPLENBQWYsR0FBbUIsS0FBS1IsUUFBbEMsQ0FBdEI7O0FBQ0EsVUFBSW9CLFNBQVMsQ0FBQ0MsS0FBRCxDQUFiLEVBQXNCO0FBQ3BCLFlBQU1FLEdBQUcsR0FBR0gsU0FBUyxDQUFDQyxLQUFELENBQVQsQ0FBaUJFLEdBQTdCO0FBQ0EsYUFBS0MsVUFBTCxDQUFnQkQsR0FBaEI7QUFDRDtBQUNGO0FBOUJIO0FBQUE7QUFBQSwrQkFnQ2FBLEdBaENiLEVBZ0NrQjtBQUNkLFdBQUtYLEdBQUwsQ0FBU0csR0FBVCxDQUFhUSxHQUFHLENBQUNFLE1BQUosQ0FBVyxLQUFLM0IsS0FBTCxDQUFXNEIsWUFBdEIsQ0FBYjtBQUNEO0FBbENIO0FBQUE7QUFBQSxpQ0FvQ2U7QUFDWCxVQUFJLEtBQUt2QixHQUFMLENBQVNLLENBQVQsR0FBYSxLQUFLUCxTQUFMLENBQWVPLENBQWhDLEVBQW1DLEtBQUtMLEdBQUwsQ0FBU0ssQ0FBVCxHQUFhLENBQWIsRUFBZ0IsS0FBS0UsT0FBTCxHQUFlLElBQS9CO0FBQ25DLFVBQUksS0FBS1AsR0FBTCxDQUFTSyxDQUFULEdBQWEsQ0FBakIsRUFBb0IsS0FBS0wsR0FBTCxDQUFTSyxDQUFULEdBQWEsS0FBS1AsU0FBTCxDQUFlTyxDQUE1QixFQUErQixLQUFLRSxPQUFMLEdBQWUsSUFBOUM7QUFDcEIsVUFBSSxLQUFLUCxHQUFMLENBQVNNLENBQVQsR0FBYSxLQUFLUixTQUFMLENBQWVRLENBQWhDLEVBQW1DLEtBQUtOLEdBQUwsQ0FBU00sQ0FBVCxHQUFhLENBQWIsRUFBZ0IsS0FBS0MsT0FBTCxHQUFlLElBQS9CO0FBQ25DLFVBQUksS0FBS1AsR0FBTCxDQUFTTSxDQUFULEdBQWEsQ0FBakIsRUFBb0IsS0FBS04sR0FBTCxDQUFTTSxDQUFULEdBQWEsS0FBS1IsU0FBTCxDQUFlUSxDQUE1QixFQUErQixLQUFLQyxPQUFMLEdBQWUsSUFBOUM7QUFDckI7QUF6Q0g7O0FBQUE7QUFBQSIsImZpbGUiOiIuL2Zsb3dsaW5lcy9wYXJ0aWNsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlYzIgfSBmcm9tICcuL1ZlY3Rvcic7XG5cbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZSB7XG4gIGNvbnN0cnVjdG9yKGZpZWxkLCBjb250YWluZXJWZWMsIHRpbGVTaXplKSB7XG4gICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyVmVjO1xuICAgIHRoaXMudGlsZVNpemUgPSB0aWxlU2l6ZTtcbiAgICB0aGlzLnJhZGl1cyA9IDI7XG4gICAgdGhpcy5wb3MgPSBuZXcgVmVjMihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmNvbnRhaW5lci54KSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5jb250YWluZXIueSkpO1xuICAgIHRoaXMucHJldlBvcyA9IG51bGw7XG4gICAgdGhpcy52ZWwgPSBuZXcgVmVjMigwLCAwKTtcbiAgICB0aGlzLmFjYyA9IG5ldyBWZWMyKDAsIDApO1xuICAgIHRoaXMubGlmZXRpbWUgPSAwO1xuICB9XG5cbiAgdXBkYXRlKGRlbHRhKSB7XG4gICAgdGhpcy52ZWwuYWRkKHRoaXMuYWNjLm11bHRpcGx5KGRlbHRhICogMC4yKSk7XG4gICAgdGhpcy52ZWwubGltaXQodGhpcy5maWVsZC5wYXJ0aWNsZU1heFNwZWVkKTtcbiAgICB0aGlzLnByZXZQb3MgPSB0aGlzLnBvcy5jbG9uZSgpO1xuICAgIHRoaXMucG9zLmFkZCh0aGlzLnZlbCk7XG4gICAgdGhpcy5hY2MubXVsdGlwbHkoMCk7XG4gICAgdGhpcy5saWZldGltZSsrO1xuICB9XG5cbiAgZm9sbG93KGZsb3dGaWVsZCkge1xuICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKHRoaXMucG9zLnggLyB0aGlzLnRpbGVTaXplKTtcbiAgICBjb25zdCB5ID0gTWF0aC5mbG9vcih0aGlzLnBvcy55IC8gdGhpcy50aWxlU2l6ZSk7XG4gICAgY29uc3QgaW5kZXggPSB4ICsgeSAqIE1hdGguY2VpbCh0aGlzLmNvbnRhaW5lci54IC8gdGhpcy50aWxlU2l6ZSk7XG4gICAgaWYgKGZsb3dGaWVsZFtpbmRleF0pIHtcbiAgICAgIGNvbnN0IHZlYyA9IGZsb3dGaWVsZFtpbmRleF0udmVjO1xuICAgICAgdGhpcy5hcHBseUZvcmNlKHZlYyk7XG4gICAgfVxuICB9XG5cbiAgYXBwbHlGb3JjZSh2ZWMpIHtcbiAgICB0aGlzLmFjYy5hZGQodmVjLnNldE1hZyh0aGlzLmZpZWxkLmZsb3dTdHJlbmd0aCkpO1xuICB9XG5cbiAgY2hlY2tFZGdlcygpIHtcbiAgICBpZiAodGhpcy5wb3MueCA+IHRoaXMuY29udGFpbmVyLngpIHRoaXMucG9zLnggPSAwLCB0aGlzLnByZXZQb3MgPSBudWxsO1xuICAgIGlmICh0aGlzLnBvcy54IDwgMCkgdGhpcy5wb3MueCA9IHRoaXMuY29udGFpbmVyLngsIHRoaXMucHJldlBvcyA9IG51bGw7XG4gICAgaWYgKHRoaXMucG9zLnkgPiB0aGlzLmNvbnRhaW5lci55KSB0aGlzLnBvcy55ID0gMCwgdGhpcy5wcmV2UG9zID0gbnVsbDtcbiAgICBpZiAodGhpcy5wb3MueSA8IDApIHRoaXMucG9zLnkgPSB0aGlzLmNvbnRhaW5lci55LCB0aGlzLnByZXZQb3MgPSBudWxsO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./flowlines/particle.js\n");

/***/ }),

/***/ "./flowlines/perlin.js":
/*!*****************************!*\
  !*** ./flowlines/perlin.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n(function (global) {\n  var module = global.noise = {};\n\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Grad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n  };\n\n  Grad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  };\n\n  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n  var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\n  var perm = new Array(512);\n  var gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n\n  module.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v;\n\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n  var F3 = 1 / 3;\n  var G3 = 1 / 6; // 2D simplex noise\n\n  module.simplex2 = function (xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70 * (n0 + n1 + n2);\n  }; // 3D simplex noise\n\n\n  module.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t;\n    var z0 = zin - k + t; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]]; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 32 * (n0 + n1 + n2 + n3);\n  }; // ##### Perlin noise stuff\n\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  } // 2D Perlin Noise\n\n\n  module.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255; // Calculate noise contributions from each of the four corners\n\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1); // Compute the fade curve value for x\n\n    var u = fade(x); // Interpolate the four results\n\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  }; // 3D Perlin Noise\n\n\n  module.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y),\n        Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y;\n    z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255; // Calculate noise contributions from each of the eight corners\n\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1); // Compute the fade curve value for x, y, z\n\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z); // Interpolate\n\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n})(this);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./flowlines/perlin.js\n");

/***/ }),

/***/ "./fluidsim/FluidSim.js":
/*!******************************!*\
  !*** ./fluidsim/FluidSim.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FluidSim; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! valo.js */ \"../valo.js/build/valo.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(valo_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Grid */ \"./fluidsim/Grid.js\");\n\n\n\n\n/**\n * A fluid simulation object\n */\n\nvar FluidSim = /*#__PURE__*/function () {\n  function FluidSim(divID, options) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, FluidSim);\n\n    this.divID = divID;\n    this.options = options || {}; // must be atleast an empty object\n\n    this.app;\n    this.grid;\n  }\n  /**\n   * Creates the application\n   */\n\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(FluidSim, [{\n    key: \"create\",\n    value: function create() {\n      this.app = new valo_js__WEBPACK_IMPORTED_MODULE_2__[\"VALO2D\"](this.divID, {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        fullScreen: true,\n        autoResize: true,\n        clearBeforeRender: true,\n        preserveDrawingBuffer: false,\n        transparent: false\n      });\n      this.grid = new _Grid__WEBPACK_IMPORTED_MODULE_3__[\"Grid\"](this.app, this.options);\n      this.createScene(this.sceneid);\n    }\n  }, {\n    key: \"destroy\",\n\n    /**\n     * Destroys the simultion\n     */\n    value: function destroy() {\n      this.app.destroy();\n      this.grid.destroy();\n      this.app = null;\n      this.grid = null; // delete pointer events\n\n      document.onpointermove = null;\n      document.onpointerleave = null;\n      document.onmpointerdown = null;\n      document.onpointerup = null;\n    }\n    /**\n     * Starts the rendering\n     */\n\n  }, {\n    key: \"createScene\",\n    value: function createScene() {\n      var _this = this;\n\n      this.app.renderer.runRenderLoop(function (delta) {\n        _this.app.scene.render();\n\n        _this.grid.update(delta);\n      });\n    }\n    /**\n     * Adds a visual frames per second counter\n     */\n\n  }, {\n    key: \"addFpsCounter\",\n    value: function addFpsCounter() {\n      var _this2 = this;\n\n      var style = document.createElement('style');\n      style.innerHTML = \"\\n      #fps {\\n        position: absolute;\\n        margin: 10px;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      \";\n      document.head.appendChild(style); // FPS COUNTER\n\n      var element = document.createElement(\"p\");\n      element.setAttribute(\"id\", \"fps\");\n      document.getElementById(this.sceneid).appendChild(element);\n      setInterval(function () {\n        if (_this2.app) {\n          element.innerHTML = \"FPS: \" + String(Math.floor(_this2.app.renderer.frameRate));\n        }\n      }, 1000);\n    }\n    /**\n     * Adds all the needed resizes to the application\n     * \n     * TODO: test that everything works properly\n     */\n\n  }, {\n    key: \"addResizes\",\n    value: function addResizes() {\n      this.addEngineResize();\n      var vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n      window.addEventListener('resize', function () {\n        var vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n      });\n    }\n    /**\n     * Adds reszise to the renderer\n     * \n     * TODO: make sure there is no better way\n     */\n\n  }, {\n    key: \"addEngineResize\",\n    value: function addEngineResize() {\n      var _this3 = this;\n\n      window.onresize = function (event) {\n        var w = window.innerWidth;\n        var h = window.innerHeight;\n        _this3.app.canvas.width = w;\n        _this3.app.canvas.height = h;\n      };\n    }\n    /**\n     * Adds a style sheet in document head\n     * \n     * TODO: see if necessary\n     */\n\n  }, {\n    key: \"addStyleTags\",\n    value: function addStyleTags() {\n      // add style tags\n      var style = document.createElement('style');\n      style.innerHTML = \"\\n      #\".concat(this.sceneid, \" {\\n        height: 100vh;\\n        height: calc(100 * var(--vh));\\n        width: 100vw;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        overflow: hidden;\\n        z-index: -10;\\n      }\\n      \");\n      document.head.appendChild(style);\n    }\n  }]);\n\n  return FluidSim;\n}();\n\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./fluidsim/FluidSim.js\n");

/***/ }),

/***/ "./fluidsim/Grid.js":
/*!**************************!*\
  !*** ./fluidsim/Grid.js ***!
  \**************************/
/*! exports provided: Grid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Grid\", function() { return Grid; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! valo.js */ \"../valo.js/build/valo.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(valo_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./fluidsim/utils.js\");\n\n\n\n\n/**\n * Grid object for fluid simulation\n */\n\nvar Grid = /*#__PURE__*/function () {\n  function Grid(app, options) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Grid);\n\n    this.app = app; // initial options that gets filled with parameter\n\n    this.options = Object.assign({\n      dt: 0.001,\n      diffusion: 0.0001,\n      viscosity: 0.0000001\n    }, options); // for pathfindig\n\n    this.tileSize = 5; // dimentions\n\n    this.W = Math.ceil(this.app.canvas.width / this.tileSize);\n    this.H = Math.ceil(this.app.canvas.height / this.tileSize); // time step\n\n    this.dt = this.options.dt; // fluid properties\n\n    this.diff = this.options.diffusion;\n    this.visc = this.options.viscosity;\n    this.s = new Array(this.W * this.H).fill(0);\n    this.density = new Array(this.W * this.H).fill(0); // current velocities\n\n    this.Vx = new Array(this.W * this.H).fill(0);\n    this.Vy = new Array(this.W * this.H).fill(0); // previous velocities\n\n    this.Vx0 = new Array(this.W * this.H).fill(0);\n    this.Vy0 = new Array(this.W * this.H).fill(0); // buffers\n\n    this.pointsBuffer = new Array(this.W * this.H * 2).fill(0);\n    this.colorsBuffer = new Array(this.W * this.H * 4).fill(0); // pointer object\n\n    this.pointer = {\n      update: true,\n      pos: new valo_js__WEBPACK_IMPORTED_MODULE_2__[\"VALO2D\"].Vec2(0, 0),\n      vel: new valo_js__WEBPACK_IMPORTED_MODULE_2__[\"VALO2D\"].Vec2(0, 0)\n    };\n    this.frameCount = 0;\n    this.init();\n  }\n  /**\n   * Initial unction\n   */\n\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Grid, [{\n    key: \"init\",\n    value: function init() {\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"setGlobalVariables\"])(this.W, this.H);\n      this.initPointerEvents(false);\n    }\n    /**\n     * Adds density for one block\n     * @param {number} x \n     * @param {number} y \n     * @param {number} amount \n     */\n\n  }, {\n    key: \"addDensity\",\n    value: function addDensity(x, y, amount) {\n      var i = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"I\"])(x, y);\n      this.density[i] += amount;\n    }\n    /**\n     * Adds velocity for one block\n     * @param {number} x \n     * @param {number} y \n     * @param {number} amountX \n     * @param {number} amountY \n     */\n\n  }, {\n    key: \"addVelocity\",\n    value: function addVelocity(x, y, amountX, amountY) {\n      var i = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"I\"])(x, y);\n      this.Vx[i] += amountX;\n      this.Vy[i] += amountY;\n    }\n    /**\n     * Moves simulation one timestep ahead\n     */\n\n  }, {\n    key: \"step\",\n    value: function step() {\n      var visc = this.visc;\n      var diff = this.diff;\n      var dt = this.dt;\n      var Vx = this.Vx;\n      var Vy = this.Vy;\n      var Vx0 = this.Vx0;\n      var Vy0 = this.Vy0;\n      var s = this.s;\n      var density = this.density;\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"diffuse\"])(1, Vx0, Vx, visc, dt);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"diffuse\"])(2, Vy0, Vy, visc, dt);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"project\"])(Vx0, Vy0, Vx, Vy);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"advect\"])(1, Vx, Vx0, Vx0, Vy0, dt);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"advect\"])(2, Vy, Vy0, Vx0, Vy0, dt);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"project\"])(Vx, Vy, Vx0, Vy0);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"diffuse\"])(0, s, density, diff, dt);\n      Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"advect\"])(0, density, s, Vx, Vy, dt);\n    }\n    /**\n     * Renders amount of density per block\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var points = this.pointsBuffer;\n      var colors = this.colorsBuffer;\n      var SCALE = this.tileSize;\n\n      for (var i = 0; i < this.W; i++) {\n        for (var j = 0; j < this.H; j++) {\n          var x = i * SCALE;\n          var y = j * SCALE;\n          var d = this.density[Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"I\"])(i, j)];\n          var c = Math.min(1.0, d / 256);\n          var idx = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"I\"])(i, j) * 2;\n          points[idx] = x - this.W * SCALE / 2 + SCALE / 2;\n          points[idx + 1] = y - this.H * SCALE / 2 + SCALE / 2; //points.push(x - this.W*SCALE/2 + SCALE/2, y - this.H*SCALE/2 + SCALE/2);\n\n          idx *= 2;\n          colors[idx] = 0;\n          colors[idx + 1] = c;\n          colors[idx + 2] = 0;\n          colors[idx + 3] = 1; //colors.push(0, c, 0, 1)\n        }\n      }\n\n      this.app.renderer.drawPoints(points, colors, this.tileSize);\n    }\n    /**\n     * Adds pointer event to the dom\n     * @param {boolean} clickingNeeded If in order to add density needs click\n     */\n\n  }, {\n    key: \"initPointerEvents\",\n    value: function initPointerEvents(clickingNeeded) {\n      var _this = this;\n\n      document.onpointermove = function (e) {\n        var x = e.clientX;\n        var y = e.clientY;\n\n        _this.updatePointer(x, y);\n      };\n\n      if (clickingNeeded) {\n        this.pointer.update = false;\n\n        document.onpointerleave = function () {\n          _this.pointer.update = false;\n        };\n\n        document.onmpointerdown = function () {\n          _this.pointer.update = true;\n        };\n\n        document.onpointerup = function () {\n          _this.pointer.update = false;\n        };\n      }\n    }\n    /**\n     * Updates the pointer data\n     * @param {number} x x-coordinate of the pointer\n     * @param {number} y y-coordinate of the pointer\n     */\n\n  }, {\n    key: \"updatePointer\",\n    value: function updatePointer(x, y) {\n      if (!this.pointer.update) return;\n\n      if (x >= 0 && y >= 0 && y < this.app.canvas.height && x < this.app.canvas.width) {\n        var vel = this.pointer.pos.negate().addInPlace(x, this.app.canvas.height - y);\n        this.pointer.vel = this.pointer.vel.add(vel);\n        this.pointer.vel.limit(this.tileSize * 15);\n        this.pointer.pos.x = x;\n        this.pointer.pos.y = this.app.canvas.height - y;\n      }\n    }\n  }, {\n    key: \"rgb\",\n    value: function rgb(r, g, b) {\n      return (r << 16) + (g << 8) + b;\n    }\n    /**\n     * Updates the simulation with one time step\n     * @param {number} delta The change in time\n     * \n     * TODO: Add density and velocity with a brush ( multiple points at the time )\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var mx = this.pointer.pos.x;\n      var my = this.pointer.pos.y;\n      var tileX = (mx - mx % this.tileSize) / this.tileSize;\n      var tileY = (my - my % this.tileSize) / this.tileSize; // adds velocity and density\n\n      this.addVelocityAndDensityWithBrush(tileX, tileY);\n\n      if (this.frameCount % 1 == 0) {\n        this.step();\n      }\n\n      this.render(); // if pointer stays still its velocity lovers\n\n      this.pointer.vel.multiply(0.8);\n      this.frameCount++;\n    }\n    /**\n     * Adds velocyty and density in multiple blocks at the time\n     * @param {number} x \n     * @param {number} y \n     */\n\n  }, {\n    key: \"addVelocityAndDensityWithBrush\",\n    value: function addVelocityAndDensityWithBrush(x, y) {\n      var vel = this.pointer.vel.mag() * 30;\n      var dx = this.pointer.vel.x;\n      var dy = this.pointer.vel.y;\n\n      if (x > 0) {\n        this.addDensity(x - 1, y, vel);\n        this.addVelocity(x - 1, y, dx, dy);\n      }\n\n      if (y > 0) {\n        this.addDensity(x, y - 1, vel);\n        this.addVelocity(x, y - 1, dx, dy);\n      }\n\n      if (x < this.W) {\n        this.addDensity(x + 1, y, vel);\n        this.addVelocity(x + 1, y, dx, dy);\n      }\n\n      if (y < this.H) {\n        this.addDensity(x, y + 1, vel);\n        this.addVelocity(x, y + 1, dx, dy);\n      }\n    }\n    /**\n     * Destroys the Grid and frees memory\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.app = null;\n      this.options = null;\n      this.s = null;\n      this.density = null;\n      this.Vx = null;\n      this.Vy = null;\n      this.Vx0 = null;\n      this.Vy0 = null;\n      this.pointsBuffer = null;\n      this.colorsBuffer = null;\n      this.pointer = null;\n    }\n  }]);\n\n  return Grid;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmx1aWRzaW0vR3JpZC5qcz83NjU5Il0sIm5hbWVzIjpbIkdyaWQiLCJhcHAiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZHQiLCJkaWZmdXNpb24iLCJ2aXNjb3NpdHkiLCJ0aWxlU2l6ZSIsIlciLCJNYXRoIiwiY2VpbCIsImNhbnZhcyIsIndpZHRoIiwiSCIsImhlaWdodCIsImRpZmYiLCJ2aXNjIiwicyIsIkFycmF5IiwiZmlsbCIsImRlbnNpdHkiLCJWeCIsIlZ5IiwiVngwIiwiVnkwIiwicG9pbnRzQnVmZmVyIiwiY29sb3JzQnVmZmVyIiwicG9pbnRlciIsInVwZGF0ZSIsInBvcyIsIlZBTE8yRCIsIlZlYzIiLCJ2ZWwiLCJmcmFtZUNvdW50IiwiaW5pdCIsInNldEdsb2JhbFZhcmlhYmxlcyIsImluaXRQb2ludGVyRXZlbnRzIiwieCIsInkiLCJhbW91bnQiLCJpIiwiSSIsImFtb3VudFgiLCJhbW91bnRZIiwiZGlmZnVzZSIsInByb2plY3QiLCJhZHZlY3QiLCJwb2ludHMiLCJjb2xvcnMiLCJTQ0FMRSIsImoiLCJkIiwiYyIsIm1pbiIsImlkeCIsInJlbmRlcmVyIiwiZHJhd1BvaW50cyIsImNsaWNraW5nTmVlZGVkIiwiZG9jdW1lbnQiLCJvbnBvaW50ZXJtb3ZlIiwiZSIsImNsaWVudFgiLCJjbGllbnRZIiwidXBkYXRlUG9pbnRlciIsIm9ucG9pbnRlcmxlYXZlIiwib25tcG9pbnRlcmRvd24iLCJvbnBvaW50ZXJ1cCIsIm5lZ2F0ZSIsImFkZEluUGxhY2UiLCJhZGQiLCJsaW1pdCIsInIiLCJnIiwiYiIsImRlbHRhIiwibXgiLCJteSIsInRpbGVYIiwidGlsZVkiLCJhZGRWZWxvY2l0eUFuZERlbnNpdHlXaXRoQnJ1c2giLCJzdGVwIiwicmVuZGVyIiwibXVsdGlwbHkiLCJtYWciLCJkeCIsImR5IiwiYWRkRGVuc2l0eSIsImFkZFZlbG9jaXR5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQUNPLElBQU1BLElBQWI7QUFDRSxnQkFBWUMsR0FBWixFQUFpQkMsT0FBakIsRUFBMEI7QUFBQTs7QUFDeEIsU0FBS0QsR0FBTCxHQUFXQSxHQUFYLENBRHdCLENBR3hCOztBQUNBLFNBQUtDLE9BQUwsR0FBZUMsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDM0JDLFFBQUUsRUFBRSxLQUR1QjtBQUUzQkMsZUFBUyxFQUFFLE1BRmdCO0FBRzNCQyxlQUFTLEVBQUU7QUFIZ0IsS0FBZCxFQUlaTCxPQUpZLENBQWYsQ0FKd0IsQ0FVeEI7O0FBQ0EsU0FBS00sUUFBTCxHQUFnQixDQUFoQixDQVh3QixDQWF4Qjs7QUFDQSxTQUFLQyxDQUFMLEdBQVNDLElBQUksQ0FBQ0MsSUFBTCxDQUFVLEtBQUtWLEdBQUwsQ0FBU1csTUFBVCxDQUFnQkMsS0FBaEIsR0FBd0IsS0FBS0wsUUFBdkMsQ0FBVDtBQUNBLFNBQUtNLENBQUwsR0FBU0osSUFBSSxDQUFDQyxJQUFMLENBQVUsS0FBS1YsR0FBTCxDQUFTVyxNQUFULENBQWdCRyxNQUFoQixHQUF5QixLQUFLUCxRQUF4QyxDQUFULENBZndCLENBaUJ4Qjs7QUFDQSxTQUFLSCxFQUFMLEdBQVUsS0FBS0gsT0FBTCxDQUFhRyxFQUF2QixDQWxCd0IsQ0FtQnhCOztBQUNBLFNBQUtXLElBQUwsR0FBWSxLQUFLZCxPQUFMLENBQWFJLFNBQXpCO0FBQ0EsU0FBS1csSUFBTCxHQUFZLEtBQUtmLE9BQUwsQ0FBYUssU0FBekI7QUFFQSxTQUFLVyxDQUFMLEdBQVMsSUFBSUMsS0FBSixDQUFVLEtBQUtWLENBQUwsR0FBTyxLQUFLSyxDQUF0QixFQUF5Qk0sSUFBekIsQ0FBOEIsQ0FBOUIsQ0FBVDtBQUNBLFNBQUtDLE9BQUwsR0FBZSxJQUFJRixLQUFKLENBQVUsS0FBS1YsQ0FBTCxHQUFPLEtBQUtLLENBQXRCLEVBQXlCTSxJQUF6QixDQUE4QixDQUE5QixDQUFmLENBeEJ3QixDQTBCeEI7O0FBQ0EsU0FBS0UsRUFBTCxHQUFVLElBQUlILEtBQUosQ0FBVSxLQUFLVixDQUFMLEdBQU8sS0FBS0ssQ0FBdEIsRUFBeUJNLElBQXpCLENBQThCLENBQTlCLENBQVY7QUFDQSxTQUFLRyxFQUFMLEdBQVUsSUFBSUosS0FBSixDQUFVLEtBQUtWLENBQUwsR0FBTyxLQUFLSyxDQUF0QixFQUF5Qk0sSUFBekIsQ0FBOEIsQ0FBOUIsQ0FBVixDQTVCd0IsQ0E4QnhCOztBQUNBLFNBQUtJLEdBQUwsR0FBVyxJQUFJTCxLQUFKLENBQVUsS0FBS1YsQ0FBTCxHQUFPLEtBQUtLLENBQXRCLEVBQXlCTSxJQUF6QixDQUE4QixDQUE5QixDQUFYO0FBQ0EsU0FBS0ssR0FBTCxHQUFXLElBQUlOLEtBQUosQ0FBVSxLQUFLVixDQUFMLEdBQU8sS0FBS0ssQ0FBdEIsRUFBeUJNLElBQXpCLENBQThCLENBQTlCLENBQVgsQ0FoQ3dCLENBa0N4Qjs7QUFDQSxTQUFLTSxZQUFMLEdBQW9CLElBQUlQLEtBQUosQ0FBVSxLQUFLVixDQUFMLEdBQU8sS0FBS0ssQ0FBWixHQUFjLENBQXhCLEVBQTJCTSxJQUEzQixDQUFnQyxDQUFoQyxDQUFwQjtBQUNBLFNBQUtPLFlBQUwsR0FBb0IsSUFBSVIsS0FBSixDQUFVLEtBQUtWLENBQUwsR0FBTyxLQUFLSyxDQUFaLEdBQWMsQ0FBeEIsRUFBMkJNLElBQTNCLENBQWdDLENBQWhDLENBQXBCLENBcEN3QixDQXNDeEI7O0FBQ0EsU0FBS1EsT0FBTCxHQUFlO0FBQ2JDLFlBQU0sRUFBRSxJQURLO0FBRWJDLFNBQUcsRUFBRSxJQUFJQyw4Q0FBTSxDQUFDQyxJQUFYLENBQWdCLENBQWhCLEVBQW1CLENBQW5CLENBRlE7QUFHYkMsU0FBRyxFQUFFLElBQUlGLDhDQUFNLENBQUNDLElBQVgsQ0FBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkI7QUFIUSxLQUFmO0FBTUEsU0FBS0UsVUFBTCxHQUFrQixDQUFsQjtBQUVBLFNBQUtDLElBQUw7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBckRBO0FBQUE7QUFBQSwyQkFzRFM7QUFDTEMsdUVBQWtCLENBQUMsS0FBSzNCLENBQU4sRUFBUyxLQUFLSyxDQUFkLENBQWxCO0FBQ0EsV0FBS3VCLGlCQUFMLENBQXVCLEtBQXZCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBaEVBO0FBQUE7QUFBQSwrQkFpRWFDLENBakViLEVBaUVnQkMsQ0FqRWhCLEVBaUVtQkMsTUFqRW5CLEVBaUUyQjtBQUN2QixVQUFNQyxDQUFDLEdBQUdDLGdEQUFDLENBQUNKLENBQUQsRUFBSUMsQ0FBSixDQUFYO0FBQ0EsV0FBS2xCLE9BQUwsQ0FBYW9CLENBQWIsS0FBbUJELE1BQW5CO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUE1RUE7QUFBQTtBQUFBLGdDQTZFY0YsQ0E3RWQsRUE2RWlCQyxDQTdFakIsRUE2RW9CSSxPQTdFcEIsRUE2RTZCQyxPQTdFN0IsRUE2RXNDO0FBQ2xDLFVBQU1ILENBQUMsR0FBR0MsZ0RBQUMsQ0FBQ0osQ0FBRCxFQUFJQyxDQUFKLENBQVg7QUFDQSxXQUFLakIsRUFBTCxDQUFRbUIsQ0FBUixLQUFjRSxPQUFkO0FBQ0EsV0FBS3BCLEVBQUwsQ0FBUWtCLENBQVIsS0FBY0csT0FBZDtBQUNEO0FBRUQ7QUFDRjtBQUNBOztBQXJGQTtBQUFBO0FBQUEsMkJBc0ZTO0FBQ0wsVUFBSTNCLElBQUksR0FBRyxLQUFLQSxJQUFoQjtBQUNBLFVBQUlELElBQUksR0FBRyxLQUFLQSxJQUFoQjtBQUNBLFVBQUlYLEVBQUUsR0FBRyxLQUFLQSxFQUFkO0FBQ0EsVUFBSWlCLEVBQUUsR0FBRyxLQUFLQSxFQUFkO0FBQ0EsVUFBSUMsRUFBRSxHQUFHLEtBQUtBLEVBQWQ7QUFDQSxVQUFJQyxHQUFHLEdBQUcsS0FBS0EsR0FBZjtBQUNBLFVBQUlDLEdBQUcsR0FBSSxLQUFLQSxHQUFoQjtBQUNBLFVBQUlQLENBQUMsR0FBRyxLQUFLQSxDQUFiO0FBQ0EsVUFBSUcsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBRUF3Qiw0REFBTyxDQUFDLENBQUQsRUFBSXJCLEdBQUosRUFBU0YsRUFBVCxFQUFhTCxJQUFiLEVBQW1CWixFQUFuQixDQUFQO0FBQ0F3Qyw0REFBTyxDQUFDLENBQUQsRUFBSXBCLEdBQUosRUFBU0YsRUFBVCxFQUFhTixJQUFiLEVBQW1CWixFQUFuQixDQUFQO0FBRUF5Qyw0REFBTyxDQUFDdEIsR0FBRCxFQUFNQyxHQUFOLEVBQVdILEVBQVgsRUFBZUMsRUFBZixDQUFQO0FBRUF3QiwyREFBTSxDQUFDLENBQUQsRUFBSXpCLEVBQUosRUFBUUUsR0FBUixFQUFhQSxHQUFiLEVBQWtCQyxHQUFsQixFQUF1QnBCLEVBQXZCLENBQU47QUFDQTBDLDJEQUFNLENBQUMsQ0FBRCxFQUFJeEIsRUFBSixFQUFRRSxHQUFSLEVBQWFELEdBQWIsRUFBa0JDLEdBQWxCLEVBQXVCcEIsRUFBdkIsQ0FBTjtBQUVBeUMsNERBQU8sQ0FBQ3hCLEVBQUQsRUFBS0MsRUFBTCxFQUFTQyxHQUFULEVBQWNDLEdBQWQsQ0FBUDtBQUNBb0IsNERBQU8sQ0FBQyxDQUFELEVBQUkzQixDQUFKLEVBQU9HLE9BQVAsRUFBZ0JMLElBQWhCLEVBQXNCWCxFQUF0QixDQUFQO0FBQ0EwQywyREFBTSxDQUFDLENBQUQsRUFBSTFCLE9BQUosRUFBYUgsQ0FBYixFQUFnQkksRUFBaEIsRUFBb0JDLEVBQXBCLEVBQXdCbEIsRUFBeEIsQ0FBTjtBQUNEO0FBRUQ7QUFDRjtBQUNBOztBQWhIQTtBQUFBO0FBQUEsNkJBaUhXO0FBQ1AsVUFBTTJDLE1BQU0sR0FBRyxLQUFLdEIsWUFBcEI7QUFDQSxVQUFNdUIsTUFBTSxHQUFHLEtBQUt0QixZQUFwQjtBQUVBLFVBQU11QixLQUFLLEdBQUcsS0FBSzFDLFFBQW5COztBQUNBLFdBQUssSUFBSWlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS2hDLENBQXpCLEVBQTRCZ0MsQ0FBQyxFQUE3QixFQUFpQztBQUMvQixhQUFLLElBQUlVLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS3JDLENBQXpCLEVBQTRCcUMsQ0FBQyxFQUE3QixFQUFpQztBQUMvQixjQUFJYixDQUFDLEdBQUdHLENBQUMsR0FBR1MsS0FBWjtBQUNBLGNBQUlYLENBQUMsR0FBR1ksQ0FBQyxHQUFHRCxLQUFaO0FBQ0EsY0FBSUUsQ0FBQyxHQUFHLEtBQUsvQixPQUFMLENBQWFxQixnREFBQyxDQUFDRCxDQUFELEVBQUlVLENBQUosQ0FBZCxDQUFSO0FBQ0EsY0FBTUUsQ0FBQyxHQUFHM0MsSUFBSSxDQUFDNEMsR0FBTCxDQUFTLEdBQVQsRUFBY0YsQ0FBQyxHQUFDLEdBQWhCLENBQVY7QUFDQSxjQUFJRyxHQUFHLEdBQUdiLGdEQUFDLENBQUNELENBQUQsRUFBSVUsQ0FBSixDQUFELEdBQVUsQ0FBcEI7QUFDQUgsZ0JBQU0sQ0FBQ08sR0FBRCxDQUFOLEdBQWNqQixDQUFDLEdBQUcsS0FBSzdCLENBQUwsR0FBT3lDLEtBQVAsR0FBYSxDQUFqQixHQUFxQkEsS0FBSyxHQUFDLENBQXpDO0FBQ0FGLGdCQUFNLENBQUNPLEdBQUcsR0FBQyxDQUFMLENBQU4sR0FBZ0JoQixDQUFDLEdBQUcsS0FBS3pCLENBQUwsR0FBT29DLEtBQVAsR0FBYSxDQUFqQixHQUFxQkEsS0FBSyxHQUFDLENBQTNDLENBUCtCLENBUS9COztBQUNBSyxhQUFHLElBQUksQ0FBUDtBQUNBTixnQkFBTSxDQUFDTSxHQUFELENBQU4sR0FBYyxDQUFkO0FBQ0FOLGdCQUFNLENBQUNNLEdBQUcsR0FBQyxDQUFMLENBQU4sR0FBZ0JGLENBQWhCO0FBQ0FKLGdCQUFNLENBQUNNLEdBQUcsR0FBQyxDQUFMLENBQU4sR0FBZ0IsQ0FBaEI7QUFDQU4sZ0JBQU0sQ0FBQ00sR0FBRyxHQUFDLENBQUwsQ0FBTixHQUFnQixDQUFoQixDQWIrQixDQWMvQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBS3RELEdBQUwsQ0FBU3VELFFBQVQsQ0FBa0JDLFVBQWxCLENBQTZCVCxNQUE3QixFQUFxQ0MsTUFBckMsRUFBNkMsS0FBS3pDLFFBQWxEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTs7QUEvSUE7QUFBQTtBQUFBLHNDQWdKb0JrRCxjQWhKcEIsRUFnSm9DO0FBQUE7O0FBQ2hDQyxjQUFRLENBQUNDLGFBQVQsR0FBeUIsVUFBQ0MsQ0FBRCxFQUFPO0FBQzlCLFlBQU12QixDQUFDLEdBQUd1QixDQUFDLENBQUNDLE9BQVo7QUFDQSxZQUFNdkIsQ0FBQyxHQUFHc0IsQ0FBQyxDQUFDRSxPQUFaOztBQUNBLGFBQUksQ0FBQ0MsYUFBTCxDQUFtQjFCLENBQW5CLEVBQXNCQyxDQUF0QjtBQUNELE9BSkQ7O0FBS0EsVUFBSW1CLGNBQUosRUFBb0I7QUFDbEIsYUFBSzlCLE9BQUwsQ0FBYUMsTUFBYixHQUFzQixLQUF0Qjs7QUFFQThCLGdCQUFRLENBQUNNLGNBQVQsR0FBMEIsWUFBTTtBQUM5QixlQUFJLENBQUNyQyxPQUFMLENBQWFDLE1BQWIsR0FBc0IsS0FBdEI7QUFDRCxTQUZEOztBQUdBOEIsZ0JBQVEsQ0FBQ08sY0FBVCxHQUEwQixZQUFNO0FBQzlCLGVBQUksQ0FBQ3RDLE9BQUwsQ0FBYUMsTUFBYixHQUFzQixJQUF0QjtBQUNELFNBRkQ7O0FBR0E4QixnQkFBUSxDQUFDUSxXQUFULEdBQXVCLFlBQU07QUFDM0IsZUFBSSxDQUFDdkMsT0FBTCxDQUFhQyxNQUFiLEdBQXNCLEtBQXRCO0FBQ0QsU0FGRDtBQUdEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQXpLQTtBQUFBO0FBQUEsa0NBMEtnQlMsQ0ExS2hCLEVBMEttQkMsQ0ExS25CLEVBMEtzQjtBQUNsQixVQUFJLENBQUMsS0FBS1gsT0FBTCxDQUFhQyxNQUFsQixFQUEwQjs7QUFFMUIsVUFBSVMsQ0FBQyxJQUFJLENBQUwsSUFBVUMsQ0FBQyxJQUFJLENBQWYsSUFBb0JBLENBQUMsR0FBRyxLQUFLdEMsR0FBTCxDQUFTVyxNQUFULENBQWdCRyxNQUF4QyxJQUFrRHVCLENBQUMsR0FBRyxLQUFLckMsR0FBTCxDQUFTVyxNQUFULENBQWdCQyxLQUExRSxFQUFpRjtBQUUvRSxZQUFNb0IsR0FBRyxHQUFHLEtBQUtMLE9BQUwsQ0FBYUUsR0FBYixDQUFpQnNDLE1BQWpCLEdBQTBCQyxVQUExQixDQUFxQy9CLENBQXJDLEVBQXdDLEtBQUtyQyxHQUFMLENBQVNXLE1BQVQsQ0FBZ0JHLE1BQWhCLEdBQXlCd0IsQ0FBakUsQ0FBWjtBQUNBLGFBQUtYLE9BQUwsQ0FBYUssR0FBYixHQUFtQixLQUFLTCxPQUFMLENBQWFLLEdBQWIsQ0FBaUJxQyxHQUFqQixDQUFxQnJDLEdBQXJCLENBQW5CO0FBQ0EsYUFBS0wsT0FBTCxDQUFhSyxHQUFiLENBQWlCc0MsS0FBakIsQ0FBdUIsS0FBSy9ELFFBQUwsR0FBYyxFQUFyQztBQUVBLGFBQUtvQixPQUFMLENBQWFFLEdBQWIsQ0FBaUJRLENBQWpCLEdBQXFCQSxDQUFyQjtBQUF3QixhQUFLVixPQUFMLENBQWFFLEdBQWIsQ0FBaUJTLENBQWpCLEdBQXFCLEtBQUt0QyxHQUFMLENBQVNXLE1BQVQsQ0FBZ0JHLE1BQWhCLEdBQXlCd0IsQ0FBOUM7QUFDekI7QUFDRjtBQXJMSDtBQUFBO0FBQUEsd0JBdUxNaUMsQ0F2TE4sRUF1TFNDLENBdkxULEVBdUxZQyxDQXZMWixFQXVMZTtBQUNYLGFBQVEsQ0FBQ0YsQ0FBQyxJQUFJLEVBQU4sS0FBYUMsQ0FBQyxJQUFJLENBQWxCLElBQXVCQyxDQUEvQjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQWhNQTtBQUFBO0FBQUEsMkJBaU1TQyxLQWpNVCxFQWlNZ0I7QUFDWixVQUFNQyxFQUFFLEdBQUcsS0FBS2hELE9BQUwsQ0FBYUUsR0FBYixDQUFpQlEsQ0FBNUI7QUFDQSxVQUFNdUMsRUFBRSxHQUFHLEtBQUtqRCxPQUFMLENBQWFFLEdBQWIsQ0FBaUJTLENBQTVCO0FBQ0EsVUFBTXVDLEtBQUssR0FBRyxDQUFDRixFQUFFLEdBQUNBLEVBQUUsR0FBQyxLQUFLcEUsUUFBWixJQUFzQixLQUFLQSxRQUF6QztBQUNBLFVBQU11RSxLQUFLLEdBQUcsQ0FBQ0YsRUFBRSxHQUFDQSxFQUFFLEdBQUMsS0FBS3JFLFFBQVosSUFBc0IsS0FBS0EsUUFBekMsQ0FKWSxDQU1aOztBQUNBLFdBQUt3RSw4QkFBTCxDQUFvQ0YsS0FBcEMsRUFBMkNDLEtBQTNDOztBQUVBLFVBQUksS0FBSzdDLFVBQUwsR0FBa0IsQ0FBbEIsSUFBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsYUFBSytDLElBQUw7QUFDRDs7QUFDRCxXQUFLQyxNQUFMLEdBWlksQ0FjWjs7QUFDQSxXQUFLdEQsT0FBTCxDQUFhSyxHQUFiLENBQWlCa0QsUUFBakIsQ0FBMEIsR0FBMUI7QUFFQSxXQUFLakQsVUFBTDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUF6TkE7QUFBQTtBQUFBLG1EQTBOaUNJLENBMU5qQyxFQTBOb0NDLENBMU5wQyxFQTBOdUM7QUFDbkMsVUFBTU4sR0FBRyxHQUFHLEtBQUtMLE9BQUwsQ0FBYUssR0FBYixDQUFpQm1ELEdBQWpCLEtBQXlCLEVBQXJDO0FBQ0EsVUFBTUMsRUFBRSxHQUFHLEtBQUt6RCxPQUFMLENBQWFLLEdBQWIsQ0FBaUJLLENBQTVCO0FBQ0EsVUFBTWdELEVBQUUsR0FBRyxLQUFLMUQsT0FBTCxDQUFhSyxHQUFiLENBQWlCTSxDQUE1Qjs7QUFFQSxVQUFJRCxDQUFDLEdBQUcsQ0FBUixFQUFXO0FBQ1QsYUFBS2lELFVBQUwsQ0FBZ0JqRCxDQUFDLEdBQUMsQ0FBbEIsRUFBcUJDLENBQXJCLEVBQXdCTixHQUF4QjtBQUNBLGFBQUt1RCxXQUFMLENBQWlCbEQsQ0FBQyxHQUFDLENBQW5CLEVBQXNCQyxDQUF0QixFQUF5QjhDLEVBQXpCLEVBQTZCQyxFQUE3QjtBQUNEOztBQUVELFVBQUkvQyxDQUFDLEdBQUcsQ0FBUixFQUFXO0FBQ1QsYUFBS2dELFVBQUwsQ0FBZ0JqRCxDQUFoQixFQUFtQkMsQ0FBQyxHQUFDLENBQXJCLEVBQXdCTixHQUF4QjtBQUNBLGFBQUt1RCxXQUFMLENBQWlCbEQsQ0FBakIsRUFBb0JDLENBQUMsR0FBQyxDQUF0QixFQUF5QjhDLEVBQXpCLEVBQTZCQyxFQUE3QjtBQUNEOztBQUVELFVBQUloRCxDQUFDLEdBQUcsS0FBSzdCLENBQWIsRUFBZ0I7QUFDZCxhQUFLOEUsVUFBTCxDQUFnQmpELENBQUMsR0FBQyxDQUFsQixFQUFxQkMsQ0FBckIsRUFBd0JOLEdBQXhCO0FBQ0EsYUFBS3VELFdBQUwsQ0FBaUJsRCxDQUFDLEdBQUMsQ0FBbkIsRUFBc0JDLENBQXRCLEVBQXlCOEMsRUFBekIsRUFBNkJDLEVBQTdCO0FBQ0Q7O0FBRUQsVUFBSS9DLENBQUMsR0FBRyxLQUFLekIsQ0FBYixFQUFnQjtBQUNkLGFBQUt5RSxVQUFMLENBQWdCakQsQ0FBaEIsRUFBbUJDLENBQUMsR0FBQyxDQUFyQixFQUF3Qk4sR0FBeEI7QUFDQSxhQUFLdUQsV0FBTCxDQUFpQmxELENBQWpCLEVBQW9CQyxDQUFDLEdBQUMsQ0FBdEIsRUFBeUI4QyxFQUF6QixFQUE2QkMsRUFBN0I7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBOztBQXRQQTtBQUFBO0FBQUEsOEJBdVBZO0FBQ1IsV0FBS3JGLEdBQUwsR0FBVyxJQUFYO0FBQ0EsV0FBS0MsT0FBTCxHQUFlLElBQWY7QUFDQSxXQUFLZ0IsQ0FBTCxHQUFTLElBQVQ7QUFDQSxXQUFLRyxPQUFMLEdBQWUsSUFBZjtBQUNBLFdBQUtDLEVBQUwsR0FBVSxJQUFWO0FBQ0EsV0FBS0MsRUFBTCxHQUFVLElBQVY7QUFDQSxXQUFLQyxHQUFMLEdBQVcsSUFBWDtBQUNBLFdBQUtDLEdBQUwsR0FBVyxJQUFYO0FBQ0EsV0FBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNBLFdBQUtDLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxXQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNEO0FBblFIOztBQUFBO0FBQUEiLCJmaWxlIjoiLi9mbHVpZHNpbS9HcmlkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVkFMTzJEIH0gZnJvbSBcInZhbG8uanNcIlxuaW1wb3J0IHsgc2V0R2xvYmFsVmFyaWFibGVzLCBJLCBkaWZmdXNlLCBhZHZlY3QsIHByb2plY3QgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG4vKipcbiAqIEdyaWQgb2JqZWN0IGZvciBmbHVpZCBzaW11bGF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmlkIHtcbiAgY29uc3RydWN0b3IoYXBwLCBvcHRpb25zKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG5cbiAgICAvLyBpbml0aWFsIG9wdGlvbnMgdGhhdCBnZXRzIGZpbGxlZCB3aXRoIHBhcmFtZXRlclxuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgZHQ6IDAuMDAxLFxuICAgICAgZGlmZnVzaW9uOiAwLjAwMDEsXG4gICAgICB2aXNjb3NpdHk6IDAuMDAwMDAwMVxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgLy8gZm9yIHBhdGhmaW5kaWdcbiAgICB0aGlzLnRpbGVTaXplID0gNTtcblxuICAgIC8vIGRpbWVudGlvbnNcbiAgICB0aGlzLlcgPSBNYXRoLmNlaWwodGhpcy5hcHAuY2FudmFzLndpZHRoIC8gdGhpcy50aWxlU2l6ZSk7XG4gICAgdGhpcy5IID0gTWF0aC5jZWlsKHRoaXMuYXBwLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnRpbGVTaXplKTtcblxuICAgIC8vIHRpbWUgc3RlcFxuICAgIHRoaXMuZHQgPSB0aGlzLm9wdGlvbnMuZHQ7XG4gICAgLy8gZmx1aWQgcHJvcGVydGllc1xuICAgIHRoaXMuZGlmZiA9IHRoaXMub3B0aW9ucy5kaWZmdXNpb247XG4gICAgdGhpcy52aXNjID0gdGhpcy5vcHRpb25zLnZpc2Nvc2l0eTtcblxuICAgIHRoaXMucyA9IG5ldyBBcnJheSh0aGlzLlcqdGhpcy5IKS5maWxsKDApO1xuICAgIHRoaXMuZGVuc2l0eSA9IG5ldyBBcnJheSh0aGlzLlcqdGhpcy5IKS5maWxsKDApO1xuXG4gICAgLy8gY3VycmVudCB2ZWxvY2l0aWVzXG4gICAgdGhpcy5WeCA9IG5ldyBBcnJheSh0aGlzLlcqdGhpcy5IKS5maWxsKDApO1xuICAgIHRoaXMuVnkgPSBuZXcgQXJyYXkodGhpcy5XKnRoaXMuSCkuZmlsbCgwKTtcblxuICAgIC8vIHByZXZpb3VzIHZlbG9jaXRpZXNcbiAgICB0aGlzLlZ4MCA9IG5ldyBBcnJheSh0aGlzLlcqdGhpcy5IKS5maWxsKDApO1xuICAgIHRoaXMuVnkwID0gbmV3IEFycmF5KHRoaXMuVyp0aGlzLkgpLmZpbGwoMCk7XG5cbiAgICAvLyBidWZmZXJzXG4gICAgdGhpcy5wb2ludHNCdWZmZXIgPSBuZXcgQXJyYXkodGhpcy5XKnRoaXMuSCoyKS5maWxsKDApO1xuICAgIHRoaXMuY29sb3JzQnVmZmVyID0gbmV3IEFycmF5KHRoaXMuVyp0aGlzLkgqNCkuZmlsbCgwKTtcblxuICAgIC8vIHBvaW50ZXIgb2JqZWN0XG4gICAgdGhpcy5wb2ludGVyID0ge1xuICAgICAgdXBkYXRlOiB0cnVlLFxuICAgICAgcG9zOiBuZXcgVkFMTzJELlZlYzIoMCwgMCksXG4gICAgICB2ZWw6IG5ldyBWQUxPMkQuVmVjMigwLCAwKSxcbiAgICB9XG5cbiAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbCB1bmN0aW9uXG4gICAqL1xuICBpbml0KCkge1xuICAgIHNldEdsb2JhbFZhcmlhYmxlcyh0aGlzLlcsIHRoaXMuSCk7XG4gICAgdGhpcy5pbml0UG9pbnRlckV2ZW50cyhmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBkZW5zaXR5IGZvciBvbmUgYmxvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IFxuICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IFxuICAgKi9cbiAgYWRkRGVuc2l0eSh4LCB5LCBhbW91bnQpIHtcbiAgICBjb25zdCBpID0gSSh4LCB5KTtcbiAgICB0aGlzLmRlbnNpdHlbaV0gKz0gYW1vdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdmVsb2NpdHkgZm9yIG9uZSBibG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0geCBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnRYIFxuICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50WSBcbiAgICovXG4gIGFkZFZlbG9jaXR5KHgsIHksIGFtb3VudFgsIGFtb3VudFkpIHtcbiAgICBjb25zdCBpID0gSSh4LCB5KTtcbiAgICB0aGlzLlZ4W2ldICs9IGFtb3VudFg7XG4gICAgdGhpcy5WeVtpXSArPSBhbW91bnRZO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHNpbXVsYXRpb24gb25lIHRpbWVzdGVwIGFoZWFkXG4gICAqL1xuICBzdGVwKCkge1xuICAgIGxldCB2aXNjID0gdGhpcy52aXNjO1xuICAgIGxldCBkaWZmID0gdGhpcy5kaWZmO1xuICAgIGxldCBkdCA9IHRoaXMuZHQ7XG4gICAgbGV0IFZ4ID0gdGhpcy5WeDtcbiAgICBsZXQgVnkgPSB0aGlzLlZ5O1xuICAgIGxldCBWeDAgPSB0aGlzLlZ4MDtcbiAgICBsZXQgVnkwICA9IHRoaXMuVnkwO1xuICAgIGxldCBzID0gdGhpcy5zO1xuICAgIGxldCBkZW5zaXR5ID0gdGhpcy5kZW5zaXR5O1xuXG4gICAgZGlmZnVzZSgxLCBWeDAsIFZ4LCB2aXNjLCBkdCk7XG4gICAgZGlmZnVzZSgyLCBWeTAsIFZ5LCB2aXNjLCBkdCk7XG5cbiAgICBwcm9qZWN0KFZ4MCwgVnkwLCBWeCwgVnkpO1xuXG4gICAgYWR2ZWN0KDEsIFZ4LCBWeDAsIFZ4MCwgVnkwLCBkdCk7XG4gICAgYWR2ZWN0KDIsIFZ5LCBWeTAsIFZ4MCwgVnkwLCBkdCk7XG5cbiAgICBwcm9qZWN0KFZ4LCBWeSwgVngwLCBWeTApO1xuICAgIGRpZmZ1c2UoMCwgcywgZGVuc2l0eSwgZGlmZiwgZHQpO1xuICAgIGFkdmVjdCgwLCBkZW5zaXR5LCBzLCBWeCwgVnksIGR0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGFtb3VudCBvZiBkZW5zaXR5IHBlciBibG9ja1xuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzQnVmZmVyO1xuICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuY29sb3JzQnVmZmVyO1xuXG4gICAgY29uc3QgU0NBTEUgPSB0aGlzLnRpbGVTaXplO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5XOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5IOyBqKyspIHtcbiAgICAgICAgbGV0IHggPSBpICogU0NBTEU7XG4gICAgICAgIGxldCB5ID0gaiAqIFNDQUxFO1xuICAgICAgICBsZXQgZCA9IHRoaXMuZGVuc2l0eVtJKGksIGopXTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGgubWluKDEuMCwgZC8yNTYpO1xuICAgICAgICBsZXQgaWR4ID0gSShpLCBqKSAqIDI7XG4gICAgICAgIHBvaW50c1tpZHhdID0geCAtIHRoaXMuVypTQ0FMRS8yICsgU0NBTEUvMjtcbiAgICAgICAgcG9pbnRzW2lkeCsxXSA9IHkgLSB0aGlzLkgqU0NBTEUvMiArIFNDQUxFLzI7XG4gICAgICAgIC8vcG9pbnRzLnB1c2goeCAtIHRoaXMuVypTQ0FMRS8yICsgU0NBTEUvMiwgeSAtIHRoaXMuSCpTQ0FMRS8yICsgU0NBTEUvMik7XG4gICAgICAgIGlkeCAqPSAyO1xuICAgICAgICBjb2xvcnNbaWR4XSA9IDA7XG4gICAgICAgIGNvbG9yc1tpZHgrMV0gPSBjO1xuICAgICAgICBjb2xvcnNbaWR4KzJdID0gMDtcbiAgICAgICAgY29sb3JzW2lkeCszXSA9IDE7XG4gICAgICAgIC8vY29sb3JzLnB1c2goMCwgYywgMCwgMSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFwcC5yZW5kZXJlci5kcmF3UG9pbnRzKHBvaW50cywgY29sb3JzLCB0aGlzLnRpbGVTaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHBvaW50ZXIgZXZlbnQgdG8gdGhlIGRvbVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsaWNraW5nTmVlZGVkIElmIGluIG9yZGVyIHRvIGFkZCBkZW5zaXR5IG5lZWRzIGNsaWNrXG4gICAqL1xuICBpbml0UG9pbnRlckV2ZW50cyhjbGlja2luZ05lZWRlZCkge1xuICAgIGRvY3VtZW50Lm9ucG9pbnRlcm1vdmUgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgeCA9IGUuY2xpZW50WDtcbiAgICAgIGNvbnN0IHkgPSBlLmNsaWVudFk7XG4gICAgICB0aGlzLnVwZGF0ZVBvaW50ZXIoeCwgeSk7XG4gICAgfVxuICAgIGlmIChjbGlja2luZ05lZWRlZCkge1xuICAgICAgdGhpcy5wb2ludGVyLnVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICBkb2N1bWVudC5vbnBvaW50ZXJsZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5wb2ludGVyLnVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQub25tcG9pbnRlcmRvd24gPSAoKSA9PiB7XG4gICAgICAgIHRoaXMucG9pbnRlci51cGRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQub25wb2ludGVydXAgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMucG9pbnRlci51cGRhdGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcG9pbnRlciBkYXRhXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IHgtY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRlclxuICAgKiBAcGFyYW0ge251bWJlcn0geSB5LWNvb3JkaW5hdGUgb2YgdGhlIHBvaW50ZXJcbiAgICovXG4gIHVwZGF0ZVBvaW50ZXIoeCwgeSkge1xuICAgIGlmICghdGhpcy5wb2ludGVyLnVwZGF0ZSkgcmV0dXJuO1xuXG4gICAgaWYgKHggPj0gMCAmJiB5ID49IDAgJiYgeSA8IHRoaXMuYXBwLmNhbnZhcy5oZWlnaHQgJiYgeCA8IHRoaXMuYXBwLmNhbnZhcy53aWR0aCkge1xuXG4gICAgICBjb25zdCB2ZWwgPSB0aGlzLnBvaW50ZXIucG9zLm5lZ2F0ZSgpLmFkZEluUGxhY2UoeCwgdGhpcy5hcHAuY2FudmFzLmhlaWdodCAtIHkpO1xuICAgICAgdGhpcy5wb2ludGVyLnZlbCA9IHRoaXMucG9pbnRlci52ZWwuYWRkKHZlbCk7XG4gICAgICB0aGlzLnBvaW50ZXIudmVsLmxpbWl0KHRoaXMudGlsZVNpemUqMTUpO1xuXG4gICAgICB0aGlzLnBvaW50ZXIucG9zLnggPSB4OyB0aGlzLnBvaW50ZXIucG9zLnkgPSB0aGlzLmFwcC5jYW52YXMuaGVpZ2h0IC0geTtcbiAgICB9XG4gIH1cblxuICByZ2IociwgZywgYikge1xuICAgIHJldHVybiAoKHIgPDwgMTYpICsgKGcgPDwgOCkgKyBiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBzaW11bGF0aW9uIHdpdGggb25lIHRpbWUgc3RlcFxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGEgVGhlIGNoYW5nZSBpbiB0aW1lXG4gICAqIFxuICAgKiBUT0RPOiBBZGQgZGVuc2l0eSBhbmQgdmVsb2NpdHkgd2l0aCBhIGJydXNoICggbXVsdGlwbGUgcG9pbnRzIGF0IHRoZSB0aW1lIClcbiAgICovXG4gIHVwZGF0ZShkZWx0YSkge1xuICAgIGNvbnN0IG14ID0gdGhpcy5wb2ludGVyLnBvcy54O1xuICAgIGNvbnN0IG15ID0gdGhpcy5wb2ludGVyLnBvcy55O1xuICAgIGNvbnN0IHRpbGVYID0gKG14LW14JXRoaXMudGlsZVNpemUpL3RoaXMudGlsZVNpemU7XG4gICAgY29uc3QgdGlsZVkgPSAobXktbXkldGhpcy50aWxlU2l6ZSkvdGhpcy50aWxlU2l6ZTtcblxuICAgIC8vIGFkZHMgdmVsb2NpdHkgYW5kIGRlbnNpdHlcbiAgICB0aGlzLmFkZFZlbG9jaXR5QW5kRGVuc2l0eVdpdGhCcnVzaCh0aWxlWCwgdGlsZVkpO1xuXG4gICAgaWYgKHRoaXMuZnJhbWVDb3VudCAlIDEgPT0gMCkge1xuICAgICAgdGhpcy5zdGVwKCk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG5cbiAgICAvLyBpZiBwb2ludGVyIHN0YXlzIHN0aWxsIGl0cyB2ZWxvY2l0eSBsb3ZlcnNcbiAgICB0aGlzLnBvaW50ZXIudmVsLm11bHRpcGx5KDAuOCk7XG5cbiAgICB0aGlzLmZyYW1lQ291bnQrKztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHZlbG9jeXR5IGFuZCBkZW5zaXR5IGluIG11bHRpcGxlIGJsb2NrcyBhdCB0aGUgdGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgXG4gICAqL1xuICBhZGRWZWxvY2l0eUFuZERlbnNpdHlXaXRoQnJ1c2goeCwgeSkge1xuICAgIGNvbnN0IHZlbCA9IHRoaXMucG9pbnRlci52ZWwubWFnKCkgKiAzMDtcbiAgICBjb25zdCBkeCA9IHRoaXMucG9pbnRlci52ZWwueDtcbiAgICBjb25zdCBkeSA9IHRoaXMucG9pbnRlci52ZWwueTtcblxuICAgIGlmICh4ID4gMCkge1xuICAgICAgdGhpcy5hZGREZW5zaXR5KHgtMSwgeSwgdmVsKTtcbiAgICAgIHRoaXMuYWRkVmVsb2NpdHkoeC0xLCB5LCBkeCwgZHkpO1xuICAgIH1cblxuICAgIGlmICh5ID4gMCkge1xuICAgICAgdGhpcy5hZGREZW5zaXR5KHgsIHktMSwgdmVsKTtcbiAgICAgIHRoaXMuYWRkVmVsb2NpdHkoeCwgeS0xLCBkeCwgZHkpO1xuICAgIH1cblxuICAgIGlmICh4IDwgdGhpcy5XKSB7XG4gICAgICB0aGlzLmFkZERlbnNpdHkoeCsxLCB5LCB2ZWwpO1xuICAgICAgdGhpcy5hZGRWZWxvY2l0eSh4KzEsIHksIGR4LCBkeSk7XG4gICAgfVxuXG4gICAgaWYgKHkgPCB0aGlzLkgpIHtcbiAgICAgIHRoaXMuYWRkRGVuc2l0eSh4LCB5KzEsIHZlbCk7XG4gICAgICB0aGlzLmFkZFZlbG9jaXR5KHgsIHkrMSwgZHgsIGR5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIEdyaWQgYW5kIGZyZWVzIG1lbW9yeVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmFwcCA9IG51bGw7XG4gICAgdGhpcy5vcHRpb25zID0gbnVsbDtcbiAgICB0aGlzLnMgPSBudWxsO1xuICAgIHRoaXMuZGVuc2l0eSA9IG51bGw7XG4gICAgdGhpcy5WeCA9IG51bGw7XG4gICAgdGhpcy5WeSA9IG51bGw7XG4gICAgdGhpcy5WeDAgPSBudWxsO1xuICAgIHRoaXMuVnkwID0gbnVsbDtcbiAgICB0aGlzLnBvaW50c0J1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5jb2xvcnNCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMucG9pbnRlciA9IG51bGw7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./fluidsim/Grid.js\n");

/***/ }),

/***/ "./fluidsim/utils.js":
/*!***************************!*\
  !*** ./fluidsim/utils.js ***!
  \***************************/
/*! exports provided: setGlobalVariables, I, diffuse, project, advect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setGlobalVariables\", function() { return setGlobalVariables; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"I\", function() { return I; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"diffuse\", function() { return diffuse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"project\", function() { return project; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"advect\", function() { return advect; });\n// global variables\nvar W;\nvar H;\nvar iter = 16;\nfunction setGlobalVariables(x, y) {\n  W = x;\n  H = y;\n}\nfunction I(x, y) {\n  return x + y * W;\n}\n_c = I;\nfunction diffuse(b, x, x0, diff, dt) {\n  var a = dt * diff * (W - 2) * (H - 2);\n  lin_solve(b, x, x0, a, 1 + 6 * a);\n} // new value of a cell is based on its neighbours\n\nfunction lin_solve(b, x, x0, a, c) {\n  var cRecip = 1.0 / c;\n\n  for (var t = 0; t < iter; t++) {\n    for (var j = 1; j < H - 1; j++) {\n      for (var i = 1; i < W - 1; i++) {\n        x[I(i, j)] = (x0[I(i, j)] + a * (x[I(i + 1, j)] + x[I(i - 1, j)] + x[I(i, j + 1)] + x[I(i, j - 1)])) * cRecip;\n      }\n    }\n\n    set_bnd(b, x);\n  }\n}\n\nfunction project(velocX, velocY, p, div) {\n  for (var j = 1; j < H - 1; j++) {\n    for (var i = 1; i < W - 1; i++) {\n      div[I(i, j)] = -0.5 * (velocX[I(i + 1, j)] - velocX[I(i - 1, j)] + velocY[I(i, j + 1)] - velocY[I(i, j - 1)]) / W;\n      p[I(i, j, W)] = 0;\n    }\n  }\n\n  set_bnd(0, div);\n  set_bnd(0, p);\n  lin_solve(0, p, div, 1, 6);\n\n  for (var _j = 1; _j < H - 1; _j++) {\n    for (var _i = 1; _i < W - 1; _i++) {\n      velocX[I(_i, _j)] -= 0.5 * (p[I(_i + 1, _j)] - p[I(_i - 1, _j)]) * W;\n      velocY[I(_i, _j)] -= 0.5 * (p[I(_i, _j + 1)] - p[I(_i, _j - 1)]) * H;\n    }\n  }\n\n  set_bnd(1, velocX);\n  set_bnd(2, velocY);\n}\nfunction advect(b, d, d0, velocX, velocY, dt) {\n  var i0, i1, j0, j1;\n  var dtx = dt * (W - 2);\n  var dty = dt * (H - 2);\n  var s0, s1, t0, t1;\n  var tmp1, tmp2, x, y;\n  var ifloat, jfloat;\n  var i, j;\n\n  for (j = 1, jfloat = 1; j < H - 1; j++, jfloat++) {\n    for (i = 1, ifloat = 1; i < W - 1; i++, ifloat++) {\n      tmp1 = dtx * velocX[I(i, j)];\n      tmp2 = dty * velocY[I(i, j)];\n      x = ifloat - tmp1;\n      y = jfloat - tmp2;\n      if (x < 0.5) x = 0.5;\n      if (x > W + 0.5) x = W + 0.5;\n      i0 = Math.floor(x);\n      i1 = i0 + 1;\n      if (y < 0.5) y = 0.5;\n      if (y > H + 0.5) y = H + 0.5;\n      j0 = Math.floor(y);\n      j1 = j0 + 1;\n      s1 = x - i0;\n      s0 = 1.0 - s1;\n      t1 = y - j0;\n      t0 = 1.0 - t1;\n      var i0i = parseInt(i0);\n      var i1i = parseInt(i1);\n      var j0i = parseInt(j0);\n      var j1i = parseInt(j1);\n      d[I(i, j, W)] = s0 * (t0 * d0[I(i0i, j0i)] + t1 * d0[I(i0i, j1i)]) + s1 * (t0 * d0[I(i1i, j0i)] + t1 * d0[I(i1i, j1i)]);\n    }\n  }\n\n  set_bnd(b, d);\n}\n\nfunction set_bnd(b, x) {\n  for (var i = 1; i < W - 1; i++) {\n    x[I(i, 0)] = b == 2 ? -x[I(i, 1)] : x[I(i, 1)];\n    x[I(i, H - 1)] = b == 2 ? -x[I(i, H - 2)] : x[I(i, H - 2)];\n  }\n\n  for (var j = 1; j < H - 1; j++) {\n    x[I(0, j)] = b == 1 ? -x[I(1, j)] : x[I(1, j)];\n    x[I(W - 1, j)] = b == 1 ? -x[I(W - 2, j)] : x[I(W - 2, j)];\n  }\n\n  x[I(0, 0)] = 0.5 * (x[I(1, 0)] + x[I(0, 1)]);\n  x[I(0, H - 1)] = 0.5 * (x[I(1, H - 1)] + x[I(0, H - 2)]);\n  x[I(W - 1, 0)] = 0.5 * (x[I(W - 2, 0)] + x[I(W - 1, 1)]);\n  x[I(W - 1, H - 1)] = 0.5 * (x[I(W - 2, H - 1)] + x[I(W - 1, H - 2)]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"I\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./fluidsim/utils.js\n");

/***/ }),

/***/ "./maze/Grid.js":
/*!**********************!*\
  !*** ./maze/Grid.js ***!
  \**********************/
/*! exports provided: Grid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Grid\", function() { return Grid; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var valo_js_src_valo2D_utils_mobile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! valo.js/src/valo2D/utils/mobile */ \"../valo.js/src/valo2D/utils/mobile.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Vector */ \"./maze/Vector.js\");\n/* harmony import */ var _mazegenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mazegenerator */ \"./maze/mazegenerator.js\");\n/* harmony import */ var _pathfinding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pathfinding */ \"./maze/pathfinding.js\");\n/* harmony import */ var _presets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./presets */ \"./maze/presets.js\");\n\n\n\n\n\n\n\nvar Grid = /*#__PURE__*/function () {\n  function Grid(app, options) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Grid);\n\n    this.app = app;\n    this.options = Object.assign(Object(_presets__WEBPACK_IMPORTED_MODULE_6__[\"presets\"])(options.preset || \"Basic\"), options); // mobile test\n\n    this.isMobile = Object(valo_js_src_valo2D_utils_mobile__WEBPACK_IMPORTED_MODULE_2__[\"isMobile\"])(); // for maze\n\n    this.blockSize = this.options.blockSize;\n    this.cols = Math.ceil(this.app.canvas.width / this.blockSize);\n    this.rows = Math.ceil(this.app.canvas.height / this.blockSize); // for pathfindig\n\n    this.tilesInBlock = this.options.tilesInBlock;\n    this.tileSize = this.blockSize / this.tilesInBlock; // this.tileGraphics = new PIXI.Graphics();\n\n    this.tiles = []; // root\n\n    this.tileRows = this.rows * this.tilesInBlock;\n    this.tileCols = this.cols * this.tilesInBlock;\n    this.root = Math.floor(this.tileCols / 2) + this.tileCols * Math.floor(this.tileRows / 2); // arrays of elements\n\n    this.points = [];\n    this.horizontalWalls = [];\n    this.verticalWalls = []; // colors\n\n    this.wallColor = this.options.wallColor;\n    this.colorAmp = this.options.colorAmp; // direction\n\n    this.rootMoving = false;\n    this.rootDir = null; // frames\n\n    this.frameCount = 0; // start function\n\n    this.init();\n  }\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Grid, [{\n    key: \"init\",\n    value: function init() {\n      this.createPoints();\n      this.createWalls();\n      Object(_mazegenerator__WEBPACK_IMPORTED_MODULE_4__[\"generateMaze\"])(this); // also draws them\n\n      this.createTiles(); // walls on top of tiles\n\n      if (this.options.wallColor) {\n        this.showWalls();\n      } // inits event listener\n\n\n      if (!this.rootMoving) {\n        this.updatePointerPos();\n      }\n    }\n  }, {\n    key: \"createPoints\",\n    value: function createPoints() {\n      var offX = (this.app.canvas.width - this.cols * this.blockSize) / 2;\n      var offY = (this.app.canvas.height - this.rows * this.blockSize) / 2;\n\n      for (var y = 0; y <= this.rows; y++) {\n        for (var x = 0; x <= this.cols; x++) {\n          var point = new _Vector__WEBPACK_IMPORTED_MODULE_3__[\"Vec2\"](x * this.blockSize + offX, y * this.blockSize + offY);\n          this.points.push(point);\n        }\n      }\n    }\n  }, {\n    key: \"createWalls\",\n    value: function createWalls() {\n      // vertical\n      for (var y = 0; y < this.rows; y++) {\n        var vRow = [];\n\n        for (var x = 0; x <= this.cols; x++) {\n          vRow.push(true);\n        }\n\n        this.verticalWalls.push(vRow);\n      } // horizontal\n\n\n      for (var _y = 0; _y <= this.rows; _y++) {\n        var hRow = [];\n\n        for (var _x = 0; _x < this.cols; _x++) {\n          hRow.push(true);\n        }\n\n        this.horizontalWalls.push(hRow);\n      }\n    }\n  }, {\n    key: \"breakWall\",\n    value: function breakWall(row, column, dir) {\n      switch (dir) {\n        case \"Down\":\n          if (row == this.rows) {\n            console.log(\"Can't break bottom walls\");\n          } else if (!this.horizontalWalls[row + 1][column]) {\n            console.log(\"Can't break walls that are already broken\");\n          } else {\n            this.horizontalWalls[row + 1][column] = false;\n          }\n\n          break;\n\n        case \"Up\":\n          if (row == 0) {\n            console.log(\"Can't break top walls\");\n          } else if (!this.horizontalWalls[row][column]) {\n            console.log(\"Can't break walls that are already broken\");\n          } else {\n            this.horizontalWalls[row][column] = false;\n          }\n\n          break;\n\n        case \"Left\":\n          if (column == 0) {\n            console.log(\"Can't break leftmost walls\");\n          } else if (!this.verticalWalls[row][column]) {\n            console.log(\"Can't break walls that are already broken\");\n          } else {\n            this.verticalWalls[row][column] = false;\n          }\n\n          break;\n\n        case \"Right\":\n          if (column == this.cols) {\n            console.log(\"Can't break rightmost walls\");\n          } else if (!this.verticalWalls[row][column + 1]) {\n            console.log(\"Can't break walls that are already broken\");\n          } else {\n            this.verticalWalls[row][column + 1] = false;\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"hasWall\",\n    value: function hasWall(row, column, dir) {\n      switch (dir) {\n        case \"Down\":\n          return this.horizontalWalls[row + 1][column];\n\n        case \"Up\":\n          return this.horizontalWalls[row][column];\n\n        case \"Left\":\n          return this.verticalWalls[row][column];\n\n        case \"Right\":\n          return this.verticalWalls[row][column + 1];\n      }\n    }\n  }, {\n    key: \"showWalls\",\n    value: function showWalls() {\n      var positions = [];\n\n      for (var y = 0; y <= this.rows; y++) {\n        for (var x = 0; x <= this.cols; x++) {\n          // get current point\n          var point = this.points[x + y * (this.cols + 1)]; // test horizontal walls\n\n          if (this.horizontalWalls[y][x]) {\n            // graphics.lineStyle(1, this.wallColor)\n            //     .moveTo(point.x, point.y)\n            //     .lineTo(point.x + this.blockSize, point.y);\n            positions.push(point.x, point.y, point.x + this.blockSize, point.y);\n          } // test verical walls\n\n\n          if (this.verticalWalls[y] && this.verticalWalls[y][x]) {\n            // graphics.lineStyle(1, this.wallColor)\n            //     .moveTo(point.x, point.y)\n            //     .lineTo(point.x, point.y + this.blockSize);\n            positions.push(point.x, point.y, point.x, point.y + this.blockSize);\n          }\n        }\n      }\n\n      this.app.renderer.drawLines(positions, this.options.wallColor);\n    }\n  }, {\n    key: \"createTiles\",\n    value: function createTiles() {\n      var tileRows = this.rows * this.tilesInBlock;\n      var tileCols = this.cols * this.tilesInBlock;\n      var offX = (this.app.canvas.width - this.cols * this.blockSize) / 2;\n      var offY = (this.app.canvas.height - this.rows * this.blockSize) / 2;\n\n      for (var y = 0; y < tileRows; y++) {\n        for (var x = 0; x < tileCols; x++) {\n          var tile = new _Vector__WEBPACK_IMPORTED_MODULE_3__[\"Vec2\"](x * this.tileSize + offX, y * this.tileSize + offY);\n          this.tiles.push(tile);\n        }\n      }\n\n      this.updateTiles();\n    }\n  }, {\n    key: \"updateTiles\",\n    value: function updateTiles() {\n      var _this = this;\n\n      var dist = Object(_pathfinding__WEBPACK_IMPORTED_MODULE_5__[\"mapDistances\"])(this, this.root);\n      var func = this.fillFunc(); // this.tileGraphics.clear();\n\n      this.tiles.forEach(function (tile, i) {\n        var c = dist[i] * _this.colorAmp; // this.tileGraphics.beginFill(func(c));\n        // this.tileGraphics.drawRect(tile.x, tile.y, this.tileSize, this.tileSize);\n      }); // this.tileGraphics.endFill();\n    }\n  }, {\n    key: \"updatePointerPos\",\n    value: function updatePointerPos() {\n      var _this2 = this;\n\n      var offX = (this.app.canvas.width - this.cols * this.blockSize) / 2;\n      var offY = (this.app.canvas.height - this.rows * this.blockSize) / 2;\n\n      document.onpointermove = function (e) {\n        var x = e.clientX - offX;\n        var y = e.clientY - offY;\n        var tileX = (x - x % _this2.tileSize) / _this2.tileSize;\n        var tileY = (y - y % _this2.tileSize) / _this2.tileSize;\n\n        if (x >= 0 && y >= 0 && tileX < _this2.cols * _this2.tilesInBlock && tileY < _this2.rows * _this2.tilesInBlock) {\n          _this2.root = Math.floor(tileX + _this2.cols * _this2.tilesInBlock * tileY);\n        }\n      };\n    }\n  }, {\n    key: \"fillFunc\",\n    value: function fillFunc() {\n      var _this3 = this;\n\n      var g = this.options.grey;\n      var ig = this.options.greyInvert;\n\n      if (g) {\n        return function (c) {\n          var v = Math.max(g, 255 - c);\n          return _this3.rgb(v, v, v);\n        };\n      } else if (ig) {\n        return function (c) {\n          var a = Math.min(255, c + ig);\n          return _this3.rgb(a, a, a);\n        };\n      } else {\n        return function (c) {\n          return _this3.rgb(Math.min(255, c), 255, 255);\n        };\n      }\n    }\n  }, {\n    key: \"rgb\",\n    value: function rgb(r, g, b) {\n      return (r << 16) + (g << 8) + b;\n    }\n  }, {\n    key: \"updateRootDir\",\n    value: function updateRootDir(delta) {\n      var _this4 = this;\n\n      if (Math.floor(delta * this.frameCount) % 1 == 0) {\n        var c = this.cols;\n        var x = this.root % c;\n        var y = (this.root - x) / c;\n        var arr = [[y, x - 1, \"Left\"], [y + 1, x, \"Down\"], [y - 1, x, \"Up\"], [y, x + 1, \"Right\"]];\n        var legal = arr.filter(function (d) {\n          return !_this4.hasWall(y, x, d[2]);\n        });\n        var idx = legal.map(function (x) {\n          return x[2];\n        }).indexOf(function (x) {\n          return x == _this4.rootDir;\n        });\n        var nextX = x;\n        var nextY = y;\n\n        if (idx != -1) {\n          // do not change direction\n          nextY = legal[idx][0];\n          nextX = legal[idx][1];\n        } else if (legal.length > 0) {\n          var i = Math.floor(Math.random() * legal.length);\n          this.rootDir = legal[i][2];\n          nextY = legal[i][0];\n          nextX = legal[i][1];\n        }\n\n        this.root = nextX + nextY * c;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this.frameCount % 1 == 0) {\n        this.updateTiles();\n      }\n\n      if (this.rootMoving) {\n        this.updateRootDir(delta);\n      }\n\n      this.frameCount++;\n    }\n  }]);\n\n  return Grid;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./maze/Grid.js\n");

/***/ }),

/***/ "./maze/Maze.js":
/*!**********************!*\
  !*** ./maze/Maze.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Maze; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Grid */ \"./maze/Grid.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! valo.js */ \"../valo.js/build/valo.js\");\n/* harmony import */ var valo_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(valo_js__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nvar Maze = /*#__PURE__*/function () {\n  function Maze(sceneid, options) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Maze);\n\n    this.givenId = sceneid;\n    this.sceneid = this.givenId ? this.givenId : \"scene\";\n    this.options = options || {}; // must be atleast an empty object\n\n    this.app;\n    this.grid;\n  }\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Maze, [{\n    key: \"create\",\n    value: function create() {\n      this.app = new valo_js__WEBPACK_IMPORTED_MODULE_3__[\"VALO2D\"](this.sceneid, {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        clearBeforeRender: true,\n        preserveDrawingBuffer: false,\n        transparent: false,\n        autoResize: true,\n        backgroundColor: [1, 1, 1, 1]\n      });\n      this.grid = new _Grid__WEBPACK_IMPORTED_MODULE_2__[\"Grid\"](this.app, this.options);\n      this.createScene(this.sceneid);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.app.ticker.destroy();\n      this.app = null;\n      this.grid = null;\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene(sceneid) {\n      var _this = this;\n\n      var div;\n\n      if (this.givenId) {\n        div = document.getElementById(sceneid);\n        this.addEngineResize();\n      } else {\n        div = this.createDiv(sceneid);\n      }\n\n      div.appendChild(this.app.view);\n      this.app.ticker.add(function (delta) {\n        _this.grid.update(delta);\n      });\n    }\n  }, {\n    key: \"createDiv\",\n    value: function createDiv(sceneid) {\n      var div = document.createElement(\"div\");\n      div.setAttribute(\"id\", sceneid);\n      document.body.appendChild(div);\n      this.addStyleTags();\n      this.addResizes();\n      return div;\n    }\n  }, {\n    key: \"addFpsCounter\",\n    value: function addFpsCounter() {\n      var _this2 = this;\n\n      var style = document.createElement('style');\n      style.innerHTML = \"\\n      #fps {\\n        position: absolute;\\n        margin: 10px;\\n        bottom: 0;\\n        right: 0;\\n      }\\n      \";\n      document.head.appendChild(style); // FPS COUNTER\n\n      var element = document.createElement(\"p\");\n      element.setAttribute(\"id\", \"fps\");\n      document.getElementById(this.sceneid).appendChild(element);\n      setInterval(function () {\n        if (_this2.app) {\n          element.innerHTML = \"FPS: \" + String(Math.floor(_this2.app.ticker.FPS));\n        }\n      }, 1000);\n    }\n  }, {\n    key: \"addResizes\",\n    value: function addResizes() {\n      this.addEngineResize();\n      var vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n      window.addEventListener('resize', function () {\n        var vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n      });\n    }\n  }, {\n    key: \"addEngineResize\",\n    value: function addEngineResize() {\n      var _this3 = this;\n\n      window.onresize = function (event) {\n        var w = window.innerWidth;\n        var h = window.innerHeight;\n        _this3.app.renderer.view.style.width = w + \"px\";\n        _this3.app.renderer.view.style.height = h + \"px\";\n\n        _this3.app.renderer.resize(w, h);\n      };\n    }\n  }, {\n    key: \"addStyleTags\",\n    value: function addStyleTags() {\n      // add style tags\n      var style = document.createElement('style');\n      style.innerHTML = \"\\n      #\".concat(this.sceneid, \" {\\n        height: 100vh;\\n        height: calc(100 * var(--vh));\\n        width: 100vw;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        overflow: hidden;\\n        z-index: -10;\\n      }\\n      \");\n      document.head.appendChild(style);\n    }\n  }]);\n\n  return Maze;\n}();\n\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./maze/Maze.js\n");

/***/ }),

/***/ "./maze/Vector.js":
/*!************************!*\
  !*** ./maze/Vector.js ***!
  \************************/
/*! exports provided: Vec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vec2\", function() { return Vec2; });\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n\n\nvar Vec2 = /*#__PURE__*/function () {\n  function Vec2(x, y) {\n    Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Vec2);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  Object(_Users_olivermulari_Documents_dev_hobbies_viewer_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Vec2, [{\n    key: \"add\",\n    value: function add(vec) {\n      this.x += vec.x;\n      this.y += vec.y;\n      return this;\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(num) {\n      this.x *= num;\n      this.y *= num;\n      return this;\n    }\n  }, {\n    key: \"div\",\n    value: function div(n) {\n      this.x /= n;\n      this.y /= n;\n      return this;\n    }\n  }, {\n    key: \"mag\",\n    value: function mag() {\n      return Math.sqrt(this.magSq());\n    }\n  }, {\n    key: \"magSq\",\n    value: function magSq() {\n      var x = this.x,\n          y = this.y;\n      return x * x + y * y;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(l) {\n      var mSq = this.magSq();\n\n      if (mSq > l * l) {\n        this.div(Math.sqrt(mSq));\n        this.multiply(l);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      return this.div(this.mag());\n    }\n  }, {\n    key: \"setMag\",\n    value: function setMag(n) {\n      return this.normalize().multiply(n);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vec2(this.x, this.y);\n    }\n  }]);\n\n  return Vec2;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmxvd2xpbmVzL1ZlY3Rvci5qcz83N2ViIl0sIm5hbWVzIjpbIlZlYzIiLCJ4IiwieSIsInZlYyIsIm51bSIsIm4iLCJNYXRoIiwic3FydCIsIm1hZ1NxIiwibCIsIm1TcSIsImRpdiIsIm11bHRpcGx5IiwibWFnIiwibm9ybWFsaXplIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFNQSxJQUFiO0FBQ0UsZ0JBQVlDLENBQVosRUFBZUMsQ0FBZixFQUFrQjtBQUFBOztBQUNoQixTQUFLRCxDQUFMLEdBQVNBLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVNBLENBQVQ7QUFDRDs7QUFKSDtBQUFBO0FBQUEsd0JBS01DLEdBTE4sRUFLVztBQUNQLFdBQUtGLENBQUwsSUFBVUUsR0FBRyxDQUFDRixDQUFkO0FBQ0EsV0FBS0MsQ0FBTCxJQUFVQyxHQUFHLENBQUNELENBQWQ7QUFDQSxhQUFPLElBQVA7QUFDRDtBQVRIO0FBQUE7QUFBQSw2QkFVV0UsR0FWWCxFQVVnQjtBQUNaLFdBQUtILENBQUwsSUFBVUcsR0FBVjtBQUNBLFdBQUtGLENBQUwsSUFBVUUsR0FBVjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBZEg7QUFBQTtBQUFBLHdCQWVNQyxDQWZOLEVBZVM7QUFDTCxXQUFLSixDQUFMLElBQVVJLENBQVY7QUFDQSxXQUFLSCxDQUFMLElBQVVHLENBQVY7QUFDQSxhQUFPLElBQVA7QUFDRDtBQW5CSDtBQUFBO0FBQUEsMEJBb0JRO0FBQ0osYUFBT0MsSUFBSSxDQUFDQyxJQUFMLENBQVUsS0FBS0MsS0FBTCxFQUFWLENBQVA7QUFDRDtBQXRCSDtBQUFBO0FBQUEsNEJBdUJVO0FBQ04sVUFBSVAsQ0FBQyxHQUFHLEtBQUtBLENBQWI7QUFBQSxVQUFnQkMsQ0FBQyxHQUFHLEtBQUtBLENBQXpCO0FBQ0EsYUFBT0QsQ0FBQyxHQUFHQSxDQUFKLEdBQVFDLENBQUMsR0FBR0EsQ0FBbkI7QUFDRDtBQTFCSDtBQUFBO0FBQUEsMEJBMkJRTyxDQTNCUixFQTJCVztBQUNQLFVBQUlDLEdBQUcsR0FBRyxLQUFLRixLQUFMLEVBQVY7O0FBQ0EsVUFBR0UsR0FBRyxHQUFHRCxDQUFDLEdBQUNBLENBQVgsRUFBYztBQUNaLGFBQUtFLEdBQUwsQ0FBU0wsSUFBSSxDQUFDQyxJQUFMLENBQVVHLEdBQVYsQ0FBVDtBQUNBLGFBQUtFLFFBQUwsQ0FBY0gsQ0FBZDtBQUNEOztBQUNELGFBQU8sSUFBUDtBQUNEO0FBbENIO0FBQUE7QUFBQSxnQ0FtQ2M7QUFDVixhQUFPLEtBQUtFLEdBQUwsQ0FBUyxLQUFLRSxHQUFMLEVBQVQsQ0FBUDtBQUNEO0FBckNIO0FBQUE7QUFBQSwyQkFzQ1NSLENBdENULEVBc0NZO0FBQ1IsYUFBTyxLQUFLUyxTQUFMLEdBQWlCRixRQUFqQixDQUEwQlAsQ0FBMUIsQ0FBUDtBQUNEO0FBeENIO0FBQUE7QUFBQSw0QkF5Q1U7QUFDTixhQUFPLElBQUlMLElBQUosQ0FBUyxLQUFLQyxDQUFkLEVBQWlCLEtBQUtDLENBQXRCLENBQVA7QUFDRDtBQTNDSDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vbWF6ZS9WZWN0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmVjMiB7XG4gIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cbiAgYWRkKHZlYykge1xuICAgIHRoaXMueCArPSB2ZWMueDtcbiAgICB0aGlzLnkgKz0gdmVjLnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbXVsdGlwbHkobnVtKSB7XG4gICAgdGhpcy54ICo9IG51bTtcbiAgICB0aGlzLnkgKj0gbnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRpdihuKSB7XG4gICAgdGhpcy54IC89IG47XG4gICAgdGhpcy55IC89IG47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbWFnKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5tYWdTcSgpKTtcbiAgfVxuICBtYWdTcSgpIHtcbiAgICBsZXQgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcbiAgICByZXR1cm4geCAqIHggKyB5ICogeTtcbiAgfSBcbiAgbGltaXQobCkge1xuICAgIHZhciBtU3EgPSB0aGlzLm1hZ1NxKCk7XG4gICAgaWYobVNxID4gbCpsKSB7XG4gICAgICB0aGlzLmRpdihNYXRoLnNxcnQobVNxKSk7XG4gICAgICB0aGlzLm11bHRpcGx5KGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBub3JtYWxpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2KHRoaXMubWFnKCkpO1xuICB9XG4gIHNldE1hZyhuKSB7XG4gICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHkobik7XG4gIH1cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMueCwgdGhpcy55KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./maze/Vector.js\n");

/***/ }),

/***/ "./maze/mazegenerator.js":
/*!*******************************!*\
  !*** ./maze/mazegenerator.js ***!
  \*******************************/
/*! exports provided: generateMaze */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateMaze\", function() { return generateMaze; });\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector */ \"./maze/Vector.js\");\n\nfunction generateMaze(maze) {\n  var visited = Array(maze.rows * maze.cols).fill(false);\n\n  var legalNeighbours = function legalNeighbours(vec) {\n    var x = vec.x;\n    var y = vec.y;\n    var arr = [[y, x - 1, \"Left\"], [y + 1, x, \"Down\"], [y - 1, x, \"Up\"], [y, x + 1, \"Right\"]];\n    return arr.filter(function (num) {\n      return num[0] >= 0 && num[0] < maze.rows && num[1] >= 0 && num[1] < maze.cols;\n    });\n  };\n\n  var stack = [];\n  stack.push(new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0));\n\n  while (stack.length > 0) {\n    var c = stack.pop();\n    visited[c.y * maze.cols + c.x] = true;\n    var nextTo = legalNeighbours(c).filter(function (x) {\n      return !visited[x[0] * maze.cols + x[1]];\n    });\n\n    if (nextTo.length != 0) {\n      var r = Math.floor(Math.random() * nextTo.length);\n      var i = 0;\n\n      while (i < nextTo.length) {\n        var x = nextTo[i];\n\n        if (i == r) {\n          maze.breakWall(c.y, c.x, x[2]);\n        }\n\n        stack.push(new _Vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](x[1], x[0]));\n        i++;\n      }\n    }\n  }\n\n  console.log(\"Maze Generated!\");\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbWF6ZS9tYXplZ2VuZXJhdG9yLmpzP2UwN2UiXSwibmFtZXMiOlsiZ2VuZXJhdGVNYXplIiwibWF6ZSIsInZpc2l0ZWQiLCJBcnJheSIsInJvd3MiLCJjb2xzIiwiZmlsbCIsImxlZ2FsTmVpZ2hib3VycyIsInZlYyIsIngiLCJ5IiwiYXJyIiwiZmlsdGVyIiwibnVtIiwic3RhY2siLCJwdXNoIiwiVmVjMiIsImxlbmd0aCIsImMiLCJwb3AiLCJuZXh0VG8iLCJyIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiaSIsImJyZWFrV2FsbCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRU8sU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7QUFDakMsTUFBTUMsT0FBTyxHQUFHQyxLQUFLLENBQUNGLElBQUksQ0FBQ0csSUFBTCxHQUFZSCxJQUFJLENBQUNJLElBQWxCLENBQUwsQ0FBNkJDLElBQTdCLENBQWtDLEtBQWxDLENBQWhCOztBQUVBLE1BQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsR0FBRCxFQUFTO0FBQy9CLFFBQU1DLENBQUMsR0FBR0QsR0FBRyxDQUFDQyxDQUFkO0FBQWlCLFFBQU1DLENBQUMsR0FBR0YsR0FBRyxDQUFDRSxDQUFkO0FBQ2pCLFFBQU1DLEdBQUcsR0FBRyxDQUNWLENBQUNELENBQUQsRUFBSUQsQ0FBQyxHQUFDLENBQU4sRUFBUyxNQUFULENBRFUsRUFFVixDQUFDQyxDQUFDLEdBQUMsQ0FBSCxFQUFNRCxDQUFOLEVBQVMsTUFBVCxDQUZVLEVBR1YsQ0FBQ0MsQ0FBQyxHQUFDLENBQUgsRUFBTUQsQ0FBTixFQUFTLElBQVQsQ0FIVSxFQUlWLENBQUNDLENBQUQsRUFBSUQsQ0FBQyxHQUFDLENBQU4sRUFBUyxPQUFULENBSlUsQ0FBWjtBQU1BLFdBQU9FLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLFVBQUFDLEdBQUc7QUFBQSxhQUFLQSxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsQ0FBWCxJQUFrQkEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTWixJQUFJLENBQUNHLElBQWhDLElBQTBDUyxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsQ0FBcEQsSUFBMkRBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU1osSUFBSSxDQUFDSSxJQUE3RTtBQUFBLEtBQWQsQ0FBUDtBQUNELEdBVEQ7O0FBV0EsTUFBTVMsS0FBSyxHQUFHLEVBQWQ7QUFDQUEsT0FBSyxDQUFDQyxJQUFOLENBQVcsSUFBSUMsNENBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixDQUFYOztBQUVBLFNBQU1GLEtBQUssQ0FBQ0csTUFBTixHQUFlLENBQXJCLEVBQXdCO0FBQ3RCLFFBQU1DLENBQUMsR0FBR0osS0FBSyxDQUFDSyxHQUFOLEVBQVY7QUFDQWpCLFdBQU8sQ0FBQ2dCLENBQUMsQ0FBQ1IsQ0FBRixHQUFNVCxJQUFJLENBQUNJLElBQVgsR0FBa0JhLENBQUMsQ0FBQ1QsQ0FBckIsQ0FBUCxHQUFpQyxJQUFqQztBQUVBLFFBQU1XLE1BQU0sR0FBR2IsZUFBZSxDQUFDVyxDQUFELENBQWYsQ0FBbUJOLE1BQW5CLENBQTBCLFVBQUFILENBQUM7QUFBQSxhQUFJLENBQUNQLE9BQU8sQ0FBQ08sQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPUixJQUFJLENBQUNJLElBQVosR0FBbUJJLENBQUMsQ0FBQyxDQUFELENBQXJCLENBQVo7QUFBQSxLQUEzQixDQUFmOztBQUVBLFFBQUlXLE1BQU0sQ0FBQ0gsTUFBUCxJQUFpQixDQUFyQixFQUF3QjtBQUN0QixVQUFNSSxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JKLE1BQU0sQ0FBQ0gsTUFBbEMsQ0FBVjtBQUNBLFVBQUlRLENBQUMsR0FBRyxDQUFSOztBQUNBLGFBQU9BLENBQUMsR0FBR0wsTUFBTSxDQUFDSCxNQUFsQixFQUEwQjtBQUN4QixZQUFNUixDQUFDLEdBQUdXLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFoQjs7QUFDQSxZQUFJQSxDQUFDLElBQUlKLENBQVQsRUFBWTtBQUNWcEIsY0FBSSxDQUFDeUIsU0FBTCxDQUFlUixDQUFDLENBQUNSLENBQWpCLEVBQW9CUSxDQUFDLENBQUNULENBQXRCLEVBQXlCQSxDQUFDLENBQUMsQ0FBRCxDQUExQjtBQUNEOztBQUNESyxhQUFLLENBQUNDLElBQU4sQ0FBVyxJQUFJQyw0Q0FBSixDQUFTUCxDQUFDLENBQUMsQ0FBRCxDQUFWLEVBQWVBLENBQUMsQ0FBQyxDQUFELENBQWhCLENBQVg7QUFDQWdCLFNBQUM7QUFDRjtBQUNGO0FBQ0Y7O0FBRURFLFNBQU8sQ0FBQ0MsR0FBUixDQUFZLGlCQUFaO0FBQ0QiLCJmaWxlIjoiLi9tYXplL21hemVnZW5lcmF0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWMyIH0gZnJvbSBcIi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZU1hemUobWF6ZSkge1xuICBjb25zdCB2aXNpdGVkID0gQXJyYXkobWF6ZS5yb3dzICogbWF6ZS5jb2xzKS5maWxsKGZhbHNlKTtcblxuICBjb25zdCBsZWdhbE5laWdoYm91cnMgPSAodmVjKSA9PiB7XG4gICAgY29uc3QgeCA9IHZlYy54OyBjb25zdCB5ID0gdmVjLnk7XG4gICAgY29uc3QgYXJyID0gW1xuICAgICAgW3ksIHgtMSwgXCJMZWZ0XCJdLFxuICAgICAgW3krMSwgeCwgXCJEb3duXCJdLFxuICAgICAgW3ktMSwgeCwgXCJVcFwiXSxcbiAgICAgIFt5LCB4KzEsIFwiUmlnaHRcIl1cbiAgICBdO1xuICAgIHJldHVybiBhcnIuZmlsdGVyKG51bSA9PiAobnVtWzBdID49IDApICYmIChudW1bMF0gPCBtYXplLnJvd3MpICYmIChudW1bMV0gPj0gMCkgJiYgKG51bVsxXSA8IG1hemUuY29scykpXG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuICBzdGFjay5wdXNoKG5ldyBWZWMyKDAsIDApKVxuXG4gIHdoaWxlKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBjID0gc3RhY2sucG9wKClcbiAgICB2aXNpdGVkW2MueSAqIG1hemUuY29scyArIGMueF0gPSB0cnVlXG4gICAgXG4gICAgY29uc3QgbmV4dFRvID0gbGVnYWxOZWlnaGJvdXJzKGMpLmZpbHRlcih4ID0+ICF2aXNpdGVkW3hbMF0gKiBtYXplLmNvbHMgKyB4WzFdXSlcbiAgICBcbiAgICBpZiAobmV4dFRvLmxlbmd0aCAhPSAwKSB7XG4gICAgICBjb25zdCByID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbmV4dFRvLmxlbmd0aClcbiAgICAgIGxldCBpID0gMFxuICAgICAgd2hpbGUgKGkgPCBuZXh0VG8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHggPSBuZXh0VG9baV1cbiAgICAgICAgaWYgKGkgPT0gcikge1xuICAgICAgICAgIG1hemUuYnJlYWtXYWxsKGMueSwgYy54LCB4WzJdKVxuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnB1c2gobmV3IFZlYzIoeFsxXSwgeFswXSkpXG4gICAgICAgIGkrKztcbiAgICAgIH0gXG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5sb2coXCJNYXplIEdlbmVyYXRlZCFcIilcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./maze/mazegenerator.js\n");

/***/ }),

/***/ "./maze/pathfinding.js":
/*!*****************************!*\
  !*** ./maze/pathfinding.js ***!
  \*****************************/
/*! exports provided: mapDistances */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapDistances\", function() { return mapDistances; });\nfunction mapDistances(maze, source) {\n  var T = maze.tilesInBlock;\n  var H = maze.rows * T;\n  var W = maze.cols * T;\n  var distances = Array(H * W).fill(-1);\n  var queue = [];\n  queue.unshift(source);\n  distances[source] = 0;\n\n  var neighbours = function neighbours(num) {\n    var x = num % W;\n    var y = (num - x) / W;\n    var arr = [];\n    if (x - 1 >= 0 && (x % T != 0 || !maze.verticalWalls[(y - y % T) / T][x / T])) arr.push(x - 1 + W * y);\n    if (x + 1 < W && (x % T != T - 1 || !maze.verticalWalls[(y - y % T) / T][(x + 1) / T])) arr.push(x + 1 + W * y);\n    if (y - 1 >= 0 && (y % T != 0 || !maze.horizontalWalls[y / T][(x - x % T) / T])) arr.push((y - 1) * W + x);\n    if (y + 1 < H && (y % T != T - 1 || !maze.horizontalWalls[(y + 1) / T][(x - x % T) / T])) arr.push(x + (y + 1) * W);\n    return arr;\n  };\n\n  var depth = 1;\n\n  while (distances.find(function (x) {\n    return x == -1;\n  })) {\n    var n = queue.length;\n    var i = 0;\n\n    while (i < n) {\n      var c = queue.pop();\n      neighbours(c).filter(function (v) {\n        return distances[v] == -1;\n      }).forEach(function (v) {\n        distances[v] = depth;\n        queue.unshift(v);\n      });\n      i++;\n    }\n\n    depth++;\n  }\n\n  return distances;\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbWF6ZS9wYXRoZmluZGluZy5qcz80MTYzIl0sIm5hbWVzIjpbIm1hcERpc3RhbmNlcyIsIm1hemUiLCJzb3VyY2UiLCJUIiwidGlsZXNJbkJsb2NrIiwiSCIsInJvd3MiLCJXIiwiY29scyIsImRpc3RhbmNlcyIsIkFycmF5IiwiZmlsbCIsInF1ZXVlIiwidW5zaGlmdCIsIm5laWdoYm91cnMiLCJudW0iLCJ4IiwieSIsImFyciIsInZlcnRpY2FsV2FsbHMiLCJwdXNoIiwiaG9yaXpvbnRhbFdhbGxzIiwiZGVwdGgiLCJmaW5kIiwibiIsImxlbmd0aCIsImkiLCJjIiwicG9wIiwiZmlsdGVyIiwidiIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBTyxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsTUFBNUIsRUFBb0M7QUFDekMsTUFBTUMsQ0FBQyxHQUFHRixJQUFJLENBQUNHLFlBQWY7QUFDQSxNQUFNQyxDQUFDLEdBQUdKLElBQUksQ0FBQ0ssSUFBTCxHQUFZSCxDQUF0QjtBQUNBLE1BQU1JLENBQUMsR0FBR04sSUFBSSxDQUFDTyxJQUFMLEdBQVlMLENBQXRCO0FBRUEsTUFBTU0sU0FBUyxHQUFHQyxLQUFLLENBQUNMLENBQUMsR0FBR0UsQ0FBTCxDQUFMLENBQWFJLElBQWIsQ0FBa0IsQ0FBQyxDQUFuQixDQUFsQjtBQUVBLE1BQU1DLEtBQUssR0FBRyxFQUFkO0FBRUFBLE9BQUssQ0FBQ0MsT0FBTixDQUFjWCxNQUFkO0FBQ0FPLFdBQVMsQ0FBQ1AsTUFBRCxDQUFULEdBQW9CLENBQXBCOztBQUVBLE1BQU1ZLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNDLEdBQUQsRUFBUztBQUMxQixRQUFNQyxDQUFDLEdBQUdELEdBQUcsR0FBR1IsQ0FBaEI7QUFDQSxRQUFNVSxDQUFDLEdBQUcsQ0FBQ0YsR0FBRyxHQUFHQyxDQUFQLElBQVlULENBQXRCO0FBQ0EsUUFBTVcsR0FBRyxHQUFHLEVBQVo7QUFDQSxRQUFJRixDQUFDLEdBQUMsQ0FBRixJQUFPLENBQVAsS0FBYUEsQ0FBQyxHQUFHYixDQUFKLElBQVMsQ0FBVCxJQUFnQixDQUFDRixJQUFJLENBQUNrQixhQUFMLENBQW1CLENBQUNGLENBQUMsR0FBQ0EsQ0FBQyxHQUFDZCxDQUFMLElBQVFBLENBQTNCLEVBQThCYSxDQUFDLEdBQUNiLENBQWhDLENBQTlCLENBQUosRUFBNkVlLEdBQUcsQ0FBQ0UsSUFBSixDQUFVSixDQUFDLEdBQUMsQ0FBSCxHQUFNVCxDQUFDLEdBQUNVLENBQWpCO0FBQzdFLFFBQUlELENBQUMsR0FBQyxDQUFGLEdBQU1ULENBQU4sS0FBYVMsQ0FBQyxHQUFHYixDQUFKLElBQVNBLENBQUMsR0FBQyxDQUFYLElBQWdCLENBQUNGLElBQUksQ0FBQ2tCLGFBQUwsQ0FBbUIsQ0FBQ0YsQ0FBQyxHQUFDQSxDQUFDLEdBQUNkLENBQUwsSUFBUUEsQ0FBM0IsRUFBOEIsQ0FBQ2EsQ0FBQyxHQUFDLENBQUgsSUFBTWIsQ0FBcEMsQ0FBOUIsQ0FBSixFQUE2RWUsR0FBRyxDQUFDRSxJQUFKLENBQVVKLENBQUMsR0FBQyxDQUFILEdBQU1ULENBQUMsR0FBQ1UsQ0FBakI7QUFDN0UsUUFBSUEsQ0FBQyxHQUFDLENBQUYsSUFBTyxDQUFQLEtBQWFBLENBQUMsR0FBR2QsQ0FBSixJQUFTLENBQVQsSUFBZ0IsQ0FBQ0YsSUFBSSxDQUFDb0IsZUFBTCxDQUFxQkosQ0FBQyxHQUFDZCxDQUF2QixFQUEwQixDQUFDYSxDQUFDLEdBQUNBLENBQUMsR0FBQ2IsQ0FBTCxJQUFRQSxDQUFsQyxDQUE5QixDQUFKLEVBQTZFZSxHQUFHLENBQUNFLElBQUosQ0FBUyxDQUFDSCxDQUFDLEdBQUMsQ0FBSCxJQUFNVixDQUFOLEdBQVFTLENBQWpCO0FBQzdFLFFBQUlDLENBQUMsR0FBQyxDQUFGLEdBQU1aLENBQU4sS0FBYVksQ0FBQyxHQUFHZCxDQUFKLElBQVNBLENBQUMsR0FBQyxDQUFYLElBQWdCLENBQUNGLElBQUksQ0FBQ29CLGVBQUwsQ0FBcUIsQ0FBQ0osQ0FBQyxHQUFDLENBQUgsSUFBTWQsQ0FBM0IsRUFBOEIsQ0FBQ2EsQ0FBQyxHQUFDQSxDQUFDLEdBQUNiLENBQUwsSUFBUUEsQ0FBdEMsQ0FBOUIsQ0FBSixFQUE2RWUsR0FBRyxDQUFDRSxJQUFKLENBQVNKLENBQUMsR0FBQyxDQUFDQyxDQUFDLEdBQUMsQ0FBSCxJQUFNVixDQUFqQjtBQUM3RSxXQUFPVyxHQUFQO0FBQ0QsR0FURDs7QUFXQSxNQUFJSSxLQUFLLEdBQUcsQ0FBWjs7QUFDQSxTQUFNYixTQUFTLENBQUNjLElBQVYsQ0FBZSxVQUFBUCxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxJQUFJLENBQUMsQ0FBVjtBQUFBLEdBQWhCLENBQU4sRUFBb0M7QUFDbEMsUUFBTVEsQ0FBQyxHQUFHWixLQUFLLENBQUNhLE1BQWhCO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsV0FBTUEsQ0FBQyxHQUFHRixDQUFWLEVBQWE7QUFDWCxVQUFNRyxDQUFDLEdBQUdmLEtBQUssQ0FBQ2dCLEdBQU4sRUFBVjtBQUNBZCxnQkFBVSxDQUFDYSxDQUFELENBQVYsQ0FBY0UsTUFBZCxDQUFxQixVQUFBQyxDQUFDO0FBQUEsZUFBSXJCLFNBQVMsQ0FBQ3FCLENBQUQsQ0FBVCxJQUFnQixDQUFDLENBQXJCO0FBQUEsT0FBdEIsRUFBOENDLE9BQTlDLENBQXNELFVBQUFELENBQUMsRUFBSTtBQUFDckIsaUJBQVMsQ0FBQ3FCLENBQUQsQ0FBVCxHQUFlUixLQUFmO0FBQXNCVixhQUFLLENBQUNDLE9BQU4sQ0FBY2lCLENBQWQ7QUFBaUIsT0FBbkc7QUFDQUosT0FBQztBQUNGOztBQUNESixTQUFLO0FBQ047O0FBRUQsU0FBT2IsU0FBUDtBQUNEIiwiZmlsZSI6Ii4vbWF6ZS9wYXRoZmluZGluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtYXBEaXN0YW5jZXMobWF6ZSwgc291cmNlKSB7XG4gIGNvbnN0IFQgPSBtYXplLnRpbGVzSW5CbG9ja1xuICBjb25zdCBIID0gbWF6ZS5yb3dzICogVDtcbiAgY29uc3QgVyA9IG1hemUuY29scyAqIFQ7XG5cbiAgY29uc3QgZGlzdGFuY2VzID0gQXJyYXkoSCAqIFcpLmZpbGwoLTEpO1xuXG4gIGNvbnN0IHF1ZXVlID0gW107XG5cbiAgcXVldWUudW5zaGlmdChzb3VyY2UpO1xuICBkaXN0YW5jZXNbc291cmNlXSA9IDBcblxuICBjb25zdCBuZWlnaGJvdXJzID0gKG51bSkgPT4ge1xuICAgIGNvbnN0IHggPSBudW0gJSBXOyBcbiAgICBjb25zdCB5ID0gKG51bSAtIHgpIC8gVztcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBpZiAoeC0xID49IDAgJiYgKHggJSBUICE9IDAgICB8fCAhbWF6ZS52ZXJ0aWNhbFdhbGxzWyh5LXklVCkvVF1beC9UXSkgICAgICApIGFyci5wdXNoKCh4LTEpK1cqeSk7XG4gICAgaWYgKHgrMSA8IFcgICYmICh4ICUgVCAhPSBULTEgfHwgIW1hemUudmVydGljYWxXYWxsc1soeS15JVQpL1RdWyh4KzEpL1RdKSAgKSBhcnIucHVzaCgoeCsxKStXKnkpO1xuICAgIGlmICh5LTEgPj0gMCAmJiAoeSAlIFQgIT0gMCAgIHx8wqAhbWF6ZS5ob3Jpem9udGFsV2FsbHNbeS9UXVsoeC14JVQpL1RdKSAgICApIGFyci5wdXNoKCh5LTEpKlcreCk7XG4gICAgaWYgKHkrMSA8IEggICYmICh5ICUgVCAhPSBULTEgfHzCoCFtYXplLmhvcml6b250YWxXYWxsc1soeSsxKS9UXVsoeC14JVQpL1RdKSkgYXJyLnB1c2goeCsoeSsxKSpXKTtcbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgbGV0IGRlcHRoID0gMTtcbiAgd2hpbGUoZGlzdGFuY2VzLmZpbmQoeCA9PiB4ID09IC0xKSkge1xuICAgIGNvbnN0IG4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlKGkgPCBuKSB7XG4gICAgICBjb25zdCBjID0gcXVldWUucG9wKCk7XG4gICAgICBuZWlnaGJvdXJzKGMpLmZpbHRlcih2ID0+IGRpc3RhbmNlc1t2XSA9PSAtMSkuZm9yRWFjaCh2ID0+IHtkaXN0YW5jZXNbdl0gPSBkZXB0aDsgcXVldWUudW5zaGlmdCh2KX0pO1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBkZXB0aCsrO1xuICB9XG5cbiAgcmV0dXJuIGRpc3RhbmNlcztcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./maze/pathfinding.js\n");

/***/ }),

/***/ "./maze/presets.js":
/*!*************************!*\
  !*** ./maze/presets.js ***!
  \*************************/
/*! exports provided: presets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"presets\", function() { return presets; });\nfunction presets(name) {\n  switch (name) {\n    case \"Grey\":\n      return {\n        blockSize: 50,\n        tilesInBlock: 3,\n        wallColor: [0, 0, 0, 1],\n        colorAmp: 1,\n        grey: 220\n      };\n\n    case \"GreyInvert\":\n      return {\n        blockSize: 50,\n        tilesInBlock: 3,\n        wallColor: [1, 1, 1, 1],\n        colorAmp: 1,\n        greyInvert: 220\n      };\n\n    case \"Medium\":\n      return {\n        blockSize: 50,\n        tilesInBlock: 3,\n        wallColor: [0, 0, 0, 1],\n        colorAmp: 3\n      };\n\n    case \"Big\":\n      return {\n        blockSize: 100,\n        tilesInBlock: 12,\n        wallColor: [0, 0, 0, 1],\n        colorAmp: 5\n      };\n\n    case \"Basic\":\n    default:\n      return {\n        blockSize: 30,\n        tilesInBlock: 1,\n        wallColor: [0, 0, 0, 1],\n        colorAmp: 10\n      };\n  }\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbWF6ZS9wcmVzZXRzLmpzP2JhYmEiXSwibmFtZXMiOlsicHJlc2V0cyIsIm5hbWUiLCJibG9ja1NpemUiLCJ0aWxlc0luQmxvY2siLCJ3YWxsQ29sb3IiLCJjb2xvckFtcCIsImdyZXkiLCJncmV5SW52ZXJ0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQU8sU0FBU0EsT0FBVCxDQUFpQkMsSUFBakIsRUFBdUI7QUFDNUIsVUFBUUEsSUFBUjtBQUNFLFNBQUssTUFBTDtBQUNFLGFBQU87QUFDTEMsaUJBQVMsRUFBRSxFQUROO0FBRUxDLG9CQUFZLEVBQUUsQ0FGVDtBQUdMQyxpQkFBUyxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUhOO0FBSUxDLGdCQUFRLEVBQUUsQ0FKTDtBQUtMQyxZQUFJLEVBQUU7QUFMRCxPQUFQOztBQU9GLFNBQUssWUFBTDtBQUNJLGFBQU87QUFDTEosaUJBQVMsRUFBRSxFQUROO0FBRUxDLG9CQUFZLEVBQUUsQ0FGVDtBQUdMQyxpQkFBUyxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUhOO0FBSUxDLGdCQUFRLEVBQUUsQ0FKTDtBQUtMRSxrQkFBVSxFQUFFO0FBTFAsT0FBUDs7QUFPSixTQUFLLFFBQUw7QUFDSSxhQUFPO0FBQ0xMLGlCQUFTLEVBQUUsRUFETjtBQUVMQyxvQkFBWSxFQUFFLENBRlQ7QUFHTEMsaUJBQVMsRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FITjtBQUlMQyxnQkFBUSxFQUFFO0FBSkwsT0FBUDs7QUFNSixTQUFLLEtBQUw7QUFDSSxhQUFPO0FBQ0xILGlCQUFTLEVBQUUsR0FETjtBQUVMQyxvQkFBWSxFQUFFLEVBRlQ7QUFHTEMsaUJBQVMsRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FITjtBQUlMQyxnQkFBUSxFQUFFO0FBSkwsT0FBUDs7QUFNSixTQUFLLE9BQUw7QUFDQTtBQUNFLGFBQU87QUFDTEgsaUJBQVMsRUFBRSxFQUROO0FBRUxDLG9CQUFZLEVBQUUsQ0FGVDtBQUdMQyxpQkFBUyxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUhOO0FBSUxDLGdCQUFRLEVBQUU7QUFKTCxPQUFQO0FBakNKO0FBd0NEIiwiZmlsZSI6Ii4vbWF6ZS9wcmVzZXRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHByZXNldHMobmFtZSkge1xuICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlIFwiR3JleVwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmxvY2tTaXplOiA1MCxcbiAgICAgICAgdGlsZXNJbkJsb2NrOiAzLFxuICAgICAgICB3YWxsQ29sb3I6IFswLCAwLCAwLCAxXSxcbiAgICAgICAgY29sb3JBbXA6IDEsXG4gICAgICAgIGdyZXk6IDIyMFxuICAgICAgfVxuICAgIGNhc2UgXCJHcmV5SW52ZXJ0XCI6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmxvY2tTaXplOiA1MCxcbiAgICAgICAgICB0aWxlc0luQmxvY2s6IDMsXG4gICAgICAgICAgd2FsbENvbG9yOiBbMSwgMSwgMSwgMV0sXG4gICAgICAgICAgY29sb3JBbXA6IDEsXG4gICAgICAgICAgZ3JleUludmVydDogMjIwXG4gICAgICAgIH1cbiAgICBjYXNlIFwiTWVkaXVtXCI6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmxvY2tTaXplOiA1MCxcbiAgICAgICAgICB0aWxlc0luQmxvY2s6IDMsXG4gICAgICAgICAgd2FsbENvbG9yOiBbMCwgMCwgMCwgMV0sXG4gICAgICAgICAgY29sb3JBbXA6IDMsXG4gICAgICAgIH1cbiAgICBjYXNlIFwiQmlnXCI6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmxvY2tTaXplOiAxMDAsXG4gICAgICAgICAgdGlsZXNJbkJsb2NrOiAxMixcbiAgICAgICAgICB3YWxsQ29sb3I6IFswLCAwLCAwLCAxXSxcbiAgICAgICAgICBjb2xvckFtcDogNVxuICAgICAgICB9XG4gICAgY2FzZSBcIkJhc2ljXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJsb2NrU2l6ZTogMzAsXG4gICAgICAgIHRpbGVzSW5CbG9jazogMSxcbiAgICAgICAgd2FsbENvbG9yOiBbMCwgMCwgMCwgMV0sXG4gICAgICAgIGNvbG9yQW1wOiAxMFxuICAgICAgfVxuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./maze/presets.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcz81YTQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanM/YzEzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanM/MjIzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUIsbUJBQU8sQ0FBQyxxRkFBb0I7O0FBRW5EO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzPzNjOTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/assertThisInitialized.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcz9jOTczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanM/OTcwYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct */ \"./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY29uc3RydWN0LmpzP2IxN2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsaUZBQWtCOztBQUUvQywrQkFBK0IsbUJBQU8sQ0FBQyxxR0FBNEI7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NvbnN0cnVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG52YXIgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gcmVxdWlyZShcIi4vaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0XCIpO1xuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBzZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/construct.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanM/NWJjMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/createClass.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanM/OTUyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/defineProperty.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _classCallCheck; });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzP2Q0ZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _createClass; });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzP2JlZTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/createClass.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanM/MzZjNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/getPrototypeOf.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanM/ZWQ2ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsbUJBQU8sQ0FBQyxpRkFBa0I7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/inherits.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzPzRlYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/interopRequireDefault.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nmodule.exports = _interopRequireWildcard;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcz9kYmNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxzRkFBK0I7O0FBRXJEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDtcbiAgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuICBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9O1xuXG4gIHJldHVybiBjYWNoZTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7XG5cbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuICB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDtcblxuICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqO1xuXG4gIGlmIChjYWNoZSkge1xuICAgIGNhY2hlLnNldChvYmosIG5ld09iaik7XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzPzZmOGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyRUFBMkU7QUFDM0U7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3Q7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzPzExYjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/iterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanM/OWI0MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkMsK0JBQStCO0FBQzVFOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVSZXN0LmpzP2MyNDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVSZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/nonIterableRest.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanM/MDY3NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\n\nvar assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcz82YjU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxzRkFBK0I7O0FBRXJELDRCQUE0QixtQkFBTyxDQUFDLCtGQUF5Qjs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanM/NGE0YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/setPrototypeOf.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ \"./node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\n\nvar iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ \"./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ \"./node_modules/@babel/runtime/helpers/nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcz8yNzhjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQixtQkFBTyxDQUFDLGlGQUFrQjs7QUFFL0MsMkJBQTJCLG1CQUFPLENBQUMsNkZBQXdCOztBQUUzRCxpQ0FBaUMsbUJBQU8sQ0FBQyx5R0FBOEI7O0FBRXZFLHNCQUFzQixtQkFBTyxDQUFDLG1GQUFtQjs7QUFFakQ7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3RcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/slicedToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ \"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ \"./node_modules/@babel/runtime/helpers/nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanM/NDQ4YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0IsbUJBQU8sQ0FBQyx1RkFBcUI7O0FBRXJELHNCQUFzQixtQkFBTyxDQUFDLG1GQUFtQjs7QUFFakQsaUNBQWlDLG1CQUFPLENBQUMseUdBQThCOztBQUV2RSx3QkFBd0IsbUJBQU8sQ0FBQyx1RkFBcUI7O0FBRXJEO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/toConsumableArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzPzcwMzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/typeof.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ \"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanM/NjYxMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUIsbUJBQU8sQ0FBQyxxRkFBb0I7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheVwiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2EzNGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMEVBQXFCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var assign=Object.assign.bind(Object);module.exports=assign;module.exports.default=module.exports;\n//# sourceMappingURL=object-assign.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvb2JqZWN0LWFzc2lnbi5qcz80MWViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLHNDQUFzQyxzQkFBc0I7QUFDekUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9vYmplY3QtYXNzaWduLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFzc2lnbj1PYmplY3QuYXNzaWduLmJpbmQoT2JqZWN0KTttb2R1bGUuZXhwb3J0cz1hc3NpZ247bW9kdWxlLmV4cG9ydHMuZGVmYXVsdD1tb2R1bGUuZXhwb3J0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC1hc3NpZ24uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/object-assign.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=%2FUsers%2Folivermulari%2FDocuments%2Fdev%2Fhobbies%2Fviewer%2Fpages%2Findex.js!./":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=%2FUsers%2Folivermulari%2FDocuments%2Fdev%2Fhobbies%2Fviewer%2Fpages%2Findex.js ***!
  \********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(/*! ./pages/index.js */ \"./pages/index.js\");\n      }\n    ]);\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1jbGllbnQtcGFnZXMtbG9hZGVyLmpzPzQxYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQywwQ0FBaUU7QUFDeEY7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtY2xpZW50LXBhZ2VzLWxvYWRlci5qcz9wYWdlPSUyRiZhYnNvbHV0ZVBhZ2VQYXRoPSUyRlVzZXJzJTJGb2xpdmVybXVsYXJpJTJGRG9jdW1lbnRzJTJGZGV2JTJGaG9iYmllcyUyRnZpZXdlciUyRnBhZ2VzJTJGaW5kZXguanMhLi8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi9Vc2Vycy9vbGl2ZXJtdWxhcmkvRG9jdW1lbnRzL2Rldi9ob2JiaWVzL3ZpZXdlci9wYWdlcy9pbmRleC5qc1wiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=%2FUsers%2Folivermulari%2FDocuments%2Fdev%2Fhobbies%2Fviewer%2Fpages%2Findex.js!./\n");

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\n/**\n* Removes the trailing slash of a path if there is one. Preserves the root path `/`.\n*/\n\nfunction removePathTrailingSlash(path) {\n  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\n/**\n* Normalizes the trailing slash of a path according to the `trailingSlash` option\n* in `next.config.js`.\n*/\n\n\nvar normalizePathTrailingSlash =  false ? undefined : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2gudHM/NjMyMyJdLCJuYW1lcyI6WyJwYXRoIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJwcm9jZXNzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTs7QUFDTyx1Q0FBdUQ7QUFDNUQsU0FBT0EsSUFBSSxDQUFKQSxpQkFBc0JBLElBQUksS0FBMUJBLE1BQXFDQSxJQUFJLENBQUpBLFNBQWMsQ0FBbkRBLENBQXFDQSxDQUFyQ0EsR0FBUDtBQUdGO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLElBQU1DLDBCQUEwQixHQUFHQyxTQUNyQ0YsU0FEcUNFLEdBQW5DIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIHRoZSB0cmFpbGluZyBzbGFzaCBvZiBhIHBhdGggaWYgdGhlcmUgaXMgb25lLiBQcmVzZXJ2ZXMgdGhlIHJvb3QgcGF0aCBgL2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcGF0aC5lbmRzV2l0aCgnLycpICYmIHBhdGggIT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aFxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgdGhlIHRyYWlsaW5nIHNsYXNoIG9mIGEgcGF0aCBhY2NvcmRpbmcgdG8gdGhlIGB0cmFpbGluZ1NsYXNoYCBvcHRpb25cbiAqIGluIGBuZXh0LmNvbmZpZy5qc2AuXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSFxuICA/IChwYXRoOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgaWYgKC9cXC5bXi9dK1xcLz8kLy50ZXN0KHBhdGgpKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoKVxuICAgICAgfSBlbHNlIGlmIChwYXRoLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXRoICsgJy8nXG4gICAgICB9XG4gICAgfVxuICA6IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\n\nvar requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback || function (cb) {\n  var start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function timeRemaining() {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nvar cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2sudHM/ZmY5ZSJdLCJuYW1lcyI6WyJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwic2VsZiIsInN0YXJ0IiwiRGF0ZSIsInNldFRpbWVvdXQiLCJjYiIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsImNhbmNlbElkbGVDYWxsYmFjayIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFtQk8sSUFBTUEsbUJBQW1CLEdBQzdCLCtCQUErQkMsSUFBSSxDQUFwQyxtQkFBQyxJQUNELGNBRWtCO0FBQ2hCLE1BQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFoQixHQUFZQSxFQUFaO0FBQ0EsU0FBT0MsVUFBVSxDQUFDLFlBQVk7QUFDNUJDLE1BQUUsQ0FBQztBQUNEQyxnQkFBVSxFQURUO0FBRURDLG1CQUFhLEVBQUUseUJBQVk7QUFDekIsZUFBT0MsSUFBSSxDQUFKQSxPQUFZLE1BQU1MLElBQUksQ0FBSkEsUUFBekIsS0FBbUIsQ0FBWkssQ0FBUDtBQUhKSDtBQUFHLEtBQUQsQ0FBRkE7QUFEZSxLQUFqQixDQUFpQixDQUFqQjtBQU5HOzs7O0FBZ0JBLElBQU1JLGtCQUFrQixHQUM1QiwrQkFBK0JSLElBQUksQ0FBcEMsa0JBQUMsSUFDRCxjQUF5QztBQUN2QyxTQUFPUyxZQUFZLENBQW5CLEVBQW1CLENBQW5CO0FBSEciLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUgPSBhbnlcbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFja09wdGlvbnMgPSB7XG4gIHRpbWVvdXQ6IG51bWJlclxufVxudHlwZSBSZXF1ZXN0SWRsZUNhbGxiYWNrRGVhZGxpbmUgPSB7XG4gIHJlYWRvbmx5IGRpZFRpbWVvdXQ6IGJvb2xlYW5cbiAgdGltZVJlbWFpbmluZzogKCkgPT4gbnVtYmVyXG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogKFxuICAgICAgY2FsbGJhY2s6IChkZWFkbGluZTogUmVxdWVzdElkbGVDYWxsYmFja0RlYWRsaW5lKSA9PiB2b2lkLFxuICAgICAgb3B0cz86IFJlcXVlc3RJZGxlQ2FsbGJhY2tPcHRpb25zXG4gICAgKSA9PiBSZXF1ZXN0SWRsZUNhbGxiYWNrSGFuZGxlXG4gICAgY2FuY2VsSWRsZUNhbGxiYWNrOiAoaWQ6IFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUpID0+IHZvaWRcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9XG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrKSB8fFxuICBmdW5jdGlvbiAoXG4gICAgY2I6IChkZWFkbGluZTogUmVxdWVzdElkbGVDYWxsYmFja0RlYWRsaW5lKSA9PiB2b2lkXG4gICk6IE5vZGVKUy5UaW1lb3V0IHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgY2Ioe1xuICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9LCAxKVxuICB9XG5cbmV4cG9ydCBjb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPVxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrKSB8fFxuICBmdW5jdGlvbiAoaWQ6IFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKVxuICB9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nexports.__esModule = true;\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports[\"default\"] = void 0;\n\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../next-server/lib/router/utils/get-asset-path-from-route */ \"./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js\"));\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\"); // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\n\n\nvar MS_MAX_IDLE_DELAY = 3800;\n\nfunction withFuture(key, map, generator) {\n  var entry = map.get(key);\n\n  if (entry) {\n    if ('future' in entry) {\n      return entry.future;\n    }\n\n    return Promise.resolve(entry);\n  }\n\n  var resolver;\n  var prom = new Promise(function (resolve) {\n    resolver = resolve;\n  });\n  map.set(key, entry = {\n    resolve: resolver,\n    future: prom\n  });\n  return generator ? // eslint-disable-next-line no-sequences\n  generator().then(function (value) {\n    return resolver(value), value;\n  }) : prom;\n}\n\nfunction hasPrefetch(link) {\n  try {\n    link = document.createElement('link');\n    return (// detect IE11 since it supports prefetch but isn't detected\n      // with relList.support\n      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')\n    );\n  } catch (_unused) {\n    return false;\n  }\n}\n\nvar canPrefetch = hasPrefetch();\n\nfunction prefetchViaDom(href, as, link) {\n  return new Promise(function (res, rej) {\n    if (document.querySelector(\"link[rel=\\\"prefetch\\\"][href^=\\\"\".concat(href, \"\\\"]\"))) {\n      return res();\n    }\n\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = \"prefetch\";\n    link.crossOrigin = undefined;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nvar ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR'); // TODO: unexport\n\nfunction markAssetError(err) {\n  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\n\nfunction isAssetError(err) {\n  return err && ASSET_LOAD_ERROR in err;\n}\n\nfunction appendScript(src, script) {\n  return new Promise(function (resolve, reject) {\n    script = document.createElement('script'); // The order of property assignment here is intentional.\n    // 1. Setup success/failure hooks in case the browser synchronously\n    //    executes when `src` is set.\n\n    script.onload = resolve;\n\n    script.onerror = function () {\n      return reject(markAssetError(new Error(\"Failed to load script: \".concat(src))));\n    }; // 2. Configure the cross-origin attribute before setting `src` in case the\n    //    browser begins to fetch.\n\n\n    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child\n    //    must be appended for fetching to start.\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n} // Resolve a promise that times out after given amount of milliseconds.\n\n\nfunction resolvePromiseWithTimeout(p, ms, err) {\n  return new Promise(function (resolve, reject) {\n    var cancelled = false;\n    p.then(function (r) {\n      // Resolved, cancel the timeout\n      cancelled = true;\n      resolve(r);\n    })[\"catch\"](reject);\n    (0, _requestIdleCallback.requestIdleCallback)(function () {\n      return setTimeout(function () {\n        if (!cancelled) {\n          reject(err);\n        }\n      }, ms);\n    });\n  });\n} // TODO: stop exporting or cache the failure\n// It'd be best to stop exporting this. It's an implementation detail. We're\n// only exporting it for backwards compatibilty with the `page-loader`.\n// Only cache this response as a last resort if we cannot eliminate all other\n// code branches that use the Build Manifest Callback and push them through\n// the Route Loader interface.\n\n\nfunction getClientBuildManifest() {\n  if (self.__BUILD_MANIFEST) {\n    return Promise.resolve(self.__BUILD_MANIFEST);\n  }\n\n  var onBuildManifest = new Promise(function (resolve) {\n    // Mandatory because this is not concurrent safe:\n    var cb = self.__BUILD_MANIFEST_CB;\n\n    self.__BUILD_MANIFEST_CB = function () {\n      resolve(self.__BUILD_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\n\nfunction getFilesForRoute(assetPrefix, route) {\n  if (true) {\n    return Promise.resolve({\n      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute[\"default\"])(route, '.js'))],\n      // Styles are handled by `style-loader` in development:\n      css: []\n    });\n  }\n\n  return getClientBuildManifest().then(function (manifest) {\n    if (!(route in manifest)) {\n      throw markAssetError(new Error(\"Failed to lookup route: \".concat(route)));\n    }\n\n    var allFiles = manifest[route].map(function (entry) {\n      return assetPrefix + '/_next/' + encodeURI(entry);\n    });\n    return {\n      scripts: allFiles.filter(function (v) {\n        return v.endsWith('.js');\n      }),\n      css: allFiles.filter(function (v) {\n        return v.endsWith('.css');\n      })\n    };\n  });\n}\n\nfunction createRouteLoader(assetPrefix) {\n  var entrypoints = new Map();\n  var loadedScripts = new Map();\n  var styleSheets = new Map();\n  var routes = new Map();\n\n  function maybeExecuteScript(src) {\n    var prom = loadedScripts.get(src);\n\n    if (prom) {\n      return prom;\n    } // Skip executing script if it's already in the DOM:\n\n\n    if (document.querySelector(\"script[src^=\\\"\".concat(src, \"\\\"]\"))) {\n      return Promise.resolve();\n    }\n\n    loadedScripts.set(src, prom = appendScript(src));\n    return prom;\n  }\n\n  function fetchStyleSheet(href) {\n    var prom = styleSheets.get(href);\n\n    if (prom) {\n      return prom;\n    }\n\n    styleSheets.set(href, prom = fetch(href).then(function (res) {\n      if (!res.ok) {\n        throw new Error(\"Failed to load stylesheet: \".concat(href));\n      }\n\n      return res.text().then(function (text) {\n        return {\n          href: href,\n          content: text\n        };\n      });\n    })[\"catch\"](function (err) {\n      throw markAssetError(err);\n    }));\n    return prom;\n  }\n\n  return {\n    whenEntrypoint: function whenEntrypoint(route) {\n      return withFuture(route, entrypoints);\n    },\n    onEntrypoint: function onEntrypoint(route, execute) {\n      Promise.resolve(execute).then(function (fn) {\n        return fn();\n      }).then(function (exports) {\n        return {\n          component: exports && exports[\"default\"] || exports,\n          exports: exports\n        };\n      }, function (err) {\n        return {\n          error: err\n        };\n      }).then(function (input) {\n        var old = entrypoints.get(route);\n        entrypoints.set(route, input);\n        if (old && 'resolve' in old) old.resolve(input);\n      });\n    },\n    loadRoute: function loadRoute(route, prefetch) {\n      var _this = this;\n\n      return withFuture(route, routes, function () {\n        return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then(function (_ref) {\n          var scripts = _ref.scripts,\n              css = _ref.css;\n          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);\n        }).then(function (res) {\n          return _this.whenEntrypoint(route).then(function (entrypoint) {\n            return {\n              entrypoint: entrypoint,\n              styles: res[1]\n            };\n          });\n        }), MS_MAX_IDLE_DELAY, markAssetError(new Error(\"Route did not complete loading: \".concat(route)))).then(function (_ref2) {\n          var entrypoint = _ref2.entrypoint,\n              styles = _ref2.styles;\n          var res = Object.assign({\n            styles: styles\n          }, entrypoint);\n          return 'error' in entrypoint ? entrypoint : res;\n        })[\"catch\"](function (err) {\n          if (prefetch) {\n            // we don't want to cache errors during prefetch\n            throw err;\n          }\n\n          return {\n            error: err\n          };\n        });\n      });\n    },\n    prefetch: function prefetch(route) {\n      var _this2 = this;\n\n      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n      // License: Apache 2.0\n      var cn;\n\n      if (cn = navigator.connection) {\n        // Don't prefetch if using 2G or if Save-Data is enabled.\n        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n      }\n\n      return getFilesForRoute(assetPrefix, route).then(function (output) {\n        return Promise.all(canPrefetch ? output.scripts.map(function (script) {\n          return prefetchViaDom(script, 'script');\n        }) : []);\n      }).then(function () {\n        (0, _requestIdleCallback.requestIdleCallback)(function () {\n          return _this2.loadRoute(route, true)[\"catch\"](function () {});\n        });\n      })[\"catch\"]( // swallow prefetch errors\n      function () {});\n    }\n  };\n}\n\nvar _default = createRouteLoader;\nexports[\"default\"] = _default;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _construct = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/construct */ \"./node_modules/@babel/runtime/helpers/construct.js\");\n\nvar _s = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nexports.__esModule = true;\nexports.useRouter = useRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports.createRouter = exports.withRouter = exports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ \"./node_modules/next/dist/next-server/lib/router/router.js\"));\n\nexports.Router = _router2[\"default\"];\nexports.NextRouter = _router2.NextRouter;\n\nvar _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ \"./node_modules/next/dist/next-server/lib/router-context.js\");\n\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"./node_modules/next/dist/client/with-router.js\"));\n\nexports.withRouter = _withRouter[\"default\"];\n/* global window */\n\nvar singletonRouter = {\n  router: null,\n  // holds the actual router instance\n  readyCallbacks: [],\n  ready: function ready(cb) {\n    if (this.router) return cb();\n\n    if (true) {\n      this.readyCallbacks.push(cb);\n    }\n  }\n}; // Create public properties and methods of the router in the singletonRouter\n\nvar urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain'];\nvar routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nvar coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(singletonRouter, 'events', {\n  get: function get() {\n    return _router2[\"default\"].events;\n  }\n});\nurlPropertyFields.forEach(function (field) {\n  // Here we need to use Object.defineProperty because, we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  Object.defineProperty(singletonRouter, field, {\n    get: function get() {\n      var router = getRouter();\n      return router[field];\n    }\n  });\n});\ncoreMethodFields.forEach(function (field) {\n  // We don't really know the types here, so we add them later instead\n  ;\n\n  singletonRouter[field] = function () {\n    var router = getRouter();\n    return router[field].apply(router, arguments);\n  };\n});\nrouterEvents.forEach(function (event) {\n  singletonRouter.ready(function () {\n    _router2[\"default\"].events.on(event, function () {\n      var eventField = \"on\".concat(event.charAt(0).toUpperCase()).concat(event.substring(1));\n      var _singletonRouter = singletonRouter;\n\n      if (_singletonRouter[eventField]) {\n        try {\n          _singletonRouter[eventField].apply(_singletonRouter, arguments);\n        } catch (err) {\n          console.error(\"Error when running the Router event: \".concat(eventField));\n          console.error(\"\".concat(err.message, \"\\n\").concat(err.stack));\n        }\n      }\n    });\n  });\n});\n\nfunction getRouter() {\n  if (!singletonRouter.router) {\n    var message = 'No router instance found.\\n' + 'You should only use \"next/router\" inside the client side of your app.\\n';\n    throw new Error(message);\n  }\n\n  return singletonRouter.router;\n} // Export the singletonRouter and this is the public API.\n\n\nvar _default = singletonRouter; // Reexport the withRoute HOC\n\nexports[\"default\"] = _default;\n\nfunction useRouter() {\n  _s();\n\n  return _react[\"default\"].useContext(_routerContext.RouterContext);\n} // INTERNAL APIS\n// -------------\n// (do not use following exports inside the app)\n// Create a router and assign it as the singleton instance.\n// This is used in client side when we are initilizing the app.\n// This should **not** use inside the server.\n\n\n_s(useRouter, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar createRouter = function createRouter() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  singletonRouter.router = _construct(_router2[\"default\"], args);\n  singletonRouter.readyCallbacks.forEach(function (cb) {\n    return cb();\n  });\n  singletonRouter.readyCallbacks = [];\n  return singletonRouter.router;\n}; // This function is used to create the `withRouter` router instance\n\n\nexports.createRouter = createRouter;\n\nfunction makePublicRouterInstance(router) {\n  var _router = router;\n  var instance = {};\n\n  var _iterator = _createForOfIteratorHelper(urlPropertyFields),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var property = _step.value;\n\n      if (typeof _router[property] === 'object') {\n        instance[property] = Object.assign(Array.isArray(_router[property]) ? [] : {}, _router[property]); // makes sure query is not stateful\n\n        continue;\n      }\n\n      instance[property] = _router[property];\n    } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  instance.events = _router2[\"default\"].events;\n  coreMethodFields.forEach(function (field) {\n    instance[field] = function () {\n      return _router[field].apply(_router, arguments);\n    };\n  });\n  return instance;\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nexports.__esModule = true;\nexports[\"default\"] = withRouter;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _router = __webpack_require__(/*! ./router */ \"./node_modules/next/dist/client/router.js\");\n\nfunction withRouter(ComposedComponent) {\n  function WithRouterWrapper(props) {\n    return /*#__PURE__*/_react[\"default\"].createElement(ComposedComponent, Object.assign({\n      router: (0, _router.useRouter)()\n    }, props));\n  }\n\n  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app\n  ;\n  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n\n  if (true) {\n    var name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n    WithRouterWrapper.displayName = \"withRouter(\".concat(name, \")\");\n  }\n\n  return WithRouterWrapper;\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL2NsaWVudC93aXRoLXJvdXRlci50c3g/NGZjYiJdLCJuYW1lcyI6WyJDb21wb3NlZENvbXBvbmVudCIsImdldEluaXRpYWxQcm9wcyIsIldpdGhSb3V0ZXJXcmFwcGVyIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQVdlLHVDQUsrQjtBQUM1QyxvQ0FBb0Q7QUFDbEQsd0JBQU87QUFBbUIsWUFBTSxFQUFFLFlBQTNCLFNBQTJCO0FBQTNCLE9BQVAsS0FBTyxFQUFQO0FBR0Y7O0FBQUEsbUJBQWlCLENBQWpCLGtCQUFvQ0EsaUJBQWlCLENBQUNDLGVBQXRELENBQ0E7QUFEQTtBQUVFQyxtQkFBRCxvQkFBQ0EsR0FBaURGLGlCQUFELENBQWpELG1CQUFDRTs7QUFDRixZQUEyQztBQUN6QyxRQUFNQyxJQUFJLEdBQ1JILGlCQUFpQixDQUFqQkEsZUFBaUNBLGlCQUFpQixDQUFsREEsUUFERjtBQUVBRSxxQkFBaUIsQ0FBakJBO0FBR0Y7O0FBQUE7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3dpdGgtcm91dGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTmV4dENvbXBvbmVudFR5cGUsIE5leHRQYWdlQ29udGV4dCB9IGZyb20gJy4uL25leHQtc2VydmVyL2xpYi91dGlscydcbmltcG9ydCB7IE5leHRSb3V0ZXIsIHVzZVJvdXRlciB9IGZyb20gJy4vcm91dGVyJ1xuXG5leHBvcnQgdHlwZSBXaXRoUm91dGVyUHJvcHMgPSB7XG4gIHJvdXRlcjogTmV4dFJvdXRlclxufVxuXG5leHBvcnQgdHlwZSBFeGNsdWRlUm91dGVyUHJvcHM8UD4gPSBQaWNrPFxuICBQLFxuICBFeGNsdWRlPGtleW9mIFAsIGtleW9mIFdpdGhSb3V0ZXJQcm9wcz5cbj5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aFJvdXRlcjxcbiAgUCBleHRlbmRzIFdpdGhSb3V0ZXJQcm9wcyxcbiAgQyA9IE5leHRQYWdlQ29udGV4dFxuPihcbiAgQ29tcG9zZWRDb21wb25lbnQ6IE5leHRDb21wb25lbnRUeXBlPEMsIGFueSwgUD5cbik6IFJlYWN0LkNvbXBvbmVudFR5cGU8RXhjbHVkZVJvdXRlclByb3BzPFA+PiB7XG4gIGZ1bmN0aW9uIFdpdGhSb3V0ZXJXcmFwcGVyKHByb3BzOiBhbnkpOiBKU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIDxDb21wb3NlZENvbXBvbmVudCByb3V0ZXI9e3VzZVJvdXRlcigpfSB7Li4ucHJvcHN9IC8+XG4gIH1cblxuICBXaXRoUm91dGVyV3JhcHBlci5nZXRJbml0aWFsUHJvcHMgPSBDb21wb3NlZENvbXBvbmVudC5nZXRJbml0aWFsUHJvcHNcbiAgLy8gVGhpcyBpcyBuZWVkZWQgdG8gYWxsb3cgY2hlY2tpbmcgZm9yIGN1c3RvbSBnZXRJbml0aWFsUHJvcHMgaW4gX2FwcFxuICA7KFdpdGhSb3V0ZXJXcmFwcGVyIGFzIGFueSkub3JpZ0dldEluaXRpYWxQcm9wcyA9IChDb21wb3NlZENvbXBvbmVudCBhcyBhbnkpLm9yaWdHZXRJbml0aWFsUHJvcHNcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCBuYW1lID1cbiAgICAgIENvbXBvc2VkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvc2VkQ29tcG9uZW50Lm5hbWUgfHwgJ1Vua25vd24nXG4gICAgV2l0aFJvdXRlcldyYXBwZXIuZGlzcGxheU5hbWUgPSBgd2l0aFJvdXRlcigke25hbWV9KWBcbiAgfVxuXG4gIHJldHVybiBXaXRoUm91dGVyV3JhcHBlclxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/webpack/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/webpack/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {module.exports =\n/******/ (function() { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 931:\n/***/ (function(module) {\n\nmodule.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nccwpck_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\tvar threw = true;\n/******/ \t\ttry {\n/******/ \t\t\t__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);\n/******/ \t\t\tthrew = false;\n/******/ \t\t} finally {\n/******/ \t\t\tif(threw) delete __webpack_module_cache__[moduleId];\n/******/ \t\t}\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat */\n/******/ \t\n/******/ \t__nccwpck_require__.ab = __dirname + \"/\";/************************************************************************/\n/******/ \t// module exports must be returned from runtime so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nccwpck_require__(931);\n/******/ })()\n;\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLyh3ZWJwYWNrKS93ZWJwYWNrL2hhcm1vbnktbW9kdWxlLmpzP2YzNDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVAsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3dlYnBhY2svaGFybW9ueS1tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyA5MzE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHR2YXIgdGhyZXcgPSB0cnVlO1xuLyoqKioqKi8gXHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX25jY3dwY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XHRcdHRocmV3ID0gZmFsc2U7XG4vKioqKioqLyBcdFx0fSBmaW5hbGx5IHtcbi8qKioqKiovIFx0XHRcdGlmKHRocmV3KSBkZWxldGUgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NvbXBhdCAqL1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0X19uY2N3cGNrX3JlcXVpcmVfXy5hYiA9IF9fZGlybmFtZSArIFwiL1wiOy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vKioqKioqLyBcdC8vIHN0YXJ0dXBcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX25jY3dwY2tfcmVxdWlyZV9fKDkzMSk7XG4vKioqKioqLyB9KSgpXG47Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/webpack/harmony-module.js\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/webpack/module.js":
/*!***********************************!*\
  !*** (webpack)/webpack/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {module.exports =\n/******/ (function() { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 880:\n/***/ (function(module) {\n\nmodule.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nccwpck_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\tvar threw = true;\n/******/ \t\ttry {\n/******/ \t\t\t__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);\n/******/ \t\t\tthrew = false;\n/******/ \t\t} finally {\n/******/ \t\t\tif(threw) delete __webpack_module_cache__[moduleId];\n/******/ \t\t}\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat */\n/******/ \t\n/******/ \t__nccwpck_require__.ab = __dirname + \"/\";/************************************************************************/\n/******/ \t// module exports must be returned from runtime so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nccwpck_require__(880);\n/******/ })()\n;\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLyh3ZWJwYWNrKS93ZWJwYWNrL21vZHVsZS5qcz8zZTczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC93ZWJwYWNrL21vZHVsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIDg4MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIFx0fSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0dmFyIHRocmV3ID0gdHJ1ZTtcbi8qKioqKiovIFx0XHR0cnkge1xuLyoqKioqKi8gXHRcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX19uY2N3cGNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFx0XHR0aHJldyA9IGZhbHNlO1xuLyoqKioqKi8gXHRcdH0gZmluYWxseSB7XG4vKioqKioqLyBcdFx0XHRpZih0aHJldykgZGVsZXRlIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9jb21wYXQgKi9cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdF9fbmNjd3Bja19yZXF1aXJlX18uYWIgPSBfX2Rpcm5hbWUgKyBcIi9cIjsvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLyoqKioqKi8gXHQvLyBzdGFydHVwXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX19uY2N3cGNrX3JlcXVpcmVfXyg4ODApO1xuLyoqKioqKi8gfSkoKVxuOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/webpack/module.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/amp-context.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/amp-context.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.AmpStateContext = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar AmpStateContext = /*#__PURE__*/_react[\"default\"].createContext({});\n\nexports.AmpStateContext = AmpStateContext;\n\nif (true) {\n  AmpStateContext.displayName = 'AmpStateContext';\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9hbXAtY29udGV4dC50cz84NzlmIl0sIm5hbWVzIjpbIkFtcFN0YXRlQ29udGV4dCIsIlJlYWN0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7QUFFTzs7QUFBQSxJQUFNQSxlQUFtQyxnQkFBR0MsZ0NBQTVDLEVBQTRDQSxDQUE1Qzs7OztBQUVQLFVBQTJDO0FBQ3pDRCxpQkFBZSxDQUFmQTtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9uZXh0LXNlcnZlci9saWIvYW1wLWNvbnRleHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBjb25zdCBBbXBTdGF0ZUNvbnRleHQ6IFJlYWN0LkNvbnRleHQ8YW55PiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEFtcFN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBbXBTdGF0ZUNvbnRleHQnXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/amp-context.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/amp.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/amp.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _s = $RefreshSig$();\n\nexports.__esModule = true;\nexports.isInAmpMode = isInAmpMode;\nexports.useAmp = useAmp;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \"./node_modules/next/dist/next-server/lib/amp-context.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction isInAmpMode() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ampFirst = _ref.ampFirst,\n      ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,\n      _ref$hybrid = _ref.hybrid,\n      hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,\n      _ref$hasQuery = _ref.hasQuery,\n      hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;\n\n  return ampFirst || hybrid && hasQuery;\n}\n\nfunction useAmp() {\n  _s();\n\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(_react[\"default\"].useContext(_ampContext.AmpStateContext));\n}\n\n_s(useAmp, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9hbXAudHM/MDdkMiJdLCJuYW1lcyI6WyJhbXBGaXJzdCIsImh5YnJpZCIsImhhc1F1ZXJ5IiwiaXNJbkFtcE1vZGUiLCJSZWFjdCIsIkFtcFN0YXRlQ29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRU87O0FBQUEsdUJBSVU7QUFBQSxpRkFKVixFQUlVO0FBQUEsMkJBSGZBLFFBR2U7QUFBQSxNQUhmQSxRQUdlLDhCQUpXLEtBSVg7QUFBQSx5QkFGZkMsTUFFZTtBQUFBLE1BRmZBLE1BRWUsNEJBSlcsS0FJWDtBQUFBLDJCQURmQyxRQUNlO0FBQUEsTUFEZkEsUUFDZSw4QkFKVyxLQUlYOztBQUNmLFNBQU9GLFFBQVEsSUFBS0MsTUFBTSxJQUExQjtBQUdLOztBQUFBLGtCQUEyQjtBQUFBOztBQUNoQztBQUNBLFNBQU9FLFdBQVcsQ0FBQ0MsNkJBQWlCQyxZQUFwQyxlQUFtQkQsQ0FBRCxDQUFsQjtBQUNEOztHQUhNLE0iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9hbXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBBbXBTdGF0ZUNvbnRleHQgfSBmcm9tICcuL2FtcC1jb250ZXh0J1xuXG5leHBvcnQgZnVuY3Rpb24gaXNJbkFtcE1vZGUoe1xuICBhbXBGaXJzdCA9IGZhbHNlLFxuICBoeWJyaWQgPSBmYWxzZSxcbiAgaGFzUXVlcnkgPSBmYWxzZSxcbn0gPSB7fSk6IGJvb2xlYW4ge1xuICByZXR1cm4gYW1wRmlyc3QgfHwgKGh5YnJpZCAmJiBoYXNRdWVyeSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFtcCgpOiBib29sZWFuIHtcbiAgLy8gRG9uJ3QgYXNzaWduIHRoZSBjb250ZXh0IHZhbHVlIHRvIGEgdmFyaWFibGUgdG8gc2F2ZSBieXRlc1xuICByZXR1cm4gaXNJbkFtcE1vZGUoUmVhY3QudXNlQ29udGV4dChBbXBTdGF0ZUNvbnRleHQpKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/amp.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/head-manager-context.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/head-manager-context.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.HeadManagerContext = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar HeadManagerContext = /*#__PURE__*/_react[\"default\"].createContext({});\n\nexports.HeadManagerContext = HeadManagerContext;\n\nif (true) {\n  HeadManagerContext.displayName = 'HeadManagerContext';\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9oZWFkLW1hbmFnZXItY29udGV4dC50cz9iMmQ2Il0sIm5hbWVzIjpbIkhlYWRNYW5hZ2VyQ29udGV4dCIsIlJlYWN0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7QUFFTzs7QUFBQSxJQUFNQSxrQkFLWCxnQkFBR0MsZ0NBTEUsRUFLRkEsQ0FMRTs7OztBQU9QLFVBQTJDO0FBQ3pDRCxvQkFBa0IsQ0FBbEJBO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9oZWFkLW1hbmFnZXItY29udGV4dC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IEhlYWRNYW5hZ2VyQ29udGV4dDogUmVhY3QuQ29udGV4dDx7XG4gIHVwZGF0ZUhlYWQ/OiAoc3RhdGU6IGFueSkgPT4gdm9pZFxuICBtb3VudGVkSW5zdGFuY2VzPzogYW55XG4gIHVwZGF0ZVNjcmlwdHM/OiAoc3RhdGU6IGFueSkgPT4gdm9pZFxuICBzY3JpcHRzPzogYW55XG59PiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEhlYWRNYW5hZ2VyQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdIZWFkTWFuYWdlckNvbnRleHQnXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/head-manager-context.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/head.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/head.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexports.__esModule = true;\nexports.defaultHead = defaultHead;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _sideEffect = _interopRequireDefault(__webpack_require__(/*! ./side-effect */ \"./node_modules/next/dist/next-server/lib/side-effect.js\"));\n\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \"./node_modules/next/dist/next-server/lib/amp-context.js\");\n\nvar _headManagerContext = __webpack_require__(/*! ./head-manager-context */ \"./node_modules/next/dist/next-server/lib/head-manager-context.js\");\n\nvar _amp = __webpack_require__(/*! ./amp */ \"./node_modules/next/dist/next-server/lib/amp.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction defaultHead() {\n  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var head = [/*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n    charSet: \"utf-8\"\n  })];\n\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }));\n  }\n\n  return head;\n}\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === _react[\"default\"].Fragment) {\n    return list.concat(_react[\"default\"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nvar METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\nreturns a function for filtering head child elements\nwhich shouldn't be duplicated, like <title/>\nAlso adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  var keys = new Set();\n  var tags = new Set();\n  var metaTypes = new Set();\n  var metaCategories = {};\n  return function (h) {\n    var isUnique = true;\n    var hasKey = false;\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      var key = h.key.slice(h.key.indexOf('$') + 1);\n\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n\n\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n\n        break;\n\n      case 'meta':\n        for (var i = 0, len = METATYPES.length; i < len; i++) {\n          var metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            var category = h.props[metatype];\n            var categories = metaCategories[metatype] || new Set();\n\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n\n        break;\n    }\n\n    return isUnique;\n  };\n}\n/**\n*\n* @param headElements List of multiple <Head> instances\n*/\n\n\nfunction reduceComponents(headElements, props) {\n  return headElements.reduce(function (list, headElement) {\n    var headElementChildren = _react[\"default\"].Children.toArray(headElement.props.children);\n\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {\n    var key = c.key || i;\n\n    if (false) { var newProps; }\n\n    return /*#__PURE__*/_react[\"default\"].cloneElement(c, {\n      key: key\n    });\n  });\n}\n/**\n* This component injects elements to `<head>` of your page.\n* To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n*/\n\n\nfunction Head(_ref) {\n  var children = _ref.children;\n  var ampState = (0, _react.useContext)(_ampContext.AmpStateContext);\n  var headManager = (0, _react.useContext)(_headManagerContext.HeadManagerContext);\n  return /*#__PURE__*/_react[\"default\"].createElement(_sideEffect[\"default\"], {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _amp.isInAmpMode)(ampState)\n  }, children);\n} // TODO: Remove in the next major release\n\n\n_c = Head;\n\nHead.rewind = function () {};\n\nvar _default = Head;\nexports[\"default\"] = _default;\n\nvar _c;\n\n$RefreshReg$(_c, \"Head\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/head.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.normalizeLocalePath = normalizeLocalePath;\n\nfunction normalizeLocalePath(pathname, locales) {\n  var detectedLocale; // first item will be empty string from splitting at first char\n\n  var pathnameParts = pathname.split('/');\n  (locales || []).some(function (locale) {\n    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n      detectedLocale = locale;\n      pathnameParts.splice(1, 1);\n      pathname = pathnameParts.join('/') || '/';\n      return true;\n    }\n\n    return false;\n  });\n  return {\n    pathname: pathname,\n    detectedLocale: detectedLocale\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aC50cz9lOGViIl0sIm5hbWVzIjpbInBhdGhuYW1lUGFydHMiLCJwYXRobmFtZSIsImxvY2FsZXMiLCJsb2NhbGUiLCJkZXRlY3RlZExvY2FsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxnREFNTDtBQUNBLHFCQURBLENBRUE7O0FBQ0EsTUFBTUEsYUFBYSxHQUFHQyxRQUFRLENBQVJBLE1BQXRCLEdBQXNCQSxDQUF0QjtBQUVDLEdBQUNDLE9BQU8sSUFBUixTQUFzQkMsZ0JBQUQsRUFBWTtBQUNoQyxRQUFJSCxhQUFhLENBQWJBLENBQWEsQ0FBYkEsbUJBQW1DRyxNQUFNLENBQTdDLFdBQXVDQSxFQUF2QyxFQUE2RDtBQUMzREMsb0JBQWMsR0FBZEE7QUFDQUosbUJBQWEsQ0FBYkE7QUFDQUMsY0FBUSxHQUFHRCxhQUFhLENBQWJBLGFBQVhDO0FBQ0E7QUFFRjs7QUFBQTtBQVBEO0FBVUQsU0FBTztBQUNMQSxZQURLLEVBQ0xBLFFBREs7QUFFTEcsa0JBRkYsRUFFRUE7QUFGSyxHQUFQO0FBSUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGVQYXRoKFxuICBwYXRobmFtZTogc3RyaW5nLFxuICBsb2NhbGVzPzogc3RyaW5nW11cbik6IHtcbiAgZGV0ZWN0ZWRMb2NhbGU/OiBzdHJpbmdcbiAgcGF0aG5hbWU6IHN0cmluZ1xufSB7XG4gIGxldCBkZXRlY3RlZExvY2FsZTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIC8vIGZpcnN0IGl0ZW0gd2lsbCBiZSBlbXB0eSBzdHJpbmcgZnJvbSBzcGxpdHRpbmcgYXQgZmlyc3QgY2hhclxuICBjb25zdCBwYXRobmFtZVBhcnRzID0gcGF0aG5hbWUuc3BsaXQoJy8nKVxuXG4gIDsobG9jYWxlcyB8fCBbXSkuc29tZSgobG9jYWxlKSA9PiB7XG4gICAgaWYgKHBhdGhuYW1lUGFydHNbMV0udG9Mb3dlckNhc2UoKSA9PT0gbG9jYWxlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGRldGVjdGVkTG9jYWxlID0gbG9jYWxlXG4gICAgICBwYXRobmFtZVBhcnRzLnNwbGljZSgxLCAxKVxuICAgICAgcGF0aG5hbWUgPSBwYXRobmFtZVBhcnRzLmpvaW4oJy8nKSB8fCAnLydcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgZGV0ZWN0ZWRMb2NhbGUsXG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports[\"default\"] = mitt;\n/*\nMIT License\nCopyright (c) Jason Miller (https://jasonformat.com/)\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n// This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js\n// It's been edited for the needs of this script\n// See the LICENSE at the top of the file\n\nfunction mitt() {\n  var all = Object.create(null);\n  return {\n    on: function on(type, handler) {\n      ;\n      (all[type] || (all[type] = [])).push(handler);\n    },\n    off: function off(type, handler) {\n      if (all[type]) {\n        all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit: function emit(type) {\n      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        evts[_key - 1] = arguments[_key];\n      }\n\n      // eslint-disable-next-line array-callback-return\n      ;\n      (all[type] || []).slice().map(function (handler) {\n        handler.apply(void 0, evts);\n      });\n    }\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9taXR0LnRzP2Y0ZWMiXSwibmFtZXMiOlsiYWxsIiwiT2JqZWN0Iiwib24iLCJvZmYiLCJlbWl0IiwiaGFuZGxlciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBOztBQVVlLGdCQUE2QjtBQUMxQyxNQUFNQSxHQUErQixHQUFHQyxNQUFNLENBQU5BLE9BQXhDLElBQXdDQSxDQUF4QztBQUVBLFNBQU87QUFDTEMsTUFESyxjQUNILElBREcsRUFDSCxPQURHLEVBQzhCO0FBQ2pDO0FBQUMsT0FBQ0YsR0FBRyxDQUFIQSxJQUFHLENBQUhBLEtBQWNBLEdBQUcsQ0FBSEEsSUFBRyxDQUFIQSxHQUFmLEVBQUNBLENBQUQ7QUFGRTtBQUtMRyxPQUxLLGVBS0YsSUFMRSxFQUtGLE9BTEUsRUFLK0I7QUFDbEMsVUFBSUgsR0FBRyxDQUFQLElBQU8sQ0FBUCxFQUFlO0FBQ2JBLFdBQUcsQ0FBSEEsSUFBRyxDQUFIQSxRQUFpQkEsR0FBRyxDQUFIQSxJQUFHLENBQUhBLHNCQUFqQkE7QUFFSDtBQVRJO0FBV0xJLFFBWEssZ0JBV0QsSUFYQyxFQVc4QjtBQUFBLHdDQUEvQixJQUErQjtBQUEvQixZQUErQjtBQUFBOztBQUNqQztBQUNBO0FBQUMsT0FBQ0osR0FBRyxDQUFIQSxJQUFHLENBQUhBLElBQUQsZ0JBQStCSyxpQkFBRCxFQUFzQjtBQUNuREEsZUFBTyxNQUFQQTtBQUREO0FBYkw7QUFBTyxHQUFQO0FBa0JEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9uZXh0LXNlcnZlci9saWIvbWl0dC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIEphc29uIE1pbGxlciAoaHR0cHM6Ly9qYXNvbmZvcm1hdC5jb20vKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuXG4vLyBUaGlzIGZpbGUgaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2RldmVsb3BpdC9taXR0L2Jsb2IvdjEuMS4zL3NyYy9pbmRleC5qc1xuLy8gSXQncyBiZWVuIGVkaXRlZCBmb3IgdGhlIG5lZWRzIG9mIHRoaXMgc2NyaXB0XG4vLyBTZWUgdGhlIExJQ0VOU0UgYXQgdGhlIHRvcCBvZiB0aGUgZmlsZVxuXG50eXBlIEhhbmRsZXIgPSAoLi4uZXZ0czogYW55W10pID0+IHZvaWRcblxuZXhwb3J0IHR5cGUgTWl0dEVtaXR0ZXIgPSB7XG4gIG9uKHR5cGU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcik6IHZvaWRcbiAgb2ZmKHR5cGU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcik6IHZvaWRcbiAgZW1pdCh0eXBlOiBzdHJpbmcsIC4uLmV2dHM6IGFueVtdKTogdm9pZFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaXR0KCk6IE1pdHRFbWl0dGVyIHtcbiAgY29uc3QgYWxsOiB7IFtzOiBzdHJpbmddOiBIYW5kbGVyW10gfSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICByZXR1cm4ge1xuICAgIG9uKHR5cGU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcikge1xuICAgICAgOyhhbGxbdHlwZV0gfHwgKGFsbFt0eXBlXSA9IFtdKSkucHVzaChoYW5kbGVyKVxuICAgIH0sXG5cbiAgICBvZmYodHlwZTogc3RyaW5nLCBoYW5kbGVyOiBIYW5kbGVyKSB7XG4gICAgICBpZiAoYWxsW3R5cGVdKSB7XG4gICAgICAgIGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGVtaXQodHlwZTogc3RyaW5nLCAuLi5ldnRzOiBhbnlbXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICAgICAgOyhhbGxbdHlwZV0gfHwgW10pLnNsaWNlKCkubWFwKChoYW5kbGVyOiBIYW5kbGVyKSA9PiB7XG4gICAgICAgIGhhbmRsZXIoLi4uZXZ0cylcbiAgICAgIH0pXG4gICAgfSxcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/mitt.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router-context.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router-context.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.RouterContext = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar RouterContext = /*#__PURE__*/_react[\"default\"].createContext(null);\n\nexports.RouterContext = RouterContext;\n\nif (true) {\n  RouterContext.displayName = 'RouterContext';\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXItY29udGV4dC50cz84OTQ1Il0sIm5hbWVzIjpbIlJvdXRlckNvbnRleHQiLCJSZWFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7O0FBR087O0FBQUEsSUFBTUEsYUFBYSxnQkFBR0MsZ0NBQXRCLElBQXNCQSxDQUF0Qjs7OztBQUVQLFVBQTJDO0FBQ3pDRCxlQUFhLENBQWJBO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9yb3V0ZXItY29udGV4dC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IE5leHRSb3V0ZXIgfSBmcm9tICcuL3JvdXRlci9yb3V0ZXInXG5cbmV4cG9ydCBjb25zdCBSb3V0ZXJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxOZXh0Um91dGVyPihudWxsIGFzIGFueSlcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdSb3V0ZXJDb250ZXh0J1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router-context.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _regeneratorRuntime = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n\nexports.__esModule = true;\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\n\nvar _denormalizePagePath = __webpack_require__(/*! ../../server/denormalize-page-path */ \"./node_modules/next/dist/next-server/server/denormalize-page-path.js\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js\");\n\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"./node_modules/next/dist/next-server/lib/mitt.js\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/next/dist/next-server/lib/utils.js\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js\");\n\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./node_modules/next/dist/next-server/lib/router/utils/querystring.js\");\n\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./node_modules/next/dist/next-server/lib/router/utils/route-regex.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // tslint:disable:no-console\n\n\nvar detectDomainLocale;\n\nif (false) {}\n\nvar basePath =  false || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : \"\".concat(prefix).concat(pathNoQueryHash(path) === '/' ? path.substring(1) : path) : path;\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (false) { var detectedDomain; }\n\n  return false;\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (false) { var localeLower, pathLower, pathname; }\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (false) { var localeLower, pathLower, pathname; }\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  var queryIndex = path.indexOf('?');\n  var hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = \"/\".concat(path);\n  return path;\n}\n/**\n* Detects whether a given url is routable by the Next.js router (browser only).\n*/\n\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    var locationOrigin = (0, _utils.getLocationOrigin)();\n    var resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  var interpolatedRoute = '';\n  var dynamicRegex = (0, _routeRegex.getRouteRegex)(route);\n  var dynamicGroups = dynamicRegex.groups;\n  var dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  var params = Object.keys(dynamicGroups);\n\n  if (!params.every(function (param) {\n    var value = dynamicMatches[param] || '';\n    var _dynamicGroups$param = dynamicGroups[param],\n        repeat = _dynamicGroups$param.repeat,\n        optional = _dynamicGroups$param.optional; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    var replaced = \"[\".concat(repeat ? '...' : '').concat(param, \"]\");\n\n    if (optional) {\n      replaced = \"\".concat(!value ? '/' : '', \"[\").concat(replaced, \"]\");\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present\n    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    function (segment) {\n      return encodeURIComponent(segment);\n    }).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = ''; // did not satisfy all requirements\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params: params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  var filteredQuery = {};\n  Object.keys(query).forEach(function (key) {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n/**\n* Resolves a given hyperlink with a certain router state (basePath not included).\n* Preserves absolute urls.\n*/\n\n\nfunction resolveHref(currentPath, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  var base;\n\n  try {\n    base = new URL(currentPath, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  var urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href); // Return because it cannot be routed by the Next.js router\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    var finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);\n    var interpolatedAs = '';\n\n    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      var query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);\n\n      var _interpolateAs = interpolateAs(finalUrl.pathname, finalUrl.pathname, query),\n          result = _interpolateAs.result,\n          params = _interpolateAs.params;\n\n      if (result) {\n        interpolatedAs = (0, _utils.formatWithValidation)({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    var resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  var origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  var _resolveHref = resolveHref(router.asPath, url, true),\n      _resolveHref2 = _slicedToArray(_resolveHref, 2),\n      resolvedHref = _resolveHref2[0],\n      resolvedAs = _resolveHref2[1];\n\n  var origin = (0, _utils.getLocationOrigin)();\n  var hrefHadOrigin = resolvedHref.startsWith(origin);\n  var asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  var preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  var preparedAs = as ? stripOrigin(resolveHref(router.asPath, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  var cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(function (page) {\n      if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n}\n\nvar manualScrollRestoration =  false && false;\nvar SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(function (res) {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(function (data) {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(\"Failed to load static props\");\n        });\n      }\n\n      throw new Error(\"Failed to load static props\");\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1)[\"catch\"](function (err) {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader.markAssetError)(err);\n    }\n\n    throw err;\n  });\n}\n\nvar Router = /*#__PURE__*/function () {\n  /**\n  * Map of all components loaded in `Router`\n  */\n  // Static Data Cache\n  // In-flight Server Data Requests, for deduping\n  function Router(_pathname, _query, _as, _ref) {\n    var _this = this;\n\n    var initialProps = _ref.initialProps,\n        pageLoader = _ref.pageLoader,\n        App = _ref.App,\n        wrapApp = _ref.wrapApp,\n        Component = _ref.Component,\n        err = _ref.err,\n        subscription = _ref.subscription,\n        isFallback = _ref.isFallback,\n        locale = _ref.locale,\n        locales = _ref.locales,\n        defaultLocale = _ref.defaultLocale,\n        domainLocales = _ref.domainLocales,\n        isPreview = _ref.isPreview;\n\n    _classCallCheck(this, Router);\n\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sdr = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this._shallow = void 0;\n    this.locale = void 0;\n    this.locales = void 0;\n    this.defaultLocale = void 0;\n    this.domainLocales = void 0;\n    this.isReady = void 0;\n    this.isPreview = void 0;\n    this.isLocaleDomain = void 0;\n    this._idx = 0;\n\n    this.onPopState = function (e) {\n      var state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname2 = _this.pathname,\n            query = _this.query;\n\n        _this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname2),\n          query: query\n        }), (0, _utils.getURL)());\n\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      var forcedScroll;\n      var url = state.url,\n          as = state.as,\n          options = state.options,\n          idx = state.idx;\n\n      if (false) { var v; }\n\n      _this._idx = idx;\n\n      var _ref2 = (0, _parseRelativeUrl.parseRelativeUrl)(url),\n          pathname = _ref2.pathname; // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (_this.isSsr && as === _this.asPath && pathname === _this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (_this._bps && !_this._bps(state)) {\n        return;\n      }\n\n      _this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && _this._shallow,\n        locale: options.locale || _this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component: Component,\n        initial: true,\n        props: initialProps,\n        err: err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ]\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    var autoExportDynamic = (0, _isDynamic.isDynamicRoute)(_pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || !autoExportDynamic && !self.location.search && !false);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (false) {}\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)(), {\n          locale: locale\n        });\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (false) {}\n    }\n  }\n\n  _createClass(Router, [{\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n    * Go back in history\n    */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"push\",\n    value: function push(url, as) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (false) {}\n\n      ;\n\n      var _prepareUrlAs = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs.url;\n      as = _prepareUrlAs.as;\n      return this.change('pushState', url, as, options);\n    }\n    /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"replace\",\n    value: function replace(url, as) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      ;\n\n      var _prepareUrlAs2 = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs2.url;\n      as = _prepareUrlAs2.as;\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: \"change\",\n    value: function () {\n      var _change = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, as, options, forcedScroll) {\n        var _options$scroll, shouldResolveHref, localeChange, parsedAs, localePathResult, didNavigate, _this$locales, detectedDomain, asNoBasePath, _options$shallow, shallow, routeProps, cleanedAs, parsed, pathname, query, pages, rewrites, _yield, resolvedAs, rewritesResult, route, _parsedAs, asPathname, routeRegex, routeMatch, shouldInterpolate, interpolatedAs, missingParams, _self$__NEXT_DATA__$p, _self$__NEXT_DATA__$p2, routeInfo, _routeInfo, error, props, __N_SSG, __N_SSP, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, appComp, isValidShallowRoute;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (isLocalURL(url)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                window.location.href = url;\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n                shouldResolveHref = url === as || options._h; // for static pages with query params in the URL we delay\n                // marking the router ready until after the query is updated\n\n                if (options._h) {\n                  this.isReady = true;\n                } // Default to scroll reset behavior unless explicitly specified to be\n                // `false`! This makes the behavior between using `Router#push` and a\n                // `<Link />` consistent.\n\n\n                options.scroll = !!((_options$scroll = options.scroll) != null ? _options$scroll : true);\n                localeChange = options.locale !== this.locale;\n\n                if (true) {\n                  _context.next = 19;\n                  break;\n                }\n\n                this.locale = options.locale === false ? this.defaultLocale : options.locale || this.locale;\n\n                if (typeof options.locale === 'undefined') {\n                  options.locale = this.locale;\n                }\n\n                parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(hasBasePath(as) ? delBasePath(as) : as);\n                localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n\n                if (localePathResult.detectedLocale) {\n                  this.locale = localePathResult.detectedLocale;\n                  parsedAs.pathname = addBasePath(parsedAs.pathname);\n                  as = (0, _utils.formatWithValidation)(parsedAs);\n                  url = addBasePath((0, _normalizeLocalePath.normalizeLocalePath)(hasBasePath(url) ? delBasePath(url) : url, this.locales).pathname);\n                }\n\n                didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (false) {}\n\n                detectedDomain = detectDomainLocale(this.domainLocales, undefined, this.locale); // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (false) {}\n\n                if (!didNavigate) {\n                  _context.next = 19;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 19:\n                if (!options._h) {\n                  this.isSsr = false;\n                } // marking route changes as a navigation start entry\n\n\n                if (_utils.ST) {\n                  performance.mark('routeChange');\n                }\n\n                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow;\n                routeProps = {\n                  shallow: shallow\n                };\n\n                if (this._inFlightRoute) {\n                  this.abortComponentLoad(this._inFlightRoute, routeProps);\n                }\n\n                as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n                cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n                this._inFlightRoute = as; // If the url change is only related to a hash change\n                // We should not proceed. We should only change the state.\n                // WARNING: `_h` is an internal option for handing Next.js client-side\n                // hydration. Your app should _never_ use this property. It may change at\n                // any time without notice.\n\n                if (!(!options._h && this.onlyAHashChange(cleanedAs))) {\n                  _context.next = 35;\n                  break;\n                }\n\n                this.asPath = cleanedAs;\n                Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n                this.changeState(method, url, as, options);\n                this.scrollToHash(cleanedAs);\n                this.notify(this.components[this.route], null);\n                Router.events.emit('hashChangeComplete', as, routeProps);\n                return _context.abrupt(\"return\", true);\n\n              case 35:\n                parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n                pathname = parsed.pathname, query = parsed.query; // The build manifest needs to be loaded before auto-static dynamic pages\n                // get their query parameters to allow ensuring they can be parsed properly\n                // when rewritten to\n\n                _context.prev = 37;\n                _context.next = 40;\n                return this.pageLoader.getPageList();\n\n              case 40:\n                pages = _context.sent;\n                _context.next = 43;\n                return (0, _routeLoader.getClientBuildManifest)();\n\n              case 43:\n                _yield = _context.sent;\n                rewrites = _yield.__rewrites;\n                _context.next = 51;\n                break;\n\n              case 47:\n                _context.prev = 47;\n                _context.t0 = _context[\"catch\"](37);\n                // If we fail to resolve the page list or client-build manifest, we must\n                // do a server-side transition:\n                window.location.href = as;\n                return _context.abrupt(\"return\", false);\n\n              case 51:\n                // If asked to change the current URL we should reload the current page\n                // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n                // We also need to set the method = replaceState always\n                // as this should not go into the history (That's how browsers work)\n                // We should compare the new asPath to the current asPath, not the url\n                if (!this.urlIsNew(cleanedAs) && !localeChange) {\n                  method = 'replaceState';\n                } // we need to resolve the as value using rewrites for dynamic SSG\n                // pages to allow building the data URL correctly\n\n\n                resolvedAs = as; // url and as should always be prefixed with basePath by this\n                // point by either next/link or router.push/replace so strip the\n                // basePath from the pathname to match the pages dir 1-to-1\n\n                pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname;\n\n                if (shouldResolveHref && pathname !== '/_error') {\n                  if (false) {} else {\n                    parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n                    if (parsed.pathname !== pathname) {\n                      pathname = parsed.pathname;\n                      url = (0, _utils.formatWithValidation)(parsed);\n                    }\n                  }\n                }\n\n                route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n\n                if (isLocalURL(as)) {\n                  _context.next = 61;\n                  break;\n                }\n\n                if (false) {}\n\n                throw new Error(\"Invalid href: \\\"\".concat(url, \"\\\" and as: \\\"\").concat(as, \"\\\", received relative href and external as\") + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n\n              case 59:\n                window.location.href = as;\n                return _context.abrupt(\"return\", false);\n\n              case 61:\n                resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n\n                if (!(0, _isDynamic.isDynamicRoute)(route)) {\n                  _context.next = 77;\n                  break;\n                }\n\n                _parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);\n                asPathname = _parsedAs.pathname;\n                routeRegex = (0, _routeRegex.getRouteRegex)(route);\n                routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n                shouldInterpolate = route === asPathname;\n                interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n                if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {\n                  _context.next = 76;\n                  break;\n                }\n\n                missingParams = Object.keys(routeRegex.groups).filter(function (param) {\n                  return !query[param];\n                });\n\n                if (!(missingParams.length > 0)) {\n                  _context.next = 74;\n                  break;\n                }\n\n                if (true) {\n                  console.warn(\"\".concat(shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\", \" failed to manually provide \") + \"the params: \".concat(missingParams.join(', '), \" in the `href`'s `query`\"));\n                }\n\n                throw new Error((shouldInterpolate ? \"The provided `href` (\".concat(url, \") value is missing query values (\").concat(missingParams.join(', '), \") to be interpolated properly. \") : \"The provided `as` value (\".concat(asPathname, \") is incompatible with the `href` value (\").concat(route, \"). \")) + \"Read more: https://nextjs.org/docs/messages/\".concat(shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'));\n\n              case 74:\n                _context.next = 77;\n                break;\n\n              case 76:\n                if (shouldInterpolate) {\n                  as = (0, _utils.formatWithValidation)(Object.assign({}, _parsedAs, {\n                    pathname: interpolatedAs.result,\n                    query: omitParmsFromQuery(query, interpolatedAs.params)\n                  }));\n                } else {\n                  // Merge params into `query`, overwriting any specified in search\n                  Object.assign(query, routeMatch);\n                }\n\n              case 77:\n                Router.events.emit('routeChangeStart', as, routeProps);\n                _context.prev = 78;\n                _context.next = 81;\n                return this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);\n\n              case 81:\n                routeInfo = _context.sent;\n                _routeInfo = routeInfo, error = _routeInfo.error, props = _routeInfo.props, __N_SSG = _routeInfo.__N_SSG, __N_SSP = _routeInfo.__N_SSP; // handle redirect on client-transition\n\n                if (!((__N_SSG || __N_SSP) && props)) {\n                  _context.next = 108;\n                  break;\n                }\n\n                if (!(props.pageProps && props.pageProps.__N_REDIRECT)) {\n                  _context.next = 94;\n                  break;\n                }\n\n                destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n                // client-navigation if it is falling back to hard navigation if\n                // it's not\n\n                if (!destination.startsWith('/')) {\n                  _context.next = 92;\n                  break;\n                }\n\n                parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);\n                parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n\n                if (!pages.includes(parsedHref.pathname)) {\n                  _context.next = 92;\n                  break;\n                }\n\n                _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;\n                return _context.abrupt(\"return\", this.change(method, newUrl, newAs, options));\n\n              case 92:\n                window.location.href = destination;\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 94:\n                this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n                if (!(props.notFound === SSG_DATA_NOT_FOUND)) {\n                  _context.next = 108;\n                  break;\n                }\n\n                _context.prev = 96;\n                _context.next = 99;\n                return this.fetchComponent('/404');\n\n              case 99:\n                notFoundRoute = '/404';\n                _context.next = 105;\n                break;\n\n              case 102:\n                _context.prev = 102;\n                _context.t1 = _context[\"catch\"](96);\n                notFoundRoute = '/_error';\n\n              case 105:\n                _context.next = 107;\n                return this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n                  shallow: false\n                });\n\n              case 107:\n                routeInfo = _context.sent;\n\n              case 108:\n                Router.events.emit('beforeHistoryChange', as, routeProps);\n                this.changeState(method, url, as, options);\n\n                if (true) {\n                  appComp = this.components['/_app'].Component;\n                  window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n                } // shallow routing is only allowed for same page URL changes.\n\n\n                isValidShallowRoute = options.shallow && this.route === route;\n\n                if (options._h && pathname === '/_error' && ((_self$__NEXT_DATA__$p = self.__NEXT_DATA__.props) == null ? void 0 : (_self$__NEXT_DATA__$p2 = _self$__NEXT_DATA__$p.pageProps) == null ? void 0 : _self$__NEXT_DATA__$p2.statusCode) === 500 && props != null && props.pageProps) {\n                  // ensure statusCode is still correct for static 500 page\n                  // when updating query information\n                  props.pageProps.statusCode = 500;\n                }\n\n                _context.next = 115;\n                return this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll || (isValidShallowRoute || !options.scroll ? null : {\n                  x: 0,\n                  y: 0\n                }))[\"catch\"](function (e) {\n                  if (e.cancelled) error = error || e;else throw e;\n                });\n\n              case 115:\n                if (!error) {\n                  _context.next = 118;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n                throw error;\n\n              case 118:\n                if (false) {}\n\n                Router.events.emit('routeChangeComplete', as, routeProps);\n                return _context.abrupt(\"return\", true);\n\n              case 123:\n                _context.prev = 123;\n                _context.t2 = _context[\"catch\"](78);\n\n                if (!_context.t2.cancelled) {\n                  _context.next = 127;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 127:\n                throw _context.t2;\n\n              case 128:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[37, 47], [78, 123], [96, 102]]);\n      }));\n\n      function change(_x, _x2, _x3, _x4, _x5) {\n        return _change.apply(this, arguments);\n      }\n\n      return change;\n    }()\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (true) {\n        if (typeof window.history === 'undefined') {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        }\n\n        if (typeof window.history[method] === 'undefined') {\n          console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n          return;\n        }\n      }\n\n      if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n        this._shallow = options.shallow;\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options,\n          __N: true,\n          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n        }, // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '', as);\n      }\n    }\n  }, {\n    key: \"handleRouteInfoError\",\n    value: function () {\n      var _handleRouteInfoError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(err, pathname, query, as, routeProps, loadErrorFail) {\n        var Component, styleSheets, props, _yield$this$fetchComp, routeInfo;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!err.cancelled) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw err;\n\n              case 2:\n                if (!((0, _routeLoader.isAssetError)(err) || loadErrorFail)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n\n                window.location.href = as; // Changing the URL doesn't block executing the current code path.\n                // So let's throw a cancellation error stop the routing logic.\n\n                throw buildCancellationError();\n\n              case 6:\n                _context2.prev = 6;\n\n                if (!(typeof Component === 'undefined' || typeof styleSheets === 'undefined')) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                ;\n                _context2.next = 11;\n                return this.fetchComponent('/_error');\n\n              case 11:\n                _yield$this$fetchComp = _context2.sent;\n                Component = _yield$this$fetchComp.page;\n                styleSheets = _yield$this$fetchComp.styleSheets;\n\n              case 14:\n                routeInfo = {\n                  props: props,\n                  Component: Component,\n                  styleSheets: styleSheets,\n                  err: err,\n                  error: err\n                };\n\n                if (routeInfo.props) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                _context2.prev = 16;\n                _context2.next = 19;\n                return this.getInitialProps(Component, {\n                  err: err,\n                  pathname: pathname,\n                  query: query\n                });\n\n              case 19:\n                routeInfo.props = _context2.sent;\n                _context2.next = 26;\n                break;\n\n              case 22:\n                _context2.prev = 22;\n                _context2.t0 = _context2[\"catch\"](16);\n                console.error('Error in error page `getInitialProps`: ', _context2.t0);\n                routeInfo.props = {};\n\n              case 26:\n                return _context2.abrupt(\"return\", routeInfo);\n\n              case 29:\n                _context2.prev = 29;\n                _context2.t1 = _context2[\"catch\"](6);\n                return _context2.abrupt(\"return\", this.handleRouteInfoError(_context2.t1, pathname, query, as, routeProps, true));\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 29], [16, 22]]);\n      }));\n\n      function handleRouteInfoError(_x6, _x7, _x8, _x9, _x10, _x11) {\n        return _handleRouteInfoError.apply(this, arguments);\n      }\n\n      return handleRouteInfoError;\n    }()\n  }, {\n    key: \"getRouteInfo\",\n    value: function () {\n      var _getRouteInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(route, pathname, query, as, resolvedAs, routeProps) {\n        var _this2 = this;\n\n        var existingRouteInfo, cachedRouteInfo, routeInfo, Component, __N_SSG, __N_SSP, _require, isValidElementType, dataHref, props;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                existingRouteInfo = this.components[route];\n\n                if (!(routeProps.shallow && existingRouteInfo && this.route === route)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", existingRouteInfo);\n\n              case 4:\n                cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;\n\n                if (!cachedRouteInfo) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.t0 = cachedRouteInfo;\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.next = 11;\n                return this.fetchComponent(route).then(function (res) {\n                  return {\n                    Component: res.page,\n                    styleSheets: res.styleSheets,\n                    __N_SSG: res.mod.__N_SSG,\n                    __N_SSP: res.mod.__N_SSP\n                  };\n                });\n\n              case 11:\n                _context3.t0 = _context3.sent;\n\n              case 12:\n                routeInfo = _context3.t0;\n                Component = routeInfo.Component, __N_SSG = routeInfo.__N_SSG, __N_SSP = routeInfo.__N_SSP;\n\n                if (false) {}\n\n                _require = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\"), isValidElementType = _require.isValidElementType;\n\n                if (isValidElementType(Component)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n\n              case 18:\n                if (__N_SSG || __N_SSP) {\n                  dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n                    pathname: pathname,\n                    query: query\n                  }), resolvedAs, __N_SSG, this.locale);\n                }\n\n                _context3.next = 21;\n                return this._getData(function () {\n                  return __N_SSG ? _this2._getStaticData(dataHref) : __N_SSP ? _this2._getServerData(dataHref) : _this2.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n                  {\n                    pathname: pathname,\n                    query: query,\n                    asPath: as,\n                    locale: _this2.locale,\n                    locales: _this2.locales,\n                    defaultLocale: _this2.defaultLocale\n                  });\n                });\n\n              case 21:\n                props = _context3.sent;\n                routeInfo.props = props;\n                this.components[route] = routeInfo;\n                return _context3.abrupt(\"return\", routeInfo);\n\n              case 27:\n                _context3.prev = 27;\n                _context3.t1 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", this.handleRouteInfoError(_context3.t1, pathname, query, as, routeProps));\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 27]]);\n      }));\n\n      function getRouteInfo(_x12, _x13, _x14, _x15, _x16, _x17) {\n        return _getRouteInfo.apply(this, arguments);\n      }\n\n      return getRouteInfo;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(route, pathname, query, as, data, resetScroll) {\n      this.isFallback = false;\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      return this.notify(data, resetScroll);\n    }\n    /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = _slicedToArray(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = _slicedToArray(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value or `#top`\n      // To mirror browsers\n\n\n      if (hash === '' || hash === 'top') {\n        window.scrollTo(0, 0);\n        return;\n      } // First we check if the element by id is found\n\n\n      var idEl = document.getElementById(hash);\n\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(hash)[0];\n\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {\n        var _this3 = this;\n\n        var asPath,\n            options,\n            parsed,\n            pathname,\n            parsedAs,\n            localePathResult,\n            pages,\n            resolvedAs,\n            rewrites,\n            _yield2,\n            rewritesResult,\n            route,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                asPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : url;\n                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n                pathname = parsed.pathname;\n\n                if (false) {}\n\n                _context4.next = 7;\n                return this.pageLoader.getPageList();\n\n              case 7:\n                pages = _context4.sent;\n                resolvedAs = asPath;\n\n                if (true) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                _context4.next = 12;\n                return (0, _routeLoader.getClientBuildManifest)();\n\n              case 12:\n                _yield2 = _context4.sent;\n                rewrites = _yield2.__rewrites;\n                rewritesResult = (0, _resolveRewrites[\"default\"])(addBasePath(addLocale(asPath, this.locale)), pages, rewrites, parsed.query, function (p) {\n                  return resolveDynamicRoute(p, pages);\n                }, this.locales);\n                resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale);\n\n                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                  // if this directly matches a page we need to update the href to\n                  // allow the correct page chunk to be loaded\n                  pathname = rewritesResult.resolvedHref;\n                  parsed.pathname = pathname;\n                  url = (0, _utils.formatWithValidation)(parsed);\n                }\n\n                _context4.next = 21;\n                break;\n\n              case 19:\n                parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n                if (parsed.pathname !== pathname) {\n                  pathname = parsed.pathname;\n                  url = (0, _utils.formatWithValidation)(parsed);\n                }\n\n              case 21:\n                route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname); // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n                if (false) {}\n\n                return _context4.abrupt(\"return\");\n\n              case 24:\n                _context4.next = 26;\n                return Promise.all([this.pageLoader._isSsg(route).then(function (isSsg) {\n                  return isSsg ? _this3._getStaticData(_this3.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : _this3.locale)) : false;\n                }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function prefetch(_x18) {\n        return _prefetch.apply(this, arguments);\n      }\n\n      return prefetch;\n    }()\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(route) {\n        var cancelled, cancel, componentResult, error;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = this.clc = function () {\n                  cancelled = true;\n                };\n\n                _context5.next = 4;\n                return this.pageLoader.loadPage(route);\n\n              case 4:\n                componentResult = _context5.sent;\n\n                if (!cancelled) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n                error.cancelled = true;\n                throw error;\n\n              case 9:\n                if (cancel === this.clc) {\n                  this.clc = null;\n                }\n\n                return _context5.abrupt(\"return\", componentResult);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function fetchComponent(_x19) {\n        return _fetchComponent.apply(this, arguments);\n      }\n\n      return fetchComponent;\n    }()\n  }, {\n    key: \"_getData\",\n    value: function _getData(fn) {\n      var _this4 = this;\n\n      var cancelled = false;\n\n      var cancel = function cancel() {\n        cancelled = true;\n      };\n\n      this.clc = cancel;\n      return fn().then(function (data) {\n        if (cancel === _this4.clc) {\n          _this4.clc = null;\n        }\n\n        if (cancelled) {\n          var err = new Error('Loading initial props cancelled');\n          err.cancelled = true;\n          throw err;\n        }\n\n        return data;\n      });\n    }\n  }, {\n    key: \"_getStaticData\",\n    value: function _getStaticData(dataHref) {\n      var _this5 = this;\n\n      var _URL = new URL(dataHref, window.location.href),\n          cacheKey = _URL.href;\n\n      if (false) {}\n\n      return fetchNextData(dataHref, this.isSsr).then(function (data) {\n        _this5.sdc[cacheKey] = data;\n        return data;\n      });\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function _getServerData(dataHref) {\n      var _this6 = this;\n\n      var _URL2 = new URL(dataHref, window.location.href),\n          resourceKey = _URL2.href;\n\n      if (this.sdr[resourceKey]) {\n        return this.sdr[resourceKey];\n      }\n\n      return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(function (data) {\n        delete _this6.sdr[resourceKey];\n        return data;\n      })[\"catch\"](function (err) {\n        delete _this6.sdr[resourceKey];\n        throw err;\n      });\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(Component, ctx) {\n      var App = this.components['/_app'].Component;\n\n      var AppTree = this._wrapApp(App);\n\n      ctx.AppTree = AppTree;\n      return (0, _utils.loadGetInitialProps)(App, {\n        AppTree: AppTree,\n        Component: Component,\n        router: this,\n        ctx: ctx\n      });\n    }\n  }, {\n    key: \"abortComponentLoad\",\n    value: function abortComponentLoad(as, routeProps) {\n      if (this.clc) {\n        Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n        this.clc();\n        this.clc = null;\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(data, resetScroll) {\n      return this.sub(data, this.components['/_app'].Component, resetScroll);\n    }\n  }]);\n\n  return Router;\n}();\n\nexports[\"default\"] = Router;\nRouter.events = (0, _mitt[\"default\"])();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/format-url.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.formatUrl = formatUrl;\n\nvar querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ \"./node_modules/next/dist/next-server/lib/router/utils/querystring.js\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n} // Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvar slashedProtocols = /https?|ftp|gopher|file/;\n\nfunction formatUrl(urlObj) {\n  var auth = urlObj.auth,\n      hostname = urlObj.hostname;\n  var protocol = urlObj.protocol || '';\n  var pathname = urlObj.pathname || '';\n  var hash = urlObj.hash || '';\n  var query = urlObj.query || '';\n  var host = false;\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';\n\n  if (urlObj.host) {\n    host = auth + urlObj.host;\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? \"[\".concat(hostname, \"]\") : hostname);\n\n    if (urlObj.port) {\n      host += ':' + urlObj.port;\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query));\n  }\n\n  var search = urlObj.search || query && \"?\".concat(query) || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash;\n  if (search && search[0] !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n  search = search.replace('#', '%23');\n  return \"\".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvZm9ybWF0LXVybC50cz8xM2M3Il0sIm5hbWVzIjpbInNsYXNoZWRQcm90b2NvbHMiLCJwcm90b2NvbCIsInVybE9iaiIsInBhdGhuYW1lIiwiaGFzaCIsInF1ZXJ5IiwiaG9zdCIsImF1dGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJob3N0bmFtZSIsIlN0cmluZyIsInF1ZXJ5c3RyaW5nIiwic2VhcmNoIl0sIm1hcHBpbmdzIjoiOzs7OztBQXdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXhCQSxDLENBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFNQSxJQUFNQSxnQkFBZ0IsR0FBdEI7O0FBRU8sMkJBQXNDO0FBQUEsTUFDdkMsSUFEdUMsR0FDM0MsTUFEMkMsQ0FDdkMsSUFEdUM7QUFBQSxNQUN2QyxRQUR1QyxHQUMzQyxNQUQyQyxDQUN2QyxRQUR1QztBQUUzQyxNQUFJQyxRQUFRLEdBQUdDLE1BQU0sQ0FBTkEsWUFBZjtBQUNBLE1BQUlDLFFBQVEsR0FBR0QsTUFBTSxDQUFOQSxZQUFmO0FBQ0EsTUFBSUUsSUFBSSxHQUFHRixNQUFNLENBQU5BLFFBQVg7QUFDQSxNQUFJRyxLQUFLLEdBQUdILE1BQU0sQ0FBTkEsU0FBWjtBQUNBLE1BQUlJLElBQW9CLEdBQXhCO0FBRUFDLE1BQUksR0FBR0EsSUFBSSxHQUFHQyxrQkFBa0IsQ0FBbEJBLElBQWtCLENBQWxCQSx3QkFBSCxNQUFYRDs7QUFFQSxNQUFJTCxNQUFNLENBQVYsTUFBaUI7QUFDZkksUUFBSSxHQUFHQyxJQUFJLEdBQUdMLE1BQU0sQ0FBcEJJO0FBREYsU0FFTyxjQUFjO0FBQ25CQSxRQUFJLEdBQUdDLElBQUksSUFBSSxDQUFDRSxRQUFRLENBQVJBLFFBQUQsR0FBQ0EsQ0FBRCwrQkFBZkgsUUFBVyxDQUFYQTs7QUFDQSxRQUFJSixNQUFNLENBQVYsTUFBaUI7QUFDZkksVUFBSSxJQUFJLE1BQU1KLE1BQU0sQ0FBcEJJO0FBRUg7QUFFRDs7QUFBQSxNQUFJRCxLQUFLLElBQUksaUJBQWIsVUFBd0M7QUFDdENBLFNBQUssR0FBR0ssTUFBTSxDQUFDQyxXQUFXLENBQVhBLHVCQUFmTixLQUFlTSxDQUFELENBQWROO0FBR0Y7O0FBQUEsTUFBSU8sTUFBTSxHQUFHVixNQUFNLENBQU5BLFVBQWtCRyxLQUFLLGVBQXZCSCxLQUF1QixDQUF2QkEsSUFBYjtBQUVBLE1BQUlELFFBQVEsSUFBSUEsUUFBUSxDQUFSQSxPQUFnQixDQUFoQkEsT0FBaEIsS0FBNkNBLFFBQVEsSUFBUkE7O0FBRTdDLE1BQ0VDLE1BQU0sQ0FBTkEsV0FDQyxDQUFDLGFBQWFGLGdCQUFnQixDQUFoQkEsS0FBZCxRQUFjQSxDQUFkLEtBQWtETSxJQUFJLEtBRnpELE9BR0U7QUFDQUEsUUFBSSxHQUFHLFFBQVFBLElBQUksSUFBbkJBLEVBQU8sQ0FBUEE7QUFDQSxRQUFJSCxRQUFRLElBQUlBLFFBQVEsQ0FBUkEsQ0FBUSxDQUFSQSxLQUFoQixLQUFxQ0EsUUFBUSxHQUFHLE1BQVhBO0FBTHZDLFNBTU8sSUFBSSxDQUFKLE1BQVc7QUFDaEJHLFFBQUksR0FBSkE7QUFHRjs7QUFBQSxNQUFJRixJQUFJLElBQUlBLElBQUksQ0FBSkEsQ0FBSSxDQUFKQSxLQUFaLEtBQTZCQSxJQUFJLEdBQUcsTUFBUEE7QUFDN0IsTUFBSVEsTUFBTSxJQUFJQSxNQUFNLENBQU5BLENBQU0sQ0FBTkEsS0FBZCxLQUFpQ0EsTUFBTSxHQUFHLE1BQVRBO0FBRWpDVCxVQUFRLEdBQUdBLFFBQVEsQ0FBUkEsaUJBQVhBLGtCQUFXQSxDQUFYQTtBQUNBUyxRQUFNLEdBQUdBLE1BQU0sQ0FBTkEsYUFBVEEsS0FBU0EsQ0FBVEE7QUFFQSxtQkFBVVgsUUFBVixTQUFxQkssSUFBckIsU0FBNEJILFFBQTVCLFNBQXVDUyxNQUF2QztBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9uZXh0LXNlcnZlci9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC11cmwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGb3JtYXQgZnVuY3Rpb24gbW9kaWZpZWQgZnJvbSBub2RlanNcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgeyBVcmxPYmplY3QgfSBmcm9tICd1cmwnXG5pbXBvcnQgeyBQYXJzZWRVcmxRdWVyeSB9IGZyb20gJ3F1ZXJ5c3RyaW5nJ1xuaW1wb3J0ICogYXMgcXVlcnlzdHJpbmcgZnJvbSAnLi9xdWVyeXN0cmluZydcblxuY29uc3Qgc2xhc2hlZFByb3RvY29scyA9IC9odHRwcz98ZnRwfGdvcGhlcnxmaWxlL1xuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VXJsKHVybE9iajogVXJsT2JqZWN0KSB7XG4gIGxldCB7IGF1dGgsIGhvc3RuYW1lIH0gPSB1cmxPYmpcbiAgbGV0IHByb3RvY29sID0gdXJsT2JqLnByb3RvY29sIHx8ICcnXG4gIGxldCBwYXRobmFtZSA9IHVybE9iai5wYXRobmFtZSB8fCAnJ1xuICBsZXQgaGFzaCA9IHVybE9iai5oYXNoIHx8ICcnXG4gIGxldCBxdWVyeSA9IHVybE9iai5xdWVyeSB8fCAnJ1xuICBsZXQgaG9zdDogc3RyaW5nIHwgZmFsc2UgPSBmYWxzZVxuXG4gIGF1dGggPSBhdXRoID8gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpLnJlcGxhY2UoLyUzQS9pLCAnOicpICsgJ0AnIDogJydcblxuICBpZiAodXJsT2JqLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHVybE9iai5ob3N0XG4gIH0gZWxzZSBpZiAoaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh+aG9zdG5hbWUuaW5kZXhPZignOicpID8gYFske2hvc3RuYW1lfV1gIDogaG9zdG5hbWUpXG4gICAgaWYgKHVybE9iai5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHVybE9iai5wb3J0XG4gICAgfVxuICB9XG5cbiAgaWYgKHF1ZXJ5ICYmIHR5cGVvZiBxdWVyeSA9PT0gJ29iamVjdCcpIHtcbiAgICBxdWVyeSA9IFN0cmluZyhxdWVyeXN0cmluZy51cmxRdWVyeVRvU2VhcmNoUGFyYW1zKHF1ZXJ5IGFzIFBhcnNlZFVybFF1ZXJ5KSlcbiAgfVxuXG4gIGxldCBzZWFyY2ggPSB1cmxPYmouc2VhcmNoIHx8IChxdWVyeSAmJiBgPyR7cXVlcnl9YCkgfHwgJydcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOidcblxuICBpZiAoXG4gICAgdXJsT2JqLnNsYXNoZXMgfHxcbiAgICAoKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xzLnRlc3QocHJvdG9jb2wpKSAmJiBob3N0ICE9PSBmYWxzZSlcbiAgKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJylcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWVbMF0gIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZVxuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnXG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoWzBdICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoWzBdICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaFxuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBlbmNvZGVVUklDb21wb25lbnQpXG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpXG5cbiAgcmV0dXJuIGAke3Byb3RvY29sfSR7aG9zdH0ke3BhdGhuYW1lfSR7c2VhcmNofSR7aGFzaH1gXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/format-url.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports[\"default\"] = getAssetPathFromRoute; // Translates a logical route into its pages asset path (relative from a common prefix)\n// \"asset path\" being its javascript file, data file, prerendered html,...\n\nfunction getAssetPathFromRoute(route) {\n  var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var path = route === '/' ? '/index' : /^\\/index(\\/|$)/.test(route) ? \"/index\".concat(route) : \"\".concat(route);\n  return path + ext;\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvZ2V0LWFzc2V0LXBhdGgtZnJvbS1yb3V0ZS50cz9lMWMwIl0sIm5hbWVzIjpbImV4dCIsInBhdGgiLCJyb3V0ZSJdLCJtYXBwaW5ncyI6Ijs7OzRDQUFBO0FBQ0E7O0FBQ2Usc0NBR0w7QUFBQSxNQURSQSxHQUNRLHVFQUhLLEVBR0w7QUFDUixNQUFNQyxJQUFJLEdBQ1JDLEtBQUssS0FBTEEsaUJBRUksa0VBSE4sS0FHTSxDQUhOO0FBTUEsU0FBT0QsSUFBSSxHQUFYO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvZ2V0LWFzc2V0LXBhdGgtZnJvbS1yb3V0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRyYW5zbGF0ZXMgYSBsb2dpY2FsIHJvdXRlIGludG8gaXRzIHBhZ2VzIGFzc2V0IHBhdGggKHJlbGF0aXZlIGZyb20gYSBjb21tb24gcHJlZml4KVxuLy8gXCJhc3NldCBwYXRoXCIgYmVpbmcgaXRzIGphdmFzY3JpcHQgZmlsZSwgZGF0YSBmaWxlLCBwcmVyZW5kZXJlZCBodG1sLC4uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QXNzZXRQYXRoRnJvbVJvdXRlKFxuICByb3V0ZTogc3RyaW5nLFxuICBleHQ6IHN0cmluZyA9ICcnXG4pOiBzdHJpbmcge1xuICBjb25zdCBwYXRoID1cbiAgICByb3V0ZSA9PT0gJy8nXG4gICAgICA/ICcvaW5kZXgnXG4gICAgICA6IC9eXFwvaW5kZXgoXFwvfCQpLy50ZXN0KHJvdXRlKVxuICAgICAgPyBgL2luZGV4JHtyb3V0ZX1gXG4gICAgICA6IGAke3JvdXRlfWBcbiAgcmV0dXJuIHBhdGggKyBleHRcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string\n\nvar TEST_ROUTE = /\\/\\[[^/]+?\\](?=\\/|$)/;\n\nfunction isDynamicRoute(route) {\n  return TEST_ROUTE.test(route);\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvaXMtZHluYW1pYy50cz9jZGU1Il0sIm5hbWVzIjpbIlRFU1RfUk9VVEUiXSwibWFwcGluZ3MiOiI7Ozt5Q0FBQTs7QUFDQSxJQUFNQSxVQUFVLEdBQWhCOztBQUVPLCtCQUFnRDtBQUNyRCxTQUFPQSxVQUFVLENBQVZBLEtBQVAsS0FBT0EsQ0FBUDtBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9uZXh0LXNlcnZlci9saWIvcm91dGVyL3V0aWxzL2lzLWR5bmFtaWMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJZGVudGlmeSAvW3BhcmFtXS8gaW4gcm91dGUgc3RyaW5nXG5jb25zdCBURVNUX1JPVVRFID0gL1xcL1xcW1teL10rP1xcXSg/PVxcL3wkKS9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRHluYW1pY1JvdXRlKHJvdXRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIFRFU1RfUk9VVEUudGVzdChyb3V0ZSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.parseRelativeUrl = parseRelativeUrl;\n\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/next/dist/next-server/lib/utils.js\");\n\nvar _querystring = __webpack_require__(/*! ./querystring */ \"./node_modules/next/dist/next-server/lib/router/utils/querystring.js\");\n/**\n* Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n* (e.g. `./hello`) then at least base must be.\n* Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n* the current origin will be parsed as relative\n*/\n\n\nfunction parseRelativeUrl(url, base) {\n  var globalBase = new URL(false ? undefined : (0, _utils.getLocationOrigin)());\n  var resolvedBase = base ? new URL(base, globalBase) : globalBase;\n\n  var _URL = new URL(url, resolvedBase),\n      pathname = _URL.pathname,\n      searchParams = _URL.searchParams,\n      search = _URL.search,\n      hash = _URL.hash,\n      href = _URL.href,\n      origin = _URL.origin;\n\n  if (origin !== globalBase.origin) {\n    throw new Error(\"invariant: invalid relative URL, router received \".concat(url));\n  }\n\n  return {\n    pathname: pathname,\n    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),\n    search: search,\n    hash: hash,\n    href: href.slice(globalBase.origin.length)\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcGFyc2UtcmVsYXRpdmUtdXJsLnRzPzk0MGQiXSwibmFtZXMiOlsiZ2xvYmFsQmFzZSIsInJlc29sdmVkQmFzZSIsImJhc2UiLCJvcmlnaW4iLCJwYXRobmFtZSIsInF1ZXJ5Iiwic2VhcmNoIiwiaGFzaCIsImhyZWYiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLHFDQUFzRDtBQUMzRCxNQUFNQSxVQUFVLEdBQUcsUUFDakIsb0JBQTZDLFdBRC9DLGlCQUMrQyxHQUQ1QixDQUFuQjtBQUdBLE1BQU1DLFlBQVksR0FBR0MsSUFBSSxHQUFHLGNBQUgsVUFBRyxDQUFILEdBQXpCOztBQUoyRCxhQUtJLGFBQS9ELFlBQStELENBTEo7QUFBQSxNQUtyRCxRQUxxRCxRQUtyRCxRQUxxRDtBQUFBLE1BS3JELFlBTHFELFFBS3JELFlBTHFEO0FBQUEsTUFLckQsTUFMcUQsUUFLckQsTUFMcUQ7QUFBQSxNQUtyRCxJQUxxRCxRQUtyRCxJQUxxRDtBQUFBLE1BS3JELElBTHFELFFBS3JELElBTHFEO0FBQUEsTUFLckQsTUFMcUQsUUFLckQsTUFMcUQ7O0FBUzNELE1BQUlDLE1BQU0sS0FBS0gsVUFBVSxDQUF6QixRQUFrQztBQUNoQyxVQUFNLHFFQUFOLEdBQU0sRUFBTjtBQUVGOztBQUFBLFNBQU87QUFDTEksWUFESyxFQUNMQSxRQURLO0FBRUxDLFNBQUssRUFBRSx5Q0FGRixZQUVFLENBRkY7QUFHTEMsVUFISyxFQUdMQSxNQUhLO0FBSUxDLFFBSkssRUFJTEEsSUFKSztBQUtMQyxRQUFJLEVBQUVBLElBQUksQ0FBSkEsTUFBV1IsVUFBVSxDQUFWQSxPQUxuQixNQUtRUTtBQUxELEdBQVA7QUFPRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRMb2NhdGlvbk9yaWdpbiB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuaW1wb3J0IHsgc2VhcmNoUGFyYW1zVG9VcmxRdWVyeSB9IGZyb20gJy4vcXVlcnlzdHJpbmcnXG5cbi8qKlxuICogUGFyc2VzIHBhdGgtcmVsYXRpdmUgdXJscyAoZS5nLiBgL2hlbGxvL3dvcmxkP2Zvbz1iYXJgKS4gSWYgdXJsIGlzbid0IHBhdGgtcmVsYXRpdmVcbiAqIChlLmcuIGAuL2hlbGxvYCkgdGhlbiBhdCBsZWFzdCBiYXNlIG11c3QgYmUuXG4gKiBBYnNvbHV0ZSB1cmxzIGFyZSByZWplY3RlZCB3aXRoIG9uZSBleGNlcHRpb24sIGluIHRoZSBicm93c2VyLCBhYnNvbHV0ZSB1cmxzIHRoYXQgYXJlIG9uXG4gKiB0aGUgY3VycmVudCBvcmlnaW4gd2lsbCBiZSBwYXJzZWQgYXMgcmVsYXRpdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVsYXRpdmVVcmwodXJsOiBzdHJpbmcsIGJhc2U/OiBzdHJpbmcpIHtcbiAgY29uc3QgZ2xvYmFsQmFzZSA9IG5ldyBVUkwoXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyAnaHR0cDovL24nIDogZ2V0TG9jYXRpb25PcmlnaW4oKVxuICApXG4gIGNvbnN0IHJlc29sdmVkQmFzZSA9IGJhc2UgPyBuZXcgVVJMKGJhc2UsIGdsb2JhbEJhc2UpIDogZ2xvYmFsQmFzZVxuICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2hQYXJhbXMsIHNlYXJjaCwgaGFzaCwgaHJlZiwgb3JpZ2luIH0gPSBuZXcgVVJMKFxuICAgIHVybCxcbiAgICByZXNvbHZlZEJhc2VcbiAgKVxuICBpZiAob3JpZ2luICE9PSBnbG9iYWxCYXNlLm9yaWdpbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgaW52YXJpYW50OiBpbnZhbGlkIHJlbGF0aXZlIFVSTCwgcm91dGVyIHJlY2VpdmVkICR7dXJsfWApXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBxdWVyeTogc2VhcmNoUGFyYW1zVG9VcmxRdWVyeShzZWFyY2hQYXJhbXMpLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoLFxuICAgIGhyZWY6IGhyZWYuc2xpY2UoZ2xvYmFsQmFzZS5vcmlnaW4ubGVuZ3RoKSxcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/querystring.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n\nexports.__esModule = true;\nexports.searchParamsToUrlQuery = searchParamsToUrlQuery;\nexports.urlQueryToSearchParams = urlQueryToSearchParams;\nexports.assign = assign;\n\nfunction searchParamsToUrlQuery(searchParams) {\n  var query = {};\n  searchParams.forEach(function (value, key) {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value;\n    } else if (Array.isArray(query[key])) {\n      ;\n      query[key].push(value);\n    } else {\n      query[key] = [query[key], value];\n    }\n  });\n  return query;\n}\n\nfunction stringifyUrlQueryParam(param) {\n  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {\n    return String(param);\n  } else {\n    return '';\n  }\n}\n\nfunction urlQueryToSearchParams(urlQuery) {\n  var result = new URLSearchParams();\n  Object.entries(urlQuery).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (Array.isArray(value)) {\n      value.forEach(function (item) {\n        return result.append(key, stringifyUrlQueryParam(item));\n      });\n    } else {\n      result.set(key, stringifyUrlQueryParam(value));\n    }\n  });\n  return result;\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    searchParamsList[_key - 1] = arguments[_key];\n  }\n\n  searchParamsList.forEach(function (searchParams) {\n    Array.from(searchParams.keys()).forEach(function (key) {\n      return target[\"delete\"](key);\n    });\n    searchParams.forEach(function (value, key) {\n      return target.append(key, value);\n    });\n  });\n  return target;\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcudHM/MmViZiJdLCJuYW1lcyI6WyJxdWVyeSIsInNlYXJjaFBhcmFtcyIsIkFycmF5IiwiaXNOYU4iLCJTdHJpbmciLCJyZXN1bHQiLCJPYmplY3QiLCJ2YWx1ZSIsIml0ZW0iLCJzdHJpbmdpZnlVcmxRdWVyeVBhcmFtIiwic2VhcmNoUGFyYW1zTGlzdCIsImtleSIsInRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRU8sOENBRVc7QUFDaEIsTUFBTUEsS0FBcUIsR0FBM0I7QUFDQUMsY0FBWSxDQUFaQSxRQUFxQixzQkFBZ0I7QUFDbkMsUUFBSSxPQUFPRCxLQUFLLENBQVosR0FBWSxDQUFaLEtBQUosYUFBdUM7QUFDckNBLFdBQUssQ0FBTEEsR0FBSyxDQUFMQTtBQURGLFdBRU8sSUFBSUUsS0FBSyxDQUFMQSxRQUFjRixLQUFLLENBQXZCLEdBQXVCLENBQW5CRSxDQUFKLEVBQStCO0FBQ3BDO0FBQUVGLFdBQUssQ0FBTixHQUFNLENBQUxBLENBQUQsSUFBQ0EsQ0FBRCxLQUFDQTtBQURHLFdBRUE7QUFDTEEsV0FBSyxDQUFMQSxHQUFLLENBQUxBLEdBQWEsQ0FBQ0EsS0FBSyxDQUFOLEdBQU0sQ0FBTixFQUFiQSxLQUFhLENBQWJBO0FBRUg7QUFSREM7QUFTQTtBQUdGOztBQUFBLHVDQUF1RDtBQUNyRCxNQUNFLDZCQUNDLDZCQUE2QixDQUFDRSxLQUFLLENBRHBDLEtBQ29DLENBRHBDLElBRUEsaUJBSEYsV0FJRTtBQUNBLFdBQU9DLE1BQU0sQ0FBYixLQUFhLENBQWI7QUFMRixTQU1PO0FBQ0w7QUFFSDtBQUVNOztBQUFBLDBDQUVZO0FBQ2pCLE1BQU1DLE1BQU0sR0FBRyxJQUFmLGVBQWUsRUFBZjtBQUNBQyxRQUFNLENBQU5BLDBCQUFpQyxnQkFBa0I7QUFBQTtBQUFBLFFBQWpCLEdBQWlCO0FBQUEsUUFBbEIsS0FBa0I7O0FBQ2pELFFBQUlKLEtBQUssQ0FBTEEsUUFBSixLQUFJQSxDQUFKLEVBQTBCO0FBQ3hCSyxXQUFLLENBQUxBLFFBQWVDLGNBQUQ7QUFBQSxlQUFVSCxNQUFNLENBQU5BLFlBQW1CSSxzQkFBc0IsQ0FBakVGLElBQWlFLENBQXpDRixDQUFWO0FBQUEsT0FBZEU7QUFERixXQUVPO0FBQ0xGLFlBQU0sQ0FBTkEsU0FBZ0JJLHNCQUFzQixDQUF0Q0osS0FBc0MsQ0FBdENBO0FBRUg7QUFOREM7QUFPQTtBQUdLOztBQUFBLHdCQUdZO0FBQUEsb0NBSFosZ0JBR1k7QUFIWixvQkFHWTtBQUFBOztBQUNqQkksa0JBQWdCLENBQWhCQSxRQUEwQlQsc0JBQUQsRUFBa0I7QUFDekNDLFNBQUssQ0FBTEEsS0FBV0QsWUFBWSxDQUF2QkMsSUFBV0QsRUFBWEMsVUFBeUNTLGFBQUQ7QUFBQSxhQUFTQyxpQkFBakRWLEdBQWlEVSxDQUFUO0FBQUEsS0FBeENWO0FBQ0FELGdCQUFZLENBQVpBLFFBQXFCO0FBQUEsYUFBZ0JXLE1BQU0sQ0FBTkEsWUFBckNYLEtBQXFDVyxDQUFoQjtBQUFBLEtBQXJCWDtBQUZGUztBQUlBO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZWRVcmxRdWVyeSB9IGZyb20gJ3F1ZXJ5c3RyaW5nJ1xuXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoUGFyYW1zVG9VcmxRdWVyeShcbiAgc2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNcbik6IFBhcnNlZFVybFF1ZXJ5IHtcbiAgY29uc3QgcXVlcnk6IFBhcnNlZFVybFF1ZXJ5ID0ge31cbiAgc2VhcmNoUGFyYW1zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5W2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBxdWVyeVtrZXldID0gdmFsdWVcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocXVlcnlba2V5XSkpIHtcbiAgICAgIDsocXVlcnlba2V5XSBhcyBzdHJpbmdbXSkucHVzaCh2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcXVlcnlba2V5XSA9IFtxdWVyeVtrZXldIGFzIHN0cmluZywgdmFsdWVdXG4gICAgfVxuICB9KVxuICByZXR1cm4gcXVlcnlcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VXJsUXVlcnlQYXJhbShwYXJhbTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKFxuICAgIHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycgfHxcbiAgICAodHlwZW9mIHBhcmFtID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ocGFyYW0pKSB8fFxuICAgIHR5cGVvZiBwYXJhbSA9PT0gJ2Jvb2xlYW4nXG4gICkge1xuICAgIHJldHVybiBTdHJpbmcocGFyYW0pXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVybFF1ZXJ5VG9TZWFyY2hQYXJhbXMoXG4gIHVybFF1ZXJ5OiBQYXJzZWRVcmxRdWVyeVxuKTogVVJMU2VhcmNoUGFyYW1zIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG4gIE9iamVjdC5lbnRyaWVzKHVybFF1ZXJ5KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHJlc3VsdC5hcHBlbmQoa2V5LCBzdHJpbmdpZnlVcmxRdWVyeVBhcmFtKGl0ZW0pKSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnNldChrZXksIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0odmFsdWUpKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKFxuICB0YXJnZXQ6IFVSTFNlYXJjaFBhcmFtcyxcbiAgLi4uc2VhcmNoUGFyYW1zTGlzdDogVVJMU2VhcmNoUGFyYW1zW11cbik6IFVSTFNlYXJjaFBhcmFtcyB7XG4gIHNlYXJjaFBhcmFtc0xpc3QuZm9yRWFjaCgoc2VhcmNoUGFyYW1zKSA9PiB7XG4gICAgQXJyYXkuZnJvbShzZWFyY2hQYXJhbXMua2V5cygpKS5mb3JFYWNoKChrZXkpID0+IHRhcmdldC5kZWxldGUoa2V5KSlcbiAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gdGFyZ2V0LmFwcGVuZChrZXksIHZhbHVlKSlcbiAgfSlcbiAgcmV0dXJuIHRhcmdldFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/querystring.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports[\"default\"] = resolveRewrites;\n\nfunction resolveRewrites() {}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcmVzb2x2ZS1yZXdyaXRlcy1ub29wLnRzP2FjYzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZSwyQkFBMkIsQ0FBRSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci91dGlscy9yZXNvbHZlLXJld3JpdGVzLW5vb3AuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlUmV3cml0ZXMoKSB7fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.getRouteMatcher = getRouteMatcher;\n\nfunction getRouteMatcher(routeRegex) {\n  var re = routeRegex.re,\n      groups = routeRegex.groups;\n  return function (pathname) {\n    var routeMatch = re.exec(pathname);\n\n    if (!routeMatch) {\n      return false;\n    }\n\n    var decode = function decode(param) {\n      try {\n        return decodeURIComponent(param);\n      } catch (_) {\n        var err = new Error('failed to decode param');\n        err.code = 'DECODE_FAILED';\n        throw err;\n      }\n    };\n\n    var params = {};\n    Object.keys(groups).forEach(function (slugName) {\n      var g = groups[slugName];\n      var m = routeMatch[g.pos];\n\n      if (m !== undefined) {\n        params[slugName] = ~m.indexOf('/') ? m.split('/').map(function (entry) {\n          return decode(entry);\n        }) : g.repeat ? [decode(m)] : decode(m);\n      }\n    });\n    return params;\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtbWF0Y2hlci50cz9hNjcyIl0sIm5hbWVzIjpbInBhdGhuYW1lIiwicm91dGVNYXRjaCIsInJlIiwiZGVjb2RlIiwicGFyYW0iLCJkZWNvZGVVUklDb21wb25lbnQiLCJlcnIiLCJwYXJhbXMiLCJPYmplY3QiLCJzbHVnTmFtZSIsImciLCJncm91cHMiLCJtIiwiZW50cnkiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRU8scUNBQXVFO0FBQUEsTUFDdEUsRUFEc0UsR0FDNUUsVUFENEUsQ0FDdEUsRUFEc0U7QUFBQSxNQUN0RSxNQURzRSxHQUM1RSxVQUQ0RSxDQUN0RSxNQURzRTtBQUU1RSxTQUFRQSxrQkFBRCxFQUF5QztBQUM5QyxRQUFNQyxVQUFVLEdBQUdDLEVBQUUsQ0FBRkEsS0FBbkIsUUFBbUJBLENBQW5COztBQUNBLFFBQUksQ0FBSixZQUFpQjtBQUNmO0FBR0Y7O0FBQUEsUUFBTUMsTUFBTSxHQUFJQyxTQUFWRCxNQUFVQyxNQUFELEVBQW1CO0FBQ2hDLFVBQUk7QUFDRixlQUFPQyxrQkFBa0IsQ0FBekIsS0FBeUIsQ0FBekI7QUFDQSxPQUZGLENBRUUsVUFBVTtBQUNWLFlBQU1DLEdBQThCLEdBQUcsVUFBdkMsd0JBQXVDLENBQXZDO0FBR0FBLFdBQUcsQ0FBSEE7QUFDQTtBQUVIO0FBVkQ7O0FBV0EsUUFBTUMsTUFBa0QsR0FBeEQ7QUFFQUMsVUFBTSxDQUFOQSxxQkFBNkJDLGtCQUFELEVBQXNCO0FBQ2hELFVBQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFoQixRQUFnQixDQUFoQjtBQUNBLFVBQU1DLENBQUMsR0FBR1gsVUFBVSxDQUFDUyxDQUFDLENBQXRCLEdBQW9CLENBQXBCOztBQUNBLFVBQUlFLENBQUMsS0FBTCxXQUFxQjtBQUNuQkwsY0FBTSxDQUFOQSxRQUFNLENBQU5BLEdBQW1CLENBQUNLLENBQUMsQ0FBREEsUUFBRCxHQUFDQSxDQUFELEdBQ2ZBLENBQUMsQ0FBREEsZUFBa0JDLGVBQUQ7QUFBQSxpQkFBV1YsTUFBTSxDQURuQixLQUNtQixDQUFqQjtBQUFBLFNBQWpCUyxDQURlLEdBRWZGLENBQUMsQ0FBREEsU0FDQSxDQUFDUCxNQUFNLENBRFBPLENBQ08sQ0FBUCxDQURBQSxHQUVBUCxNQUFNLENBSlZJLENBSVUsQ0FKVkE7QUFNSDtBQVZEQztBQVdBO0FBOUJGO0FBZ0NEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9uZXh0LXNlcnZlci9saWIvcm91dGVyL3V0aWxzL3JvdXRlLW1hdGNoZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRSb3V0ZVJlZ2V4IH0gZnJvbSAnLi9yb3V0ZS1yZWdleCdcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdXRlTWF0Y2hlcihyb3V0ZVJlZ2V4OiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRSb3V0ZVJlZ2V4Pikge1xuICBjb25zdCB7IHJlLCBncm91cHMgfSA9IHJvdXRlUmVnZXhcbiAgcmV0dXJuIChwYXRobmFtZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4ge1xuICAgIGNvbnN0IHJvdXRlTWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lISlcbiAgICBpZiAoIXJvdXRlTWF0Y2gpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGRlY29kZSA9IChwYXJhbTogc3RyaW5nKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKVxuICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICBjb25zdCBlcnI6IEVycm9yICYgeyBjb2RlPzogc3RyaW5nIH0gPSBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2ZhaWxlZCB0byBkZWNvZGUgcGFyYW0nXG4gICAgICAgIClcbiAgICAgICAgZXJyLmNvZGUgPSAnREVDT0RFX0ZBSUxFRCdcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtczogeyBbcGFyYW1OYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9ID0ge31cblxuICAgIE9iamVjdC5rZXlzKGdyb3VwcykuZm9yRWFjaCgoc2x1Z05hbWU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZyA9IGdyb3Vwc1tzbHVnTmFtZV1cbiAgICAgIGNvbnN0IG0gPSByb3V0ZU1hdGNoW2cucG9zXVxuICAgICAgaWYgKG0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJhbXNbc2x1Z05hbWVdID0gfm0uaW5kZXhPZignLycpXG4gICAgICAgICAgPyBtLnNwbGl0KCcvJykubWFwKChlbnRyeSkgPT4gZGVjb2RlKGVudHJ5KSlcbiAgICAgICAgICA6IGcucmVwZWF0XG4gICAgICAgICAgPyBbZGVjb2RlKG0pXVxuICAgICAgICAgIDogZGVjb2RlKG0pXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcGFyYW1zXG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nexports.__esModule = true;\nexports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module\n// to reduce bytes\n\nfunction escapeRegex(str) {\n  return str.replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n}\n\nfunction parseParameter(param) {\n  var optional = param.startsWith('[') && param.endsWith(']');\n\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n\n  var repeat = param.startsWith('...');\n\n  if (repeat) {\n    param = param.slice(3);\n  }\n\n  return {\n    key: param,\n    repeat: repeat,\n    optional: optional\n  };\n}\n\nfunction getRouteRegex(normalizedRoute) {\n  var segments = (normalizedRoute.replace(/\\/$/, '') || '/').slice(1).split('/');\n  var groups = {};\n  var groupIndex = 1;\n  var parameterizedRoute = segments.map(function (segment) {\n    if (segment.startsWith('[') && segment.endsWith(']')) {\n      var _parseParameter = parseParameter(segment.slice(1, -1)),\n          key = _parseParameter.key,\n          optional = _parseParameter.optional,\n          repeat = _parseParameter.repeat;\n\n      groups[key] = {\n        pos: groupIndex++,\n        repeat: repeat,\n        optional: optional\n      };\n      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n    } else {\n      return \"/\".concat(escapeRegex(segment));\n    }\n  }).join(''); // dead code eliminate for browser since it's only needed\n  // while generating routes-manifest\n\n  if (false) { var namedParameterizedRoute, routeKeys, getSafeRouteKey, routeKeyCharLength, routeKeyCharCode; }\n\n  return {\n    re: new RegExp(\"^\".concat(parameterizedRoute, \"(?:/)?$\")),\n    groups: groups\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtcmVnZXgudHM/OWRiYyJdLCJuYW1lcyI6WyJzdHIiLCJvcHRpb25hbCIsInBhcmFtIiwicmVwZWF0Iiwia2V5Iiwic2VnbWVudHMiLCJub3JtYWxpemVkUm91dGUiLCJncm91cHMiLCJncm91cEluZGV4IiwicGFyYW1ldGVyaXplZFJvdXRlIiwic2VnbWVudCIsInBhcnNlUGFyYW1ldGVyIiwicG9zIiwiZXNjYXBlUmVnZXgiLCJyZSJdLCJtYXBwaW5ncyI6Ijs7O3VDQU1BO0FBQ0E7O0FBQ0EsMEJBQWtDO0FBQ2hDLFNBQU9BLEdBQUcsQ0FBSEEsZ0NBQVAsTUFBT0EsQ0FBUDtBQUdGOztBQUFBLCtCQUF1QztBQUNyQyxNQUFNQyxRQUFRLEdBQUdDLEtBQUssQ0FBTEEsbUJBQXlCQSxLQUFLLENBQUxBLFNBQTFDLEdBQTBDQSxDQUExQzs7QUFDQSxnQkFBYztBQUNaQSxTQUFLLEdBQUdBLEtBQUssQ0FBTEEsU0FBZSxDQUF2QkEsQ0FBUUEsQ0FBUkE7QUFFRjs7QUFBQSxNQUFNQyxNQUFNLEdBQUdELEtBQUssQ0FBTEEsV0FBZixLQUFlQSxDQUFmOztBQUNBLGNBQVk7QUFDVkEsU0FBSyxHQUFHQSxLQUFLLENBQUxBLE1BQVJBLENBQVFBLENBQVJBO0FBRUY7O0FBQUEsU0FBTztBQUFFRSxPQUFHLEVBQUw7QUFBY0QsVUFBZCxFQUFjQSxNQUFkO0FBQXNCRixZQUE3QixFQUE2QkE7QUFBdEIsR0FBUDtBQUdLOztBQUFBLHdDQU9MO0FBQ0EsTUFBTUksUUFBUSxHQUFHLENBQUNDLGVBQWUsQ0FBZkEsc0JBQUQsb0JBQWpCLEdBQWlCLENBQWpCO0FBSUEsTUFBTUMsTUFBc0MsR0FBNUM7QUFDQSxNQUFJQyxVQUFVLEdBQWQ7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0osUUFBUSxDQUFSQSxJQUNuQkssaUJBQUQsRUFBYTtBQUNoQixRQUFJQSxPQUFPLENBQVBBLG1CQUEyQkEsT0FBTyxDQUFQQSxTQUEvQixHQUErQkEsQ0FBL0IsRUFBc0Q7QUFBQSw0QkFDbEJDLGNBQWMsQ0FBQ0QsT0FBTyxDQUFQQSxTQUFpQixDQUFsRSxDQUFpREEsQ0FBRCxDQURJO0FBQUEsVUFDOUMsR0FEOEMsbUJBQzlDLEdBRDhDO0FBQUEsVUFDOUMsUUFEOEMsbUJBQzlDLFFBRDhDO0FBQUEsVUFDOUMsTUFEOEMsbUJBQzlDLE1BRDhDOztBQUVwREgsWUFBTSxDQUFOQSxHQUFNLENBQU5BLEdBQWM7QUFBRUssV0FBRyxFQUFFSixVQUFQO0FBQXFCTCxjQUFyQixFQUFxQkEsTUFBckI7QUFBNkJGLGdCQUEzQ00sRUFBMkNOO0FBQTdCLE9BQWRNO0FBQ0EsYUFBT0osTUFBTSxHQUFJRixRQUFRLG1CQUFaLFdBQWI7QUFIRixXQUlPO0FBQ0wsd0JBQVdZLFdBQVcsQ0FBdEIsT0FBc0IsQ0FBdEI7QUFFSDtBQVR3QlIsVUFBM0IsRUFBMkJBLENBQTNCLENBUEEsQ0FtQkE7QUFDQTs7QUFDQSxhQUFtQyxrR0FnRW5DOztBQUFBLFNBQU87QUFDTFMsTUFBRSxFQUFFLHNCQURDLGtCQUNELGFBREM7QUFFTFAsVUFGRixFQUVFQTtBQUZLLEdBQVA7QUFJRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci91dGlscy9yb3V0ZS1yZWdleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgR3JvdXAge1xuICBwb3M6IG51bWJlclxuICByZXBlYXQ6IGJvb2xlYW5cbiAgb3B0aW9uYWw6IGJvb2xlYW5cbn1cblxuLy8gdGhpcyBpc24ndCBpbXBvcnRpbmcgdGhlIGVzY2FwZS1zdHJpbmctcmVnZXggbW9kdWxlXG4vLyB0byByZWR1Y2UgYnl0ZXNcbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy4tXS9nLCAnXFxcXCQmJylcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXJhbWV0ZXIocGFyYW06IHN0cmluZykge1xuICBjb25zdCBvcHRpb25hbCA9IHBhcmFtLnN0YXJ0c1dpdGgoJ1snKSAmJiBwYXJhbS5lbmRzV2l0aCgnXScpXG4gIGlmIChvcHRpb25hbCkge1xuICAgIHBhcmFtID0gcGFyYW0uc2xpY2UoMSwgLTEpXG4gIH1cbiAgY29uc3QgcmVwZWF0ID0gcGFyYW0uc3RhcnRzV2l0aCgnLi4uJylcbiAgaWYgKHJlcGVhdCkge1xuICAgIHBhcmFtID0gcGFyYW0uc2xpY2UoMylcbiAgfVxuICByZXR1cm4geyBrZXk6IHBhcmFtLCByZXBlYXQsIG9wdGlvbmFsIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdXRlUmVnZXgoXG4gIG5vcm1hbGl6ZWRSb3V0ZTogc3RyaW5nXG4pOiB7XG4gIHJlOiBSZWdFeHBcbiAgbmFtZWRSZWdleD86IHN0cmluZ1xuICByb3V0ZUtleXM/OiB7IFtuYW1lZDogc3RyaW5nXTogc3RyaW5nIH1cbiAgZ3JvdXBzOiB7IFtncm91cE5hbWU6IHN0cmluZ106IEdyb3VwIH1cbn0ge1xuICBjb25zdCBzZWdtZW50cyA9IChub3JtYWxpemVkUm91dGUucmVwbGFjZSgvXFwvJC8sICcnKSB8fCAnLycpXG4gICAgLnNsaWNlKDEpXG4gICAgLnNwbGl0KCcvJylcblxuICBjb25zdCBncm91cHM6IHsgW2dyb3VwTmFtZTogc3RyaW5nXTogR3JvdXAgfSA9IHt9XG4gIGxldCBncm91cEluZGV4ID0gMVxuICBjb25zdCBwYXJhbWV0ZXJpemVkUm91dGUgPSBzZWdtZW50c1xuICAgIC5tYXAoKHNlZ21lbnQpID0+IHtcbiAgICAgIGlmIChzZWdtZW50LnN0YXJ0c1dpdGgoJ1snKSAmJiBzZWdtZW50LmVuZHNXaXRoKCddJykpIHtcbiAgICAgICAgY29uc3QgeyBrZXksIG9wdGlvbmFsLCByZXBlYXQgfSA9IHBhcnNlUGFyYW1ldGVyKHNlZ21lbnQuc2xpY2UoMSwgLTEpKVxuICAgICAgICBncm91cHNba2V5XSA9IHsgcG9zOiBncm91cEluZGV4KyssIHJlcGVhdCwgb3B0aW9uYWwgfVxuICAgICAgICByZXR1cm4gcmVwZWF0ID8gKG9wdGlvbmFsID8gJyg/Oi8oLis/KSk/JyA6ICcvKC4rPyknKSA6ICcvKFteL10rPyknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYC8ke2VzY2FwZVJlZ2V4KHNlZ21lbnQpfWBcbiAgICAgIH1cbiAgICB9KVxuICAgIC5qb2luKCcnKVxuXG4gIC8vIGRlYWQgY29kZSBlbGltaW5hdGUgZm9yIGJyb3dzZXIgc2luY2UgaXQncyBvbmx5IG5lZWRlZFxuICAvLyB3aGlsZSBnZW5lcmF0aW5nIHJvdXRlcy1tYW5pZmVzdFxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgcm91dGVLZXlDaGFyQ29kZSA9IDk3XG4gICAgbGV0IHJvdXRlS2V5Q2hhckxlbmd0aCA9IDFcblxuICAgIC8vIGJ1aWxkcyBhIG1pbmltYWwgcm91dGVLZXkgdXNpbmcgb25seSBhLXogYW5kIG1pbmltYWwgbnVtYmVyIG9mIGNoYXJhY3RlcnNcbiAgICBjb25zdCBnZXRTYWZlUm91dGVLZXkgPSAoKSA9PiB7XG4gICAgICBsZXQgcm91dGVLZXkgPSAnJ1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlS2V5Q2hhckxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJvdXRlS2V5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocm91dGVLZXlDaGFyQ29kZSlcbiAgICAgICAgcm91dGVLZXlDaGFyQ29kZSsrXG5cbiAgICAgICAgaWYgKHJvdXRlS2V5Q2hhckNvZGUgPiAxMjIpIHtcbiAgICAgICAgICByb3V0ZUtleUNoYXJMZW5ndGgrK1xuICAgICAgICAgIHJvdXRlS2V5Q2hhckNvZGUgPSA5N1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcm91dGVLZXlcbiAgICB9XG5cbiAgICBjb25zdCByb3V0ZUtleXM6IHsgW25hbWVkOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9XG5cbiAgICBsZXQgbmFtZWRQYXJhbWV0ZXJpemVkUm91dGUgPSBzZWdtZW50c1xuICAgICAgLm1hcCgoc2VnbWVudCkgPT4ge1xuICAgICAgICBpZiAoc2VnbWVudC5zdGFydHNXaXRoKCdbJykgJiYgc2VnbWVudC5lbmRzV2l0aCgnXScpKSB7XG4gICAgICAgICAgY29uc3QgeyBrZXksIG9wdGlvbmFsLCByZXBlYXQgfSA9IHBhcnNlUGFyYW1ldGVyKHNlZ21lbnQuc2xpY2UoMSwgLTEpKVxuICAgICAgICAgIC8vIHJlcGxhY2UgYW55IG5vbi13b3JkIGNoYXJhY3RlcnMgc2luY2UgdGhleSBjYW4gYnJlYWtcbiAgICAgICAgICAvLyB0aGUgbmFtZWQgcmVnZXhcbiAgICAgICAgICBsZXQgY2xlYW5lZEtleSA9IGtleS5yZXBsYWNlKC9cXFcvZywgJycpXG4gICAgICAgICAgbGV0IGludmFsaWRLZXkgPSBmYWxzZVxuXG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGtleSBpcyBzdGlsbCBpbnZhbGlkIGFuZCBmYWxsYmFjayB0byB1c2luZyBhIGtub3duXG4gICAgICAgICAgLy8gc2FmZSBrZXlcbiAgICAgICAgICBpZiAoY2xlYW5lZEtleS5sZW5ndGggPT09IDAgfHwgY2xlYW5lZEtleS5sZW5ndGggPiAzMCkge1xuICAgICAgICAgICAgaW52YWxpZEtleSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChjbGVhbmVkS2V5LnN1YnN0cigwLCAxKSkpKSB7XG4gICAgICAgICAgICBpbnZhbGlkS2V5ID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbnZhbGlkS2V5KSB7XG4gICAgICAgICAgICBjbGVhbmVkS2V5ID0gZ2V0U2FmZVJvdXRlS2V5KClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByb3V0ZUtleXNbY2xlYW5lZEtleV0gPSBrZXlcbiAgICAgICAgICByZXR1cm4gcmVwZWF0XG4gICAgICAgICAgICA/IG9wdGlvbmFsXG4gICAgICAgICAgICAgID8gYCg/Oi8oPzwke2NsZWFuZWRLZXl9Pi4rPykpP2BcbiAgICAgICAgICAgICAgOiBgLyg/PCR7Y2xlYW5lZEtleX0+Lis/KWBcbiAgICAgICAgICAgIDogYC8oPzwke2NsZWFuZWRLZXl9PlteL10rPylgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGAvJHtlc2NhcGVSZWdleChzZWdtZW50KX1gXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuam9pbignJylcblxuICAgIHJldHVybiB7XG4gICAgICByZTogbmV3IFJlZ0V4cChgXiR7cGFyYW1ldGVyaXplZFJvdXRlfSg/Oi8pPyRgKSxcbiAgICAgIGdyb3VwcyxcbiAgICAgIHJvdXRlS2V5cyxcbiAgICAgIG5hbWVkUmVnZXg6IGBeJHtuYW1lZFBhcmFtZXRlcml6ZWRSb3V0ZX0oPzovKT8kYCxcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlOiBuZXcgUmVnRXhwKGBeJHtwYXJhbWV0ZXJpemVkUm91dGV9KD86Lyk/JGApLFxuICAgIGdyb3VwcyxcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/router/utils/route-regex.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/side-effect.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/side-effect.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _toConsumableArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n\nvar _assertThisInitialized = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nvar isServer = false;\n\nvar _default = /*#__PURE__*/function (_react$Component) {\n  _inherits(_default, _react$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default(props) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _super.call(this, props);\n    _this._hasHeadManager = void 0;\n\n    _this.emitChange = function () {\n      if (_this._hasHeadManager) {\n        _this.props.headManager.updateHead(_this.props.reduceComponentsToState(_toConsumableArray(_this.props.headManager.mountedInstances), _this.props));\n      }\n    };\n\n    _this._hasHeadManager = _this.props.headManager && _this.props.headManager.mountedInstances;\n\n    if (isServer && _this._hasHeadManager) {\n      _this.props.headManager.mountedInstances.add(_assertThisInitialized(_this));\n\n      _this.emitChange();\n    }\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances.add(this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.emitChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances[\"delete\"](this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return _default;\n}(_react.Component);\n\nexports[\"default\"] = _default;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9zaWRlLWVmZmVjdC50c3g/MTNiNyJdLCJuYW1lcyI6WyJpc1NlcnZlciIsImNvbnN0cnVjdG9yIiwiX2hhc0hlYWRNYW5hZ2VyIiwiZW1pdENoYW5nZSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBTUEsUUFBTjs7SUFjZSxROzs7OztBQWNiQyxvQkFBVyxLQUFYQSxFQUF3QjtBQUFBOztBQUFBOztBQUN0QjtBQURzQixVQWJoQkMsZUFhZ0I7O0FBQUEsVUFYeEJDLFVBV3dCLEdBWFgsWUFBWTtBQUN2QixVQUFJLE1BQUosaUJBQTBCO0FBQ3hCLDJDQUNFLHVEQUNNLHdCQUROLG1CQUVFLE1BSEosS0FDRSxDQURGO0FBT0g7QUFFdUI7O0FBRXRCLDRCQUNFLDJCQUEwQix3QkFENUI7O0FBR0EsUUFBSUgsUUFBUSxJQUFJLE1BQWhCLGlCQUFzQztBQUNwQzs7QUFDQTtBQUVIOztBQVR1QjtBQVV4Qkk7Ozs7d0NBQW9CO0FBQ2xCLFVBQUksS0FBSixpQkFBMEI7QUFDeEI7QUFFRjs7QUFBQTtBQUVGQzs7O3lDQUFxQjtBQUNuQjtBQUVGQzs7OzJDQUF1QjtBQUNyQixVQUFJLEtBQUosaUJBQTBCO0FBQ3hCO0FBRUY7O0FBQUE7QUFHRkM7Ozs2QkFBUztBQUNQO0FBekNvRDs7OztFQUEzQkMsZ0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9zaWRlLWVmZmVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJ1xuXG50eXBlIFN0YXRlID0gSlNYLkVsZW1lbnRbXSB8IHVuZGVmaW5lZFxuXG50eXBlIFNpZGVFZmZlY3RQcm9wcyA9IHtcbiAgcmVkdWNlQ29tcG9uZW50c1RvU3RhdGU6IDxUPihcbiAgICBjb21wb25lbnRzOiBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ8YW55Pj4sXG4gICAgcHJvcHM6IFRcbiAgKSA9PiBTdGF0ZVxuICBoYW5kbGVTdGF0ZUNoYW5nZT86IChzdGF0ZTogU3RhdGUpID0+IHZvaWRcbiAgaGVhZE1hbmFnZXI6IGFueVxuICBpbkFtcE1vZGU/OiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50PFNpZGVFZmZlY3RQcm9wcz4ge1xuICBwcml2YXRlIF9oYXNIZWFkTWFuYWdlcjogYm9vbGVhblxuXG4gIGVtaXRDaGFuZ2UgPSAoKTogdm9pZCA9PiB7XG4gICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLnVwZGF0ZUhlYWQoXG4gICAgICAgIHRoaXMucHJvcHMucmVkdWNlQ29tcG9uZW50c1RvU3RhdGUoXG4gICAgICAgICAgWy4uLnRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlc10sXG4gICAgICAgICAgdGhpcy5wcm9wc1xuICAgICAgICApXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IGFueSkge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuX2hhc0hlYWRNYW5hZ2VyID1cbiAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIgJiYgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzXG5cbiAgICBpZiAoaXNTZXJ2ZXIgJiYgdGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlcy5hZGQodGhpcylcbiAgICAgIHRoaXMuZW1pdENoYW5nZSgpXG4gICAgfVxuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xuICAgICAgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzLmFkZCh0aGlzKVxuICAgIH1cbiAgICB0aGlzLmVtaXRDaGFuZ2UoKVxuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLmVtaXRDaGFuZ2UoKVxuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xuICAgICAgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzLmRlbGV0ZSh0aGlzKVxuICAgIH1cbiAgICB0aGlzLmVtaXRDaGFuZ2UoKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/side-effect.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nvar _regeneratorRuntime = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n\nexports.__esModule = true;\nexports.execOnce = execOnce;\nexports.getLocationOrigin = getLocationOrigin;\nexports.getURL = getURL;\nexports.getDisplayName = getDisplayName;\nexports.isResSent = isResSent;\nexports.loadGetInitialProps = loadGetInitialProps;\nexports.formatWithValidation = formatWithValidation;\nexports.ST = exports.SP = exports.urlObjectKeys = void 0;\n\nvar _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ \"./node_modules/next/dist/next-server/lib/router/utils/format-url.js\");\n/**\n* Utils\n*/\n\n\nfunction execOnce(fn) {\n  var used = false;\n  var result;\n  return function () {\n    if (!used) {\n      used = true;\n      result = fn.apply(void 0, arguments);\n    }\n\n    return result;\n  };\n}\n\nfunction getLocationOrigin() {\n  var _window$location = window.location,\n      protocol = _window$location.protocol,\n      hostname = _window$location.hostname,\n      port = _window$location.port;\n  return \"\".concat(protocol, \"//\").concat(hostname).concat(port ? ':' + port : '');\n}\n\nfunction getURL() {\n  var href = window.location.href;\n  var origin = getLocationOrigin();\n  return href.substring(origin.length);\n}\n\nfunction getDisplayName(Component) {\n  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';\n}\n\nfunction isResSent(res) {\n  return res.finished || res.headersSent;\n}\n\nfunction loadGetInitialProps(_x, _x2) {\n  return _loadGetInitialProps.apply(this, arguments);\n}\n\nfunction _loadGetInitialProps() {\n  _loadGetInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(App, ctx) {\n    var _App$prototype, message, res, props, _message;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (false) {}\n\n            if (!((_App$prototype = App.prototype) != null && _App$prototype.getInitialProps)) {\n              _context.next = 4;\n              break;\n            }\n\n            message = \"\\\"\".concat(getDisplayName(App), \".getInitialProps()\\\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.\");\n            throw new Error(message);\n\n          case 4:\n            // when called from _app `ctx` is nested in `ctx`\n            res = ctx.res || ctx.ctx && ctx.ctx.res;\n\n            if (App.getInitialProps) {\n              _context.next = 12;\n              break;\n            }\n\n            if (!(ctx.ctx && ctx.Component)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 9;\n            return loadGetInitialProps(ctx.Component, ctx.ctx);\n\n          case 9:\n            _context.t0 = _context.sent;\n            return _context.abrupt(\"return\", {\n              pageProps: _context.t0\n            });\n\n          case 11:\n            return _context.abrupt(\"return\", {});\n\n          case 12:\n            _context.next = 14;\n            return App.getInitialProps(ctx);\n\n          case 14:\n            props = _context.sent;\n\n            if (!(res && isResSent(res))) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"return\", props);\n\n          case 17:\n            if (props) {\n              _context.next = 20;\n              break;\n            }\n\n            _message = \"\\\"\".concat(getDisplayName(App), \".getInitialProps()\\\" should resolve to an object. But found \\\"\").concat(props, \"\\\" instead.\");\n            throw new Error(_message);\n\n          case 20:\n            if (true) {\n              if (Object.keys(props).length === 0 && !ctx.ctx) {\n                console.warn(\"\".concat(getDisplayName(App), \" returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps\"));\n              }\n            }\n\n            return _context.abrupt(\"return\", props);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadGetInitialProps.apply(this, arguments);\n}\n\nvar urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];\nexports.urlObjectKeys = urlObjectKeys;\n\nfunction formatWithValidation(url) {\n  if (true) {\n    if (url !== null && typeof url === 'object') {\n      Object.keys(url).forEach(function (key) {\n        if (urlObjectKeys.indexOf(key) === -1) {\n          console.warn(\"Unknown key passed via urlObject into url.format: \".concat(key));\n        }\n      });\n    }\n  }\n\n  return (0, _formatUrl.formatUrl)(url);\n}\n\nvar SP = typeof performance !== 'undefined';\nexports.SP = SP;\nvar ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';\nexports.ST = ST;\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/lib/utils.js\n");

/***/ }),

/***/ "./node_modules/next/dist/next-server/server/denormalize-page-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/server/denormalize-page-path.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("exports.__esModule=true;exports.normalizePathSep=normalizePathSep;exports.denormalizePagePath=denormalizePagePath;function normalizePathSep(path){return path.replace(/\\\\/g,'/');}function denormalizePagePath(page){page=normalizePathSep(page);if(page.startsWith('/index/')){page=page.slice(6);}else if(page==='/index'){page='/';}return page;}\n//# sourceMappingURL=denormalize-page-path.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9uZXh0LXNlcnZlci9zZXJ2ZXIvZGVub3JtYWxpemUtcGFnZS1wYXRoLmpzP2MyNDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWEsd0JBQXdCLDBDQUEwQyxnREFBZ0QsZ0NBQWdDLGdDQUFnQyxtQ0FBbUMsNEJBQTRCLCtCQUErQixvQkFBb0IseUJBQXlCLFVBQVU7QUFDcFYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL3NlcnZlci9kZW5vcm1hbGl6ZS1wYWdlLXBhdGguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9dHJ1ZTtleHBvcnRzLm5vcm1hbGl6ZVBhdGhTZXA9bm9ybWFsaXplUGF0aFNlcDtleHBvcnRzLmRlbm9ybWFsaXplUGFnZVBhdGg9ZGVub3JtYWxpemVQYWdlUGF0aDtmdW5jdGlvbiBub3JtYWxpemVQYXRoU2VwKHBhdGgpe3JldHVybiBwYXRoLnJlcGxhY2UoL1xcXFwvZywnLycpO31mdW5jdGlvbiBkZW5vcm1hbGl6ZVBhZ2VQYXRoKHBhZ2Upe3BhZ2U9bm9ybWFsaXplUGF0aFNlcChwYWdlKTtpZihwYWdlLnN0YXJ0c1dpdGgoJy9pbmRleC8nKSl7cGFnZT1wYWdlLnNsaWNlKDYpO31lbHNlIGlmKHBhZ2U9PT0nL2luZGV4Jyl7cGFnZT0nLyc7fXJldHVybiBwYWdlO31cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbm9ybWFsaXplLXBhZ2UtcGF0aC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/next-server/server/denormalize-page-path.js\n");

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./dist/next-server/lib/head */ \"./node_modules/next/dist/next-server/lib/head.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvaGVhZC5qcz84MzhhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLHFGQUE2QiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2hlYWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9uZXh0LXNlcnZlci9saWIvaGVhZCcpXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n");

/***/ }),

/***/ "./node_modules/next/router.js":
/*!*************************************!*\
  !*** ./node_modules/next/router.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./dist/client/router */ \"./node_modules/next/dist/client/router.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvcm91dGVyLmpzP2RiNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsdUVBQXNCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvcm91dGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2xpZW50L3JvdXRlcicpXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/router.js\n");

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-is/cjs/react-is.development.js\n");

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzPzRjZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0FBQ0QsbUJBQW1CLG1CQUFPLENBQUMsMEZBQStCO0FBQzFEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-is/index.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v17.0.2\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar _assign = __webpack_require__(/*! object-assign */ \"./node_modules/next/dist/build/polyfills/object-assign.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentName(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (Array.isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (Array.isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (Array.isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === exports.Fragment) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v17.0.2\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar _assign = __webpack_require__(/*! object-assign */ \"./node_modules/next/dist/build/polyfills/object-assign.js\");\n\n// TODO: this is special because it gets imported during build.\nvar ReactVersion = '17.0.2';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nexports.StrictMode = 0xeacc;\nexports.Profiler = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nexports.Suspense = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  exports.StrictMode = symbolFor('react.strict_mode');\n  exports.Profiler = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  exports.Suspense = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: 0\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame = {};\nvar currentExtraStackFrame = null;\nfunction setExtraStackFrame(stack) {\n  {\n    currentExtraStackFrame = stack;\n  }\n}\n\n{\n  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error( \"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\" );\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case exports.Profiler:\n      return 'Profiler';\n\n    case exports.StrictMode:\n      return 'StrictMode';\n\n    case exports.Suspense:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error( \"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\" );\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (Array.isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error( \"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). If you meant to render a collection of children, use an array instead.\" );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error( \"React.Children.only expected to receive a single React element child.\" );\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n      }\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      },\n      displayName: {\n        get: function () {\n          return context.displayName;\n        },\n        set: function (displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n\n    var pending = payload;\n    pending._status = Pending;\n    pending._result = thenable;\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending) {\n        var defaultExport = moduleObject.default;\n\n        {\n          if (defaultExport === undefined) {\n            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n          }\n        } // Transition to the next state.\n\n\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = defaultExport;\n      }\n    }, function (error) {\n      if (payload._status === Pending) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n  }\n\n  if (payload._status === Resolved) {\n    return payload._result;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: -1,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        if (render.displayName == null) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        if (type.displayName == null) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (unstable_observedBits !== undefined) {\n      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');\n    } // TODO: add a more generic warning for invalid values.\n\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case exports.Suspense:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  {\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === exports.Fragment) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\n{\n\n  try {\n    var frozenObject = Object.freeze({});\n    /* eslint-disable no-new */\n\n    new Map([[frozenObject, null]]);\n    new Set([frozenObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.PureComponent = PureComponent;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useEffect = useEffect;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.version = ReactVersion;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react.development.js\n");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzP2FiNWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0FBQ0QsbUJBQW1CLG1CQUFPLENBQUMsaUZBQTRCO0FBQ3ZEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react/index.js\n");

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz85MjBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQztBQUNELG1CQUFtQixtQkFBTyxDQUFDLGlIQUE0QztBQUN2RSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./pages/[name].js":
/*!*************************!*\
  !*** ./pages/[name].js ***!
  \*************************/
/*! exports provided: __N_SSG, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__N_SSG\", function() { return __N_SSG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Home; });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _flowlines_FlowLines__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../flowlines/FlowLines */ \"./flowlines/FlowLines.js\");\n/* harmony import */ var _fluidsim_FluidSim__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../fluidsim/FluidSim */ \"./fluidsim/FluidSim.js\");\n/* harmony import */ var _maze_Maze__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../maze/Maze */ \"./maze/Maze.js\");\n\n\nvar _jsxFileName = \"/Users/olivermulari/Documents/dev/hobbies/viewer/pages/[name].js\",\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\nvar scenes = [\"flowlines\", \"fluidsim\", \"maze\"];\nvar __N_SSG = true;\nfunction Home(_ref) {\n  _s();\n\n  var _this = this;\n\n  var name = _ref.name;\n  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_2__[\"useRouter\"])();\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(false),\n      navOpen = _useState[0],\n      setNavOpen = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(name),\n      activeScene = _useState2[0],\n      setActiveScene = _useState2[1]; // Create scene hook\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(function () {\n    if (false) {}\n    var scene = null;\n\n    switch (activeScene) {\n      case \"fluidsim\":\n        scene = new _fluidsim_FluidSim__WEBPACK_IMPORTED_MODULE_5__[\"default\"](\"scene\");\n        break;\n\n      case \"maze\":\n        scene = new _maze_Maze__WEBPACK_IMPORTED_MODULE_6__[\"default\"](\"scene\");\n        break;\n\n      case \"flowlines\":\n      default:\n        scene = new _flowlines_FlowLines__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"scene\");\n        break;\n    }\n\n    scene.create();\n    return function () {\n      scene.destroy();\n    };\n  }, [activeScene]); // Get active scene from path\n\n  Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(function () {\n    var _router$query;\n\n    if (false) {}\n\n    if (router !== null && router !== void 0 && (_router$query = router.query) !== null && _router$query !== void 0 && _router$query.name) {\n      setActiveScene(router.query.name);\n    }\n  }, [router]);\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(next_head__WEBPACK_IMPORTED_MODULE_3___default.a, {\n      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"title\", {\n        children: \"Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"main\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n        id: \"scene\",\n        className: \"w-screen h-screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"button\", {\n        className: \"fixed top-0 right-0 mx-6 my-2 p-2 text-gray-800 text-4xl leading-none outline-none\",\n        onClick: function onClick() {\n          return setNavOpen(!navOpen);\n        },\n        children: \"\\u2630\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"nav\", {\n        className: \"fixed top-0 right-0 h-screen bg-gray-800 transform transition-transform duration-200 \".concat(navOpen ? \"\" : \"translate-x-full\", \" \"),\n        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"button\", {\n          className: \"mx-4 my-2 p-2 hover:bg-gray-600 transition-colors duration-200 rounded-lg text-2xl text-white leading-none\",\n          onClick: function onClick() {\n            return setNavOpen(false);\n          },\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"ul\", {\n          children: scenes.map(function (name) {\n            return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"li\", {\n              className: \"px-8 py-4 cursor-pointer hover:bg-gray-600 transition-colors duration-200 rounded-lg\",\n              onClick: function onClick() {\n                router.push(\"/\".concat(name));\n                setNavOpen(false);\n              },\n              children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"p\", {\n                className: \"text-white font-bold uppercase text-lg tracking-widest\",\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, _this)\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n} // This function gets called at build time\n\n_s(Home, \"PSIn0ytED4rKSvX2OAbwojpKlqA=\", false, function () {\n  return [next_router__WEBPACK_IMPORTED_MODULE_2__[\"useRouter\"]];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvW25hbWVdLmpzPzU4ZGQiXSwibmFtZXMiOlsic2NlbmVzIiwiSG9tZSIsIm5hbWUiLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJ1c2VTdGF0ZSIsIm5hdk9wZW4iLCJzZXROYXZPcGVuIiwiYWN0aXZlU2NlbmUiLCJzZXRBY3RpdmVTY2VuZSIsInVzZUVmZmVjdCIsInNjZW5lIiwiRmx1aWRTaW0iLCJNYXplIiwiRmxvd0xpbmVzIiwiY3JlYXRlIiwiZGVzdHJveSIsInF1ZXJ5IiwibWFwIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLE1BQU0sR0FBRyxDQUFDLFdBQUQsRUFBYyxVQUFkLEVBQTBCLE1BQTFCLENBQWY7O0FBRWUsU0FBU0MsSUFBVCxPQUF3QjtBQUFBOztBQUFBOztBQUFBLE1BQVJDLElBQVEsUUFBUkEsSUFBUTtBQUNyQyxNQUFNQyxNQUFNLEdBQUdDLDZEQUFTLEVBQXhCOztBQURxQyxrQkFFUEMsc0RBQVEsQ0FBQyxLQUFELENBRkQ7QUFBQSxNQUU5QkMsT0FGOEI7QUFBQSxNQUVyQkMsVUFGcUI7O0FBQUEsbUJBR0NGLHNEQUFRLENBQUNILElBQUQsQ0FIVDtBQUFBLE1BRzlCTSxXQUg4QjtBQUFBLE1BR2pCQyxjQUhpQixrQkFLckM7OztBQUNBQyx5REFBUyxDQUFDLFlBQU07QUFDZCxlQUFtQztBQUNuQyxRQUFJQyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxZQUFRSCxXQUFSO0FBQ0UsV0FBSyxVQUFMO0FBQ0VHLGFBQUssR0FBRyxJQUFJQywwREFBSixDQUFhLE9BQWIsQ0FBUjtBQUNBOztBQUNGLFdBQUssTUFBTDtBQUNFRCxhQUFLLEdBQUcsSUFBSUUsa0RBQUosQ0FBUyxPQUFULENBQVI7QUFDQTs7QUFDRixXQUFLLFdBQUw7QUFDQTtBQUNFRixhQUFLLEdBQUcsSUFBSUcsNERBQUosQ0FBYyxPQUFkLENBQVI7QUFDQTtBQVZKOztBQVlBSCxTQUFLLENBQUNJLE1BQU47QUFDQSxXQUFPLFlBQU07QUFDWEosV0FBSyxDQUFDSyxPQUFOO0FBQ0QsS0FGRDtBQUdELEdBbkJRLEVBbUJOLENBQUNSLFdBQUQsQ0FuQk0sQ0FBVCxDQU5xQyxDQTJCckM7O0FBQ0FFLHlEQUFTLENBQUMsWUFBTTtBQUFBOztBQUNkLGVBQW1DOztBQUNuQyxRQUFJUCxNQUFKLGFBQUlBLE1BQUosZ0NBQUlBLE1BQU0sQ0FBRWMsS0FBWiwwQ0FBSSxjQUFlZixJQUFuQixFQUF5QjtBQUN2Qk8sb0JBQWMsQ0FBQ04sTUFBTSxDQUFDYyxLQUFQLENBQWFmLElBQWQsQ0FBZDtBQUNEO0FBQ0YsR0FMUSxFQUtOLENBQUNDLE1BQUQsQ0FMTSxDQUFUO0FBT0Esc0JBQ0U7QUFBQSw0QkFDRSxxRUFBQyxnREFBRDtBQUFBLDZCQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQURGLGVBS0U7QUFBTSxlQUFTLEVBQUMsVUFBaEI7QUFBQSw4QkFFRTtBQUFLLFVBQUUsRUFBQyxPQUFSO0FBQWdCLGlCQUFTLEVBQUM7QUFBMUI7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQUZGLGVBS0U7QUFDRSxpQkFBUyxFQUFDLG9GQURaO0FBRUUsZUFBTyxFQUFFO0FBQUEsaUJBQU1JLFVBQVUsQ0FBQyxDQUFDRCxPQUFGLENBQWhCO0FBQUEsU0FGWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQUxGLGVBYUU7QUFBSyxpQkFBUyxpR0FBMEZBLE9BQU8sR0FBRyxFQUFILEdBQVEsa0JBQXpHLE1BQWQ7QUFBQSxnQ0FDRTtBQUNFLG1CQUFTLEVBQUMsNEdBRFo7QUFFRSxpQkFBTyxFQUFFO0FBQUEsbUJBQU1DLFVBQVUsQ0FBQyxLQUFELENBQWhCO0FBQUEsV0FGWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxnQkFERixlQU9FO0FBQUEsb0JBQ0dQLE1BQU0sQ0FBQ2tCLEdBQVAsQ0FBVyxVQUFBaEIsSUFBSTtBQUFBLGdDQUNkO0FBRUUsdUJBQVMsRUFBQyxzRkFGWjtBQUdFLHFCQUFPLEVBQUUsbUJBQU07QUFBQ0Msc0JBQU0sQ0FBQ2dCLElBQVAsWUFBZ0JqQixJQUFoQjtBQUF5QkssMEJBQVUsQ0FBQyxLQUFELENBQVY7QUFBa0IsZUFIN0Q7QUFBQSxxQ0FLRTtBQUFHLHlCQUFTLEVBQUMsd0RBQWI7QUFBQSwwQkFBdUVMO0FBQXZFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFMRixlQUNPQSxJQURQO0FBQUE7QUFBQTtBQUFBO0FBQUEscUJBRGM7QUFBQSxXQUFmO0FBREg7QUFBQTtBQUFBO0FBQUE7QUFBQSxnQkFQRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsY0FiRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFMRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFERjtBQXlDRCxDLENBRUQ7O0dBOUV3QkQsSTtVQUNQRyxxRDs7O0tBRE9ILEkiLCJmaWxlIjoiLi9wYWdlcy9bbmFtZV0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcidcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCdcblxuaW1wb3J0IEZsb3dMaW5lcyBmcm9tICcuLi9mbG93bGluZXMvRmxvd0xpbmVzJ1xuaW1wb3J0IEZsdWlkU2ltIGZyb20gJy4uL2ZsdWlkc2ltL0ZsdWlkU2ltJ1xuaW1wb3J0IE1hemUgZnJvbSAnLi4vbWF6ZS9NYXplJ1xuY29uc3Qgc2NlbmVzID0gW1wiZmxvd2xpbmVzXCIsIFwiZmx1aWRzaW1cIiwgXCJtYXplXCJdXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoeyBuYW1lIH0pIHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgY29uc3QgW25hdk9wZW4sIHNldE5hdk9wZW5dID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFthY3RpdmVTY2VuZSwgc2V0QWN0aXZlU2NlbmVdID0gdXNlU3RhdGUobmFtZSlcblxuICAvLyBDcmVhdGUgc2NlbmUgaG9va1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm5cbiAgICBsZXQgc2NlbmUgPSBudWxsO1xuICAgIHN3aXRjaCAoYWN0aXZlU2NlbmUpIHtcbiAgICAgIGNhc2UgXCJmbHVpZHNpbVwiOlxuICAgICAgICBzY2VuZSA9IG5ldyBGbHVpZFNpbShcInNjZW5lXCIpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1hemVcIjpcbiAgICAgICAgc2NlbmUgPSBuZXcgTWF6ZShcInNjZW5lXCIpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZsb3dsaW5lc1wiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2NlbmUgPSBuZXcgRmxvd0xpbmVzKFwic2NlbmVcIilcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNjZW5lLmNyZWF0ZSgpXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNjZW5lLmRlc3Ryb3koKVxuICAgIH1cbiAgfSwgW2FjdGl2ZVNjZW5lXSlcblxuICAvLyBHZXQgYWN0aXZlIHNjZW5lIGZyb20gcGF0aFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm5cbiAgICBpZiAocm91dGVyPy5xdWVyeT8ubmFtZSkge1xuICAgICAgc2V0QWN0aXZlU2NlbmUocm91dGVyLnF1ZXJ5Lm5hbWUpXG4gICAgfVxuICB9LCBbcm91dGVyXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHRpdGxlPlZpZXdlcjwvdGl0bGU+XG4gICAgICA8L0hlYWQ+XG5cbiAgICAgIDxtYWluIGNsYXNzTmFtZT1cInJlbGF0aXZlXCI+XG4gICAgICAgIHsvKiBTY2VuZSAqL31cbiAgICAgICAgPGRpdiBpZD1cInNjZW5lXCIgY2xhc3NOYW1lPVwidy1zY3JlZW4gaC1zY3JlZW5cIiAvPlxuXG4gICAgICAgIHsvKiBOYXYgYnV0dG9uICovfVxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZml4ZWQgdG9wLTAgcmlnaHQtMCBteC02IG15LTIgcC0yIHRleHQtZ3JheS04MDAgdGV4dC00eGwgbGVhZGluZy1ub25lIG91dGxpbmUtbm9uZVwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TmF2T3BlbighbmF2T3Blbil9XG4gICAgICAgID5cbiAgICAgICAgICDimLBcbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgey8qIE5hdiAqL31cbiAgICAgICAgPG5hdiBjbGFzc05hbWU9e2BmaXhlZCB0b3AtMCByaWdodC0wIGgtc2NyZWVuIGJnLWdyYXktODAwIHRyYW5zZm9ybSB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0yMDAgJHtuYXZPcGVuID8gXCJcIiA6IFwidHJhbnNsYXRlLXgtZnVsbFwifSBgfT5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJteC00IG15LTIgcC0yIGhvdmVyOmJnLWdyYXktNjAwIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTIwMCByb3VuZGVkLWxnIHRleHQtMnhsIHRleHQtd2hpdGUgbGVhZGluZy1ub25lXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE5hdk9wZW4oZmFsc2UpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIMOXXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAge3NjZW5lcy5tYXAobmFtZSA9PiAoXG4gICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgIGtleT17bmFtZX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC04IHB5LTQgY3Vyc29yLXBvaW50ZXIgaG92ZXI6YmctZ3JheS02MDAgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwIHJvdW5kZWQtbGdcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtyb3V0ZXIucHVzaChgLyR7bmFtZX1gKTsgc2V0TmF2T3BlbihmYWxzZSl9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSBmb250LWJvbGQgdXBwZXJjYXNlIHRleHQtbGcgdHJhY2tpbmctd2lkZXN0XCI+e25hbWV9PC9wPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9uYXY+XG4gICAgICA8L21haW4+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBnZXRzIGNhbGxlZCBhdCBidWlsZCB0aW1lXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RhdGljUGF0aHMoKSB7XG4gIGNvbnN0IHBhdGhzID0gc2NlbmVzLm1hcCgoc2NlbmUpID0+ICh7XG4gICAgcGFyYW1zOiB7IG5hbWU6IHNjZW5lIH0sXG4gIH0pKVxuICAvLyBXZSdsbCBwcmUtcmVuZGVyIG9ubHkgdGhlc2UgcGF0aHMgYXQgYnVpbGQgdGltZS5cbiAgLy8geyBmYWxsYmFjazogZmFsc2UgfSBtZWFucyBvdGhlciByb3V0ZXMgc2hvdWxkIDQwNC5cbiAgcmV0dXJuIHsgcGF0aHMsIGZhbGxiYWNrOiBmYWxzZSB9XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgYXQgYnVpbGQgdGltZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0YXRpY1Byb3BzKHsgcGFyYW1zIH0pIHtcbiAgcmV0dXJuIHsgcHJvcHM6IHsgbmFtZTogcGFyYW1zLm5hbWUgfSB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/[name].js\n");

/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _name___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./[name] */ \"./pages/[name].js\");\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_name___WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvaW5kZXguanM/NDRkOCJdLCJuYW1lcyI6WyJIb21lIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFFZUEsNkdBQWYiLCJmaWxlIjoiLi9wYWdlcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIb21lIGZyb20gXCIuL1tuYW1lXVwiO1xuXG5leHBvcnQgZGVmYXVsdCBIb21lO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ })

},[["./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=%2FUsers%2Folivermulari%2FDocuments%2Fdev%2Fhobbies%2Fviewer%2Fpages%2Findex.js!./","webpack"]]]);